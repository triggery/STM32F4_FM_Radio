
STM32F4_FM_Radio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004678  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fd8  08004808  08004808  00014808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080057e0  080057e0  000157e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080057e8  080057e8  000157e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080057ec  080057ec  000157ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  20000000  080057f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
  8 .bss          000004c8  200001ec  200001ec  000201ec  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200006b4  200006b4  000201ec  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 11 .debug_info   00014ddf  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000026eb  00000000  00000000  00034ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007a61  00000000  00000000  000376e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000968  00000000  00000000  0003f148  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d20  00000000  00000000  0003fab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005c00  00000000  00000000  000407d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003e25  00000000  00000000  000463d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004a1f5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000026bc  00000000  00000000  0004a274  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047f0 	.word	0x080047f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	080047f0 	.word	0x080047f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b97a 	b.w	8000f4c <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f806 	bl	8000c70 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__udivmoddi4>:
 8000c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c74:	468c      	mov	ip, r1
 8000c76:	460d      	mov	r5, r1
 8000c78:	4604      	mov	r4, r0
 8000c7a:	9e08      	ldr	r6, [sp, #32]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d151      	bne.n	8000d24 <__udivmoddi4+0xb4>
 8000c80:	428a      	cmp	r2, r1
 8000c82:	4617      	mov	r7, r2
 8000c84:	d96d      	bls.n	8000d62 <__udivmoddi4+0xf2>
 8000c86:	fab2 fe82 	clz	lr, r2
 8000c8a:	f1be 0f00 	cmp.w	lr, #0
 8000c8e:	d00b      	beq.n	8000ca8 <__udivmoddi4+0x38>
 8000c90:	f1ce 0c20 	rsb	ip, lr, #32
 8000c94:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c98:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c9c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ca0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ca4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ca8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cac:	0c25      	lsrs	r5, r4, #16
 8000cae:	fbbc f8fa 	udiv	r8, ip, sl
 8000cb2:	fa1f f987 	uxth.w	r9, r7
 8000cb6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cbe:	fb08 f309 	mul.w	r3, r8, r9
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x6c>
 8000cc6:	19ed      	adds	r5, r5, r7
 8000cc8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ccc:	f080 8123 	bcs.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	f240 8120 	bls.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	443d      	add	r5, r7
 8000cdc:	1aed      	subs	r5, r5, r3
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ce4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ce8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cec:	fb00 f909 	mul.w	r9, r0, r9
 8000cf0:	45a1      	cmp	r9, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x98>
 8000cf4:	19e4      	adds	r4, r4, r7
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	f080 810a 	bcs.w	8000f12 <__udivmoddi4+0x2a2>
 8000cfe:	45a1      	cmp	r9, r4
 8000d00:	f240 8107 	bls.w	8000f12 <__udivmoddi4+0x2a2>
 8000d04:	3802      	subs	r0, #2
 8000d06:	443c      	add	r4, r7
 8000d08:	eba4 0409 	sub.w	r4, r4, r9
 8000d0c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d10:	2100      	movs	r1, #0
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d061      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d16:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	6034      	str	r4, [r6, #0]
 8000d1e:	6073      	str	r3, [r6, #4]
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0xc8>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d054      	beq.n	8000dd6 <__udivmoddi4+0x166>
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d32:	4608      	mov	r0, r1
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	f040 808e 	bne.w	8000e5e <__udivmoddi4+0x1ee>
 8000d42:	42ab      	cmp	r3, r5
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xdc>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80fa 	bhi.w	8000f40 <__udivmoddi4+0x2d0>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	46ac      	mov	ip, r5
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d03f      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d5a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	b912      	cbnz	r2, 8000d6a <__udivmoddi4+0xfa>
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d6a:	fab7 fe87 	clz	lr, r7
 8000d6e:	f1be 0f00 	cmp.w	lr, #0
 8000d72:	d134      	bne.n	8000dde <__udivmoddi4+0x16e>
 8000d74:	1beb      	subs	r3, r5, r7
 8000d76:	0c3a      	lsrs	r2, r7, #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d82:	0c25      	lsrs	r5, r4, #16
 8000d84:	fb02 3318 	mls	r3, r2, r8, r3
 8000d88:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d8c:	fb0c f308 	mul.w	r3, ip, r8
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x134>
 8000d94:	19ed      	adds	r5, r5, r7
 8000d96:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x132>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	f200 80d1 	bhi.w	8000f44 <__udivmoddi4+0x2d4>
 8000da2:	4680      	mov	r8, r0
 8000da4:	1aed      	subs	r5, r5, r3
 8000da6:	b2a3      	uxth	r3, r4
 8000da8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dac:	fb02 5510 	mls	r5, r2, r0, r5
 8000db0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000db4:	fb0c fc00 	mul.w	ip, ip, r0
 8000db8:	45a4      	cmp	ip, r4
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x15c>
 8000dbc:	19e4      	adds	r4, r4, r7
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x15a>
 8000dc4:	45a4      	cmp	ip, r4
 8000dc6:	f200 80b8 	bhi.w	8000f3a <__udivmoddi4+0x2ca>
 8000dca:	4618      	mov	r0, r3
 8000dcc:	eba4 040c 	sub.w	r4, r4, ip
 8000dd0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd4:	e79d      	b.n	8000d12 <__udivmoddi4+0xa2>
 8000dd6:	4631      	mov	r1, r6
 8000dd8:	4630      	mov	r0, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	f1ce 0420 	rsb	r4, lr, #32
 8000de2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000de6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dea:	fa20 f804 	lsr.w	r8, r0, r4
 8000dee:	0c3a      	lsrs	r2, r7, #16
 8000df0:	fa25 f404 	lsr.w	r4, r5, r4
 8000df4:	ea48 0803 	orr.w	r8, r8, r3
 8000df8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dfc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e00:	fb02 4411 	mls	r4, r2, r1, r4
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e0c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e10:	42ab      	cmp	r3, r5
 8000e12:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e16:	d909      	bls.n	8000e2c <__udivmoddi4+0x1bc>
 8000e18:	19ed      	adds	r5, r5, r7
 8000e1a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e1e:	f080 808a 	bcs.w	8000f36 <__udivmoddi4+0x2c6>
 8000e22:	42ab      	cmp	r3, r5
 8000e24:	f240 8087 	bls.w	8000f36 <__udivmoddi4+0x2c6>
 8000e28:	3902      	subs	r1, #2
 8000e2a:	443d      	add	r5, r7
 8000e2c:	1aeb      	subs	r3, r5, r3
 8000e2e:	fa1f f588 	uxth.w	r5, r8
 8000e32:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e36:	fb02 3310 	mls	r3, r2, r0, r3
 8000e3a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e3e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e42:	42ab      	cmp	r3, r5
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x1e6>
 8000e46:	19ed      	adds	r5, r5, r7
 8000e48:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4c:	d26f      	bcs.n	8000f2e <__udivmoddi4+0x2be>
 8000e4e:	42ab      	cmp	r3, r5
 8000e50:	d96d      	bls.n	8000f2e <__udivmoddi4+0x2be>
 8000e52:	3802      	subs	r0, #2
 8000e54:	443d      	add	r5, r7
 8000e56:	1aeb      	subs	r3, r5, r3
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	e78f      	b.n	8000d7e <__udivmoddi4+0x10e>
 8000e5e:	f1c1 0720 	rsb	r7, r1, #32
 8000e62:	fa22 f807 	lsr.w	r8, r2, r7
 8000e66:	408b      	lsls	r3, r1
 8000e68:	fa05 f401 	lsl.w	r4, r5, r1
 8000e6c:	ea48 0303 	orr.w	r3, r8, r3
 8000e70:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e74:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e7e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e82:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e86:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e8a:	fa1f f883 	uxth.w	r8, r3
 8000e8e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e92:	fb09 f408 	mul.w	r4, r9, r8
 8000e96:	42ac      	cmp	r4, r5
 8000e98:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x244>
 8000ea2:	18ed      	adds	r5, r5, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	d243      	bcs.n	8000f32 <__udivmoddi4+0x2c2>
 8000eaa:	42ac      	cmp	r4, r5
 8000eac:	d941      	bls.n	8000f32 <__udivmoddi4+0x2c2>
 8000eae:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb2:	441d      	add	r5, r3
 8000eb4:	1b2d      	subs	r5, r5, r4
 8000eb6:	fa1f fe8e 	uxth.w	lr, lr
 8000eba:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ebe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ec2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ec6:	fb00 f808 	mul.w	r8, r0, r8
 8000eca:	45a0      	cmp	r8, r4
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x26e>
 8000ece:	18e4      	adds	r4, r4, r3
 8000ed0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ed4:	d229      	bcs.n	8000f2a <__udivmoddi4+0x2ba>
 8000ed6:	45a0      	cmp	r8, r4
 8000ed8:	d927      	bls.n	8000f2a <__udivmoddi4+0x2ba>
 8000eda:	3802      	subs	r0, #2
 8000edc:	441c      	add	r4, r3
 8000ede:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	454c      	cmp	r4, r9
 8000eec:	46c6      	mov	lr, r8
 8000eee:	464d      	mov	r5, r9
 8000ef0:	d315      	bcc.n	8000f1e <__udivmoddi4+0x2ae>
 8000ef2:	d012      	beq.n	8000f1a <__udivmoddi4+0x2aa>
 8000ef4:	b156      	cbz	r6, 8000f0c <__udivmoddi4+0x29c>
 8000ef6:	ebba 030e 	subs.w	r3, sl, lr
 8000efa:	eb64 0405 	sbc.w	r4, r4, r5
 8000efe:	fa04 f707 	lsl.w	r7, r4, r7
 8000f02:	40cb      	lsrs	r3, r1
 8000f04:	431f      	orrs	r7, r3
 8000f06:	40cc      	lsrs	r4, r1
 8000f08:	6037      	str	r7, [r6, #0]
 8000f0a:	6074      	str	r4, [r6, #4]
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	4618      	mov	r0, r3
 8000f14:	e6f8      	b.n	8000d08 <__udivmoddi4+0x98>
 8000f16:	4690      	mov	r8, r2
 8000f18:	e6e0      	b.n	8000cdc <__udivmoddi4+0x6c>
 8000f1a:	45c2      	cmp	sl, r8
 8000f1c:	d2ea      	bcs.n	8000ef4 <__udivmoddi4+0x284>
 8000f1e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f22:	eb69 0503 	sbc.w	r5, r9, r3
 8000f26:	3801      	subs	r0, #1
 8000f28:	e7e4      	b.n	8000ef4 <__udivmoddi4+0x284>
 8000f2a:	4628      	mov	r0, r5
 8000f2c:	e7d7      	b.n	8000ede <__udivmoddi4+0x26e>
 8000f2e:	4640      	mov	r0, r8
 8000f30:	e791      	b.n	8000e56 <__udivmoddi4+0x1e6>
 8000f32:	4681      	mov	r9, r0
 8000f34:	e7be      	b.n	8000eb4 <__udivmoddi4+0x244>
 8000f36:	4601      	mov	r1, r0
 8000f38:	e778      	b.n	8000e2c <__udivmoddi4+0x1bc>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	443c      	add	r4, r7
 8000f3e:	e745      	b.n	8000dcc <__udivmoddi4+0x15c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e708      	b.n	8000d56 <__udivmoddi4+0xe6>
 8000f44:	f1a8 0802 	sub.w	r8, r8, #2
 8000f48:	443d      	add	r5, r7
 8000f4a:	e72b      	b.n	8000da4 <__udivmoddi4+0x134>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <setFrequency>:
/* USER CODE BEGIN 0 */
//#define TEA_ADDR (0xC0 << 1)
#define TEA_ADDR (0x60 << 1)

void setFrequency(float frequency) {
	unsigned int frequencyB = 4 * (frequency * 1000000 + 225000) / 32768;
 8000f50:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000fb0 <setFrequency+0x60>
 8000f54:	eddf 7a17 	vldr	s15, [pc, #92]	; 8000fb4 <setFrequency+0x64>
 8000f58:	eee0 7a07 	vfma.f32	s15, s0, s14
void setFrequency(float frequency) {
 8000f5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	unsigned int frequencyB = 4 * (frequency * 1000000 + 225000) / 32768;
 8000f5e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f66:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000fb8 <setFrequency+0x68>
		data_arr[0] = frequencyB >> 8;
		data_arr[1] = frequencyB & 0XFF;
		data_arr[2] = 0xB0;
		data_arr[3] = 0x10;
		data_arr[4] = 0x00;
		HAL_I2C_Master_Transmit(&hi2c1, TEA_ADDR, data_arr, sizeof(data_arr),
 8000f6a:	4814      	ldr	r0, [pc, #80]	; (8000fbc <setFrequency+0x6c>)
	unsigned int frequencyB = 4 * (frequency * 1000000 + 225000) / 32768;
 8000f6c:	ee67 7a87 	vmul.f32	s15, s15, s14
		HAL_I2C_Master_Transmit(&hi2c1, TEA_ADDR, data_arr, sizeof(data_arr),
 8000f70:	21c0      	movs	r1, #192	; 0xc0
	unsigned int frequencyB = 4 * (frequency * 1000000 + 225000) / 32768;
 8000f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f76:	ee17 3a90 	vmov	r3, s15
		data_arr[0] = frequencyB >> 8;
 8000f7a:	0a1a      	lsrs	r2, r3, #8
		data_arr[1] = frequencyB & 0XFF;
 8000f7c:	f88d 3009 	strb.w	r3, [sp, #9]
		data_arr[2] = 0xB0;
 8000f80:	23b0      	movs	r3, #176	; 0xb0
 8000f82:	f88d 300a 	strb.w	r3, [sp, #10]
		data_arr[3] = 0x10;
 8000f86:	2310      	movs	r3, #16
 8000f88:	f88d 300b 	strb.w	r3, [sp, #11]
		data_arr[4] = 0x00;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f88d 300c 	strb.w	r3, [sp, #12]
		HAL_I2C_Master_Transmit(&hi2c1, TEA_ADDR, data_arr, sizeof(data_arr),
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
		data_arr[0] = frequencyB >> 8;
 8000f96:	f88d 2008 	strb.w	r2, [sp, #8]
		HAL_I2C_Master_Transmit(&hi2c1, TEA_ADDR, data_arr, sizeof(data_arr),
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	aa02      	add	r2, sp, #8
 8000f9e:	2305      	movs	r3, #5
 8000fa0:	f000 fe86 	bl	8001cb0 <HAL_I2C_Master_Transmit>
			HAL_MAX_DELAY);
	HAL_Delay(100);
 8000fa4:	2064      	movs	r0, #100	; 0x64
 8000fa6:	f000 fba3 	bl	80016f0 <HAL_Delay>
}
 8000faa:	b005      	add	sp, #20
 8000fac:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fb0:	49742400 	.word	0x49742400
 8000fb4:	485bba00 	.word	0x485bba00
 8000fb8:	38000000 	.word	0x38000000
 8000fbc:	20000658 	.word	0x20000658

08000fc0 <printFreqStr>:

volatile uint16_t encoderValue = 0;
volatile double freq = 100.1;

void printFreqStr(double freq) {
 8000fc0:	b500      	push	{lr}
 8000fc2:	b089      	sub	sp, #36	; 0x24
	char freqBuff[20];
	snprintf(freqBuff, sizeof(freqBuff), "%.1f MHz", freq);
 8000fc4:	ed8d 0b00 	vstr	d0, [sp]
 8000fc8:	4a09      	ldr	r2, [pc, #36]	; (8000ff0 <printFreqStr+0x30>)
 8000fca:	2114      	movs	r1, #20
 8000fcc:	a803      	add	r0, sp, #12
 8000fce:	f002 f809 	bl	8002fe4 <sniprintf>

	ssd1306_SetCursor(1, 5);
 8000fd2:	2105      	movs	r1, #5
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f000 fb35 	bl	8001644 <ssd1306_SetCursor>
	ssd1306_WriteString(freqBuff, Font_11x18, White);
 8000fda:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <printFreqStr+0x34>)
 8000fdc:	2301      	movs	r3, #1
 8000fde:	ca06      	ldmia	r2, {r1, r2}
 8000fe0:	a803      	add	r0, sp, #12
 8000fe2:	f000 fb19 	bl	8001618 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000fe6:	f000 fa19 	bl	800141c <ssd1306_UpdateScreen>
}
 8000fea:	b009      	add	sp, #36	; 0x24
 8000fec:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ff0:	08004808 	.word	0x08004808
 8000ff4:	2000000c 	.word	0x2000000c

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b530      	push	{r4, r5, lr}
 8000ffa:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffc:	2230      	movs	r2, #48	; 0x30
 8000ffe:	2100      	movs	r1, #0
 8001000:	a808      	add	r0, sp, #32
 8001002:	f001 fb7b 	bl	80026fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001006:	2100      	movs	r1, #0
 8001008:	2214      	movs	r2, #20
 800100a:	a803      	add	r0, sp, #12
 800100c:	f001 fb76 	bl	80026fc <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001010:	2400      	movs	r4, #0
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <SystemClock_Config+0x90>)
 8001014:	9401      	str	r4, [sp, #4]
 8001016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001018:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800101c:	641a      	str	r2, [r3, #64]	; 0x40
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <SystemClock_Config+0x94>)
 800102a:	9402      	str	r4, [sp, #8]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	9b02      	ldr	r3, [sp, #8]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800103e:	2301      	movs	r3, #1
 8001040:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001042:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001046:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001048:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800104c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800104e:	2308      	movs	r3, #8
 8001050:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001052:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001056:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001058:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800105c:	2304      	movs	r3, #4
 800105e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001060:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001062:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001064:	f000 ff90 	bl	8001f88 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001068:	230f      	movs	r3, #15
 800106a:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800106c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001070:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001072:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001078:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800107a:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107c:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800107e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001080:	f001 f932 	bl	80022e8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001084:	b015      	add	sp, #84	; 0x54
 8001086:	bd30      	pop	{r4, r5, pc}
 8001088:	40023800 	.word	0x40023800
 800108c:	40007000 	.word	0x40007000

08001090 <main>:
{
 8001090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint16_t encoderValueOld = encoderValue;
 8001094:	4f6a      	ldr	r7, [pc, #424]	; (8001240 <main+0x1b0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001096:	4d6b      	ldr	r5, [pc, #428]	; (8001244 <main+0x1b4>)
  uint16_t encoderValueOld = encoderValue;
 8001098:	883e      	ldrh	r6, [r7, #0]
  htim8.Instance = TIM8;
 800109a:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 8001260 <main+0x1d0>
{
 800109e:	b090      	sub	sp, #64	; 0x40
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	2400      	movs	r4, #0
  HAL_Init();
 80010a2:	f000 faf9 	bl	8001698 <HAL_Init>
  SystemClock_Config();
 80010a6:	f7ff ffa7 	bl	8000ff8 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	4b67      	ldr	r3, [pc, #412]	; (8001248 <main+0x1b8>)
 80010ac:	9401      	str	r4, [sp, #4]
 80010ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hi2c1.Instance = I2C1;
 80010b0:	4866      	ldr	r0, [pc, #408]	; (800124c <main+0x1bc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	f042 0201 	orr.w	r2, r2, #1
 80010b6:	631a      	str	r2, [r3, #48]	; 0x30
 80010b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ba:	f002 0201 	and.w	r2, r2, #1
 80010be:	9201      	str	r2, [sp, #4]
 80010c0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	9402      	str	r4, [sp, #8]
 80010c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010c6:	f042 0202 	orr.w	r2, r2, #2
 80010ca:	631a      	str	r2, [r3, #48]	; 0x30
 80010cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ce:	f002 0202 	and.w	r2, r2, #2
 80010d2:	9202      	str	r2, [sp, #8]
 80010d4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d6:	9403      	str	r4, [sp, #12]
 80010d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010da:	f042 0204 	orr.w	r2, r2, #4
 80010de:	631a      	str	r2, [r3, #48]	; 0x30
 80010e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010e2:	f002 0204 	and.w	r2, r2, #4
 80010e6:	9203      	str	r2, [sp, #12]
 80010e8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ea:	9404      	str	r4, [sp, #16]
 80010ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010f2:	631a      	str	r2, [r3, #48]	; 0x30
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  hi2c1.Init.ClockSpeed = 400000;
 80010f6:	4a56      	ldr	r2, [pc, #344]	; (8001250 <main+0x1c0>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f8:	6084      	str	r4, [r0, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010fe:	9304      	str	r3, [sp, #16]
 8001100:	9b04      	ldr	r3, [sp, #16]
  hi2c1.Init.ClockSpeed = 400000;
 8001102:	4b54      	ldr	r3, [pc, #336]	; (8001254 <main+0x1c4>)
  hi2c1.Init.OwnAddress1 = 0;
 8001104:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.ClockSpeed = 400000;
 8001106:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800110a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800110e:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001110:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001112:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001114:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001116:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001118:	f000 fd5c 	bl	8001bd4 <HAL_I2C_Init>
  TIM_Encoder_InitTypeDef sConfig = {0};
 800111c:	2224      	movs	r2, #36	; 0x24
 800111e:	4621      	mov	r1, r4
 8001120:	a807      	add	r0, sp, #28
 8001122:	f001 faeb 	bl	80026fc <memset>
  htim8.Init.Prescaler = 0;
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim8.Init.Period = 1023;
 8001126:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800112a:	60eb      	str	r3, [r5, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim8.Init.RepetitionCounter = 0;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800112c:	2303      	movs	r3, #3
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800112e:	2201      	movs	r2, #1
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001130:	9307      	str	r3, [sp, #28]
  sConfig.IC1Filter = 4;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 4;
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001132:	a907      	add	r1, sp, #28
  sConfig.IC1Filter = 4;
 8001134:	2304      	movs	r3, #4
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001136:	4628      	mov	r0, r5
  sConfig.IC1Filter = 4;
 8001138:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.IC2Filter = 4;
 800113a:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800113c:	9209      	str	r2, [sp, #36]	; 0x24
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800113e:	920d      	str	r2, [sp, #52]	; 0x34
  htim8.Instance = TIM8;
 8001140:	f8c5 a000 	str.w	sl, [r5]
  htim8.Init.Prescaler = 0;
 8001144:	606c      	str	r4, [r5, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	60ac      	str	r4, [r5, #8]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001148:	612c      	str	r4, [r5, #16]
  htim8.Init.RepetitionCounter = 0;
 800114a:	616c      	str	r4, [r5, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114c:	9405      	str	r4, [sp, #20]
 800114e:	9406      	str	r4, [sp, #24]
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001150:	f001 f9fa 	bl	8002548 <HAL_TIM_Encoder_Init>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001154:	a905      	add	r1, sp, #20
 8001156:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001158:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115a:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800115c:	f001 fa3d 	bl	80025da <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001160:	4628      	mov	r0, r5
  setFrequency(freq);
 8001162:	4d3d      	ldr	r5, [pc, #244]	; (8001258 <main+0x1c8>)
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001164:	2118      	movs	r1, #24
 8001166:	f001 f969 	bl	800243c <HAL_TIM_Encoder_Start>
  setFrequency(freq);
 800116a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800116e:	f7ff fd17 	bl	8000ba0 <__aeabi_d2f>
				  freq -= 0.1;
 8001172:	f20f 09bc 	addw	r9, pc, #188	; 0xbc
 8001176:	e9d9 8900 	ldrd	r8, r9, [r9]
  setFrequency(freq);
 800117a:	ee00 0a10 	vmov	s0, r0
 800117e:	f7ff fee7 	bl	8000f50 <setFrequency>
  ssd1306_Init();
 8001182:	f000 f971 	bl	8001468 <ssd1306_Init>
  printFreqStr(freq);
 8001186:	ed95 0b00 	vldr	d0, [r5]
 800118a:	f7ff ff19 	bl	8000fc0 <printFreqStr>
  uint16_t encoderValueOld = encoderValue;
 800118e:	b2b6      	uxth	r6, r6
  uint8_t cntTick = 0;
 8001190:	4623      	mov	r3, r4
	  encoderValue = TIM8->CNT;
 8001192:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 8001196:	b292      	uxth	r2, r2
 8001198:	803a      	strh	r2, [r7, #0]
	  if ( (encoderValue != encoderValueOld) && (cntTick < 4) ) {
 800119a:	883a      	ldrh	r2, [r7, #0]
 800119c:	b292      	uxth	r2, r2
 800119e:	4296      	cmp	r6, r2
 80011a0:	d011      	beq.n	80011c6 <main+0x136>
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d80f      	bhi.n	80011c6 <main+0x136>
		  if( encoderValue > encoderValueOld ) {
 80011a6:	883a      	ldrh	r2, [r7, #0]
 80011a8:	b292      	uxth	r2, r2
		  cntTick++;
 80011aa:	3301      	adds	r3, #1
		  if( encoderValue > encoderValueOld ) {
 80011ac:	4296      	cmp	r6, r2
		  cntTick++;
 80011ae:	b2db      	uxtb	r3, r3
		  if( encoderValue > encoderValueOld ) {
 80011b0:	d307      	bcc.n	80011c2 <main+0x132>
		  else if ( encoderValue < encoderValueOld ) {
 80011b2:	883a      	ldrh	r2, [r7, #0]
 80011b4:	b292      	uxth	r2, r2
			  direction = DIRECTION_DOWN;
 80011b6:	4296      	cmp	r6, r2
 80011b8:	bf88      	it	hi
 80011ba:	2402      	movhi	r4, #2
		  encoderValueOld = encoderValue;
 80011bc:	883e      	ldrh	r6, [r7, #0]
 80011be:	b2b6      	uxth	r6, r6
 80011c0:	e7e7      	b.n	8001192 <main+0x102>
			  direction = DIRECTION_UP;
 80011c2:	2401      	movs	r4, #1
 80011c4:	e7fa      	b.n	80011bc <main+0x12c>
	  else if ( cntTick == 4 ) {
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d1e3      	bne.n	8001192 <main+0x102>
		  if( direction == DIRECTION_UP ) {
 80011ca:	2c01      	cmp	r4, #1
 80011cc:	d11c      	bne.n	8001208 <main+0x178>
			  if(freq < FM_MAX_FREQ) {
 80011ce:	e9d5 0100 	ldrd	r0, r1, [r5]
 80011d2:	2200      	movs	r2, #0
 80011d4:	4b21      	ldr	r3, [pc, #132]	; (800125c <main+0x1cc>)
 80011d6:	f7ff fc7d 	bl	8000ad4 <__aeabi_dcmplt>
 80011da:	b138      	cbz	r0, 80011ec <main+0x15c>
				  freq += 0.1;
 80011dc:	4642      	mov	r2, r8
 80011de:	464b      	mov	r3, r9
 80011e0:	e9d5 0100 	ldrd	r0, r1, [r5]
 80011e4:	f7ff f852 	bl	800028c <__adddf3>
				  freq -= 0.1;
 80011e8:	e9c5 0100 	strd	r0, r1, [r5]
		  setFrequency(freq);
 80011ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 80011f0:	f7ff fcd6 	bl	8000ba0 <__aeabi_d2f>
 80011f4:	ee00 0a10 	vmov	s0, r0
 80011f8:	f7ff feaa 	bl	8000f50 <setFrequency>
		  printFreqStr(freq);
 80011fc:	ed95 0b00 	vldr	d0, [r5]
 8001200:	f7ff fede 	bl	8000fc0 <printFreqStr>
		  cntTick = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	e7c4      	b.n	8001192 <main+0x102>
		  else if ( direction == DIRECTION_DOWN ) {
 8001208:	2c02      	cmp	r4, #2
 800120a:	d1ef      	bne.n	80011ec <main+0x15c>
			  if(freq > FM_MIN_FREQ) {
 800120c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8001210:	a309      	add	r3, pc, #36	; (adr r3, 8001238 <main+0x1a8>)
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	f7ff fc7b 	bl	8000b10 <__aeabi_dcmpgt>
 800121a:	2800      	cmp	r0, #0
 800121c:	d0e6      	beq.n	80011ec <main+0x15c>
				  freq -= 0.1;
 800121e:	4642      	mov	r2, r8
 8001220:	464b      	mov	r3, r9
 8001222:	e9d5 0100 	ldrd	r0, r1, [r5]
 8001226:	f7ff f82f 	bl	8000288 <__aeabi_dsub>
 800122a:	e7dd      	b.n	80011e8 <main+0x158>
 800122c:	f3af 8000 	nop.w
 8001230:	9999999a 	.word	0x9999999a
 8001234:	3fb99999 	.word	0x3fb99999
 8001238:	00000000 	.word	0x00000000
 800123c:	4055e000 	.word	0x4055e000
 8001240:	20000208 	.word	0x20000208
 8001244:	2000061c 	.word	0x2000061c
 8001248:	40023800 	.word	0x40023800
 800124c:	20000658 	.word	0x20000658
 8001250:	40005400 	.word	0x40005400
 8001254:	00061a80 	.word	0x00061a80
 8001258:	20000000 	.word	0x20000000
 800125c:	405b0000 	.word	0x405b0000
 8001260:	40010400 	.word	0x40010400

08001264 <HAL_TIM_Encoder_MspInit>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN TD */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001264:	b510      	push	{r4, lr}
 8001266:	4604      	mov	r4, r0
 8001268:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	2214      	movs	r2, #20
 800126c:	2100      	movs	r1, #0
 800126e:	a803      	add	r0, sp, #12
 8001270:	f001 fa44 	bl	80026fc <memset>
  if(htim_encoder->Instance==TIM8)
 8001274:	6822      	ldr	r2, [r4, #0]
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_TIM_Encoder_MspInit+0x64>)
 8001278:	429a      	cmp	r2, r3
 800127a:	d122      	bne.n	80012c2 <HAL_TIM_Encoder_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800127c:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 8001280:	2100      	movs	r1, #0
 8001282:	9101      	str	r1, [sp, #4]
 8001284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001286:	4811      	ldr	r0, [pc, #68]	; (80012cc <HAL_TIM_Encoder_MspInit+0x68>)
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001288:	f042 0202 	orr.w	r2, r2, #2
 800128c:	645a      	str	r2, [r3, #68]	; 0x44
 800128e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001290:	f002 0202 	and.w	r2, r2, #2
 8001294:	9201      	str	r2, [sp, #4]
 8001296:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001298:	9102      	str	r1, [sp, #8]
 800129a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800129c:	f042 0204 	orr.w	r2, r2, #4
 80012a0:	631a      	str	r2, [r3, #48]	; 0x30
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012ac:	23c0      	movs	r3, #192	; 0xc0
 80012ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80012ba:	2303      	movs	r3, #3
 80012bc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012be:	f000 fa87 	bl	80017d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80012c2:	b008      	add	sp, #32
 80012c4:	bd10      	pop	{r4, pc}
 80012c6:	bf00      	nop
 80012c8:	40010400 	.word	0x40010400
 80012cc:	40020800 	.word	0x40020800

080012d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <HAL_MspInit+0x34>)
 80012d4:	2100      	movs	r1, #0
 80012d6:	9100      	str	r1, [sp, #0]
 80012d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012de:	645a      	str	r2, [r3, #68]	; 0x44
 80012e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012e2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80012e6:	9200      	str	r2, [sp, #0]
 80012e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ea:	9101      	str	r1, [sp, #4]
 80012ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012f2:	641a      	str	r2, [r3, #64]	; 0x40
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fe:	b002      	add	sp, #8
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800

08001308 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001308:	b530      	push	{r4, r5, lr}
 800130a:	4604      	mov	r4, r0
 800130c:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130e:	2214      	movs	r2, #20
 8001310:	2100      	movs	r1, #0
 8001312:	a803      	add	r0, sp, #12
 8001314:	f001 f9f2 	bl	80026fc <memset>
  if(hi2c->Instance==I2C1)
 8001318:	6822      	ldr	r2, [r4, #0]
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <HAL_I2C_MspInit+0x64>)
 800131c:	429a      	cmp	r2, r3
 800131e:	d123      	bne.n	8001368 <HAL_I2C_MspInit+0x60>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001320:	4c13      	ldr	r4, [pc, #76]	; (8001370 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	4814      	ldr	r0, [pc, #80]	; (8001374 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001324:	2500      	movs	r5, #0
 8001326:	9501      	str	r5, [sp, #4]
 8001328:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800132a:	f043 0302 	orr.w	r3, r3, #2
 800132e:	6323      	str	r3, [r4, #48]	; 0x30
 8001330:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800133a:	23c0      	movs	r3, #192	; 0xc0
 800133c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800133e:	2312      	movs	r3, #18
 8001340:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001342:	2301      	movs	r3, #1
 8001344:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800134c:	2304      	movs	r3, #4
 800134e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001350:	f000 fa3e 	bl	80017d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001354:	9502      	str	r5, [sp, #8]
 8001356:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001358:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800135c:	6423      	str	r3, [r4, #64]	; 0x40
 800135e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001364:	9302      	str	r3, [sp, #8]
 8001366:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001368:	b009      	add	sp, #36	; 0x24
 800136a:	bd30      	pop	{r4, r5, pc}
 800136c:	40005400 	.word	0x40005400
 8001370:	40023800 	.word	0x40023800
 8001374:	40020400 	.word	0x40020400

08001378 <NMI_Handler>:
 8001378:	4770      	bx	lr

0800137a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137a:	e7fe      	b.n	800137a <HardFault_Handler>

0800137c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800137c:	e7fe      	b.n	800137c <MemManage_Handler>

0800137e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137e:	e7fe      	b.n	800137e <BusFault_Handler>

08001380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001380:	e7fe      	b.n	8001380 <UsageFault_Handler>

08001382 <SVC_Handler>:
 8001382:	4770      	bx	lr

08001384 <DebugMon_Handler>:
 8001384:	4770      	bx	lr

08001386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001386:	4770      	bx	lr

08001388 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001388:	f000 b9a0 	b.w	80016cc <HAL_IncTick>

0800138c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800138c:	490f      	ldr	r1, [pc, #60]	; (80013cc <SystemInit+0x40>)
 800138e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001392:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <SystemInit+0x44>)
 800139c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800139e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80013a0:	f042 0201 	orr.w	r2, r2, #1
 80013a4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80013a6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80013ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013b2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80013b4:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <SystemInit+0x48>)
 80013b6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013be:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80013c0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80013c6:	608b      	str	r3, [r1, #8]
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00
 80013d0:	40023800 	.word	0x40023800
 80013d4:	24003010 	.word	0x24003010

080013d8 <ssd1306_WriteCommand>:
static SSD1306_t SSD1306;

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command) {
 80013d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80013da:	aa06      	add	r2, sp, #24
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80013dc:	230a      	movs	r3, #10
static void ssd1306_WriteCommand(uint8_t command) {
 80013de:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	2301      	movs	r3, #1
 80013e6:	e88d 000c 	stmia.w	sp, {r2, r3}
 80013ea:	2178      	movs	r1, #120	; 0x78
 80013ec:	2200      	movs	r2, #0
 80013ee:	4803      	ldr	r0, [pc, #12]	; (80013fc <ssd1306_WriteCommand+0x24>)
 80013f0:	f000 fd34 	bl	8001e5c <HAL_I2C_Mem_Write>
}
 80013f4:	b007      	add	sp, #28
 80013f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80013fa:	bf00      	nop
 80013fc:	20000658 	.word	0x20000658

08001400 <ssd1306_Fill>:
void ssd1306_Fill(SSD1306_COLOR color) {
	/* Set memory */
	uint32_t i;

	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001400:	4905      	ldr	r1, [pc, #20]	; (8001418 <ssd1306_Fill+0x18>)
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001402:	2300      	movs	r3, #0
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001404:	1c02      	adds	r2, r0, #0
 8001406:	bf18      	it	ne
 8001408:	2201      	movne	r2, #1
 800140a:	4252      	negs	r2, r2
 800140c:	545a      	strb	r2, [r3, r1]
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800140e:	3301      	adds	r3, #1
 8001410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001414:	d1f6      	bne.n	8001404 <ssd1306_Fill+0x4>
	}
}
 8001416:	4770      	bx	lr
 8001418:	20000210 	.word	0x20000210

0800141c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) {
 800141c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	for (i = 0; i < 8; i++) {
		ssd1306_WriteCommand(0xB0 + i);
		ssd1306_WriteCommand(0x00);
		ssd1306_WriteCommand(0x10);

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1,
 800141e:	4e10      	ldr	r6, [pc, #64]	; (8001460 <ssd1306_UpdateScreen+0x44>)
 8001420:	4d10      	ldr	r5, [pc, #64]	; (8001464 <ssd1306_UpdateScreen+0x48>)
void ssd1306_UpdateScreen(void) {
 8001422:	2400      	movs	r4, #0
		ssd1306_WriteCommand(0xB0 + i);
 8001424:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 8001428:	b2c0      	uxtb	r0, r0
 800142a:	f7ff ffd5 	bl	80013d8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 800142e:	2000      	movs	r0, #0
 8001430:	f7ff ffd2 	bl	80013d8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8001434:	2010      	movs	r0, #16
 8001436:	f7ff ffcf 	bl	80013d8 <ssd1306_WriteCommand>
		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1,
 800143a:	2364      	movs	r3, #100	; 0x64
 800143c:	9302      	str	r3, [sp, #8]
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	eb06 13c4 	add.w	r3, r6, r4, lsl #7
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	2240      	movs	r2, #64	; 0x40
 800144a:	2301      	movs	r3, #1
 800144c:	2178      	movs	r1, #120	; 0x78
 800144e:	4628      	mov	r0, r5
 8001450:	3401      	adds	r4, #1
 8001452:	f000 fd03 	bl	8001e5c <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8001456:	2c08      	cmp	r4, #8
 8001458:	d1e4      	bne.n	8001424 <ssd1306_UpdateScreen+0x8>
				&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
	}
}
 800145a:	b004      	add	sp, #16
 800145c:	bd70      	pop	{r4, r5, r6, pc}
 800145e:	bf00      	nop
 8001460:	20000210 	.word	0x20000210
 8001464:	20000658 	.word	0x20000658

08001468 <ssd1306_Init>:
uint8_t ssd1306_Init(void) {
 8001468:	b508      	push	{r3, lr}
	HAL_Delay(100);
 800146a:	2064      	movs	r0, #100	; 0x64
 800146c:	f000 f940 	bl	80016f0 <HAL_Delay>
	ssd1306_WriteCommand(0xAE); //display off
 8001470:	20ae      	movs	r0, #174	; 0xae
 8001472:	f7ff ffb1 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8001476:	2020      	movs	r0, #32
 8001478:	f7ff ffae 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800147c:	2010      	movs	r0, #16
 800147e:	f7ff ffab 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001482:	20b0      	movs	r0, #176	; 0xb0
 8001484:	f7ff ffa8 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001488:	20c8      	movs	r0, #200	; 0xc8
 800148a:	f7ff ffa5 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 800148e:	2000      	movs	r0, #0
 8001490:	f7ff ffa2 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8001494:	2010      	movs	r0, #16
 8001496:	f7ff ff9f 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 800149a:	2040      	movs	r0, #64	; 0x40
 800149c:	f7ff ff9c 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80014a0:	2081      	movs	r0, #129	; 0x81
 80014a2:	f7ff ff99 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80014a6:	20ff      	movs	r0, #255	; 0xff
 80014a8:	f7ff ff96 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80014ac:	20a1      	movs	r0, #161	; 0xa1
 80014ae:	f7ff ff93 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80014b2:	20a6      	movs	r0, #166	; 0xa6
 80014b4:	f7ff ff90 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80014b8:	20a8      	movs	r0, #168	; 0xa8
 80014ba:	f7ff ff8d 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80014be:	203f      	movs	r0, #63	; 0x3f
 80014c0:	f7ff ff8a 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80014c4:	20a4      	movs	r0, #164	; 0xa4
 80014c6:	f7ff ff87 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80014ca:	20d3      	movs	r0, #211	; 0xd3
 80014cc:	f7ff ff84 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80014d0:	2000      	movs	r0, #0
 80014d2:	f7ff ff81 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80014d6:	20d5      	movs	r0, #213	; 0xd5
 80014d8:	f7ff ff7e 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80014dc:	20f0      	movs	r0, #240	; 0xf0
 80014de:	f7ff ff7b 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80014e2:	20d9      	movs	r0, #217	; 0xd9
 80014e4:	f7ff ff78 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80014e8:	2022      	movs	r0, #34	; 0x22
 80014ea:	f7ff ff75 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 80014ee:	20da      	movs	r0, #218	; 0xda
 80014f0:	f7ff ff72 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 80014f4:	2012      	movs	r0, #18
 80014f6:	f7ff ff6f 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 80014fa:	20db      	movs	r0, #219	; 0xdb
 80014fc:	f7ff ff6c 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001500:	2020      	movs	r0, #32
 8001502:	f7ff ff69 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001506:	208d      	movs	r0, #141	; 0x8d
 8001508:	f7ff ff66 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 800150c:	2014      	movs	r0, #20
 800150e:	f7ff ff63 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001512:	20af      	movs	r0, #175	; 0xaf
 8001514:	f7ff ff60 	bl	80013d8 <ssd1306_WriteCommand>
	ssd1306_Fill(Black);
 8001518:	2000      	movs	r0, #0
 800151a:	f7ff ff71 	bl	8001400 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 800151e:	f7ff ff7d 	bl	800141c <ssd1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8001522:	4b03      	ldr	r3, [pc, #12]	; (8001530 <ssd1306_Init+0xc8>)
	SSD1306.Initialized = 1;
 8001524:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 8001526:	2200      	movs	r2, #0
	SSD1306.Initialized = 1;
 8001528:	7158      	strb	r0, [r3, #5]
	SSD1306.CurrentX = 0;
 800152a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800152c:	805a      	strh	r2, [r3, #2]
}
 800152e:	bd08      	pop	{r3, pc}
 8001530:	2000020a 	.word	0x2000020a

08001534 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001534:	0603      	lsls	r3, r0, #24
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001536:	b530      	push	{r4, r5, lr}
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001538:	d41b      	bmi.n	8001572 <ssd1306_DrawPixel+0x3e>
 800153a:	293f      	cmp	r1, #63	; 0x3f
 800153c:	d819      	bhi.n	8001572 <ssd1306_DrawPixel+0x3e>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted) {
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <ssd1306_DrawPixel+0x40>)
 8001540:	791b      	ldrb	r3, [r3, #4]
 8001542:	b113      	cbz	r3, 800154a <ssd1306_DrawPixel+0x16>
		color = (SSD1306_COLOR) !color;
 8001544:	fab2 f282 	clz	r2, r2
 8001548:	0952      	lsrs	r2, r2, #5
 800154a:	08cb      	lsrs	r3, r1, #3
 800154c:	2580      	movs	r5, #128	; 0x80
	}

	// Draw in the right color
	if (color == White) {
 800154e:	2a01      	cmp	r2, #1
 8001550:	4c09      	ldr	r4, [pc, #36]	; (8001578 <ssd1306_DrawPixel+0x44>)
 8001552:	f001 0107 	and.w	r1, r1, #7
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001556:	fb05 0003 	mla	r0, r5, r3, r0
	if (color == White) {
 800155a:	d104      	bne.n	8001566 <ssd1306_DrawPixel+0x32>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800155c:	408a      	lsls	r2, r1
 800155e:	5c21      	ldrb	r1, [r4, r0]
 8001560:	430a      	orrs	r2, r1
 8001562:	5422      	strb	r2, [r4, r0]
 8001564:	bd30      	pop	{r4, r5, pc}
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001566:	2201      	movs	r2, #1
 8001568:	408a      	lsls	r2, r1
 800156a:	5c21      	ldrb	r1, [r4, r0]
 800156c:	ea21 0102 	bic.w	r1, r1, r2
 8001570:	5421      	strb	r1, [r4, r0]
 8001572:	bd30      	pop	{r4, r5, pc}
 8001574:	2000020a 	.word	0x2000020a
 8001578:	20000210 	.word	0x20000210

0800157c <ssd1306_WriteChar>:
//  Draw 1 char to the screen buffer
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800157c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001580:	b087      	sub	sp, #28
 8001582:	4607      	mov	r7, r0
 8001584:	a806      	add	r0, sp, #24
 8001586:	e900 0006 	stmdb	r0, {r1, r2}
 800158a:	469b      	mov	fp, r3
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800158c:	4b21      	ldr	r3, [pc, #132]	; (8001614 <ssd1306_WriteChar+0x98>)
 800158e:	f89d 9010 	ldrb.w	r9, [sp, #16]
 8001592:	881c      	ldrh	r4, [r3, #0]
 8001594:	9301      	str	r3, [sp, #4]
 8001596:	eb04 0209 	add.w	r2, r4, r9
 800159a:	2a7f      	cmp	r2, #127	; 0x7f
 800159c:	dc37      	bgt.n	800160e <ssd1306_WriteChar+0x92>
	SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight)) {
 800159e:	885b      	ldrh	r3, [r3, #2]
 80015a0:	f89d a011 	ldrb.w	sl, [sp, #17]
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	eb03 020a 	add.w	r2, r3, sl
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80015aa:	2a3f      	cmp	r2, #63	; 0x3f
 80015ac:	dc2f      	bgt.n	800160e <ssd1306_WriteChar+0x92>
		return 0;
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++) {
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80015ae:	f1a7 0220 	sub.w	r2, r7, #32
 80015b2:	fb0a f302 	mul.w	r3, sl, r2
 80015b6:	9303      	str	r3, [sp, #12]
 80015b8:	2600      	movs	r6, #0
	for (i = 0; i < Font.FontHeight; i++) {
 80015ba:	4556      	cmp	r6, sl
 80015bc:	d306      	bcc.n	80015cc <ssd1306_WriteChar+0x50>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 80015be:	9b01      	ldr	r3, [sp, #4]
 80015c0:	444c      	add	r4, r9
 80015c2:	801c      	strh	r4, [r3, #0]

	// Return written char for validation
	return ch;
}
 80015c4:	4638      	mov	r0, r7
 80015c6:	b007      	add	sp, #28
 80015c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80015cc:	9b03      	ldr	r3, [sp, #12]
 80015ce:	9905      	ldr	r1, [sp, #20]
 80015d0:	18f2      	adds	r2, r6, r3
		for (j = 0; j < Font.FontWidth; j++) {
 80015d2:	2500      	movs	r5, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80015d4:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 80015d8:	9302      	str	r3, [sp, #8]
 80015da:	9b00      	ldr	r3, [sp, #0]
 80015dc:	eb03 0806 	add.w	r8, r3, r6
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80015e0:	fa5f f888 	uxtb.w	r8, r8
		for (j = 0; j < Font.FontWidth; j++) {
 80015e4:	454d      	cmp	r5, r9
 80015e6:	d301      	bcc.n	80015ec <ssd1306_WriteChar+0x70>
	for (i = 0; i < Font.FontHeight; i++) {
 80015e8:	3601      	adds	r6, #1
 80015ea:	e7e6      	b.n	80015ba <ssd1306_WriteChar+0x3e>
			if ((b << j) & 0x8000) {
 80015ec:	9b02      	ldr	r3, [sp, #8]
 80015ee:	fa03 f205 	lsl.w	r2, r3, r5
 80015f2:	0413      	lsls	r3, r2, #16
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80015f4:	eb05 0004 	add.w	r0, r5, r4
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80015f8:	bf56      	itet	pl
 80015fa:	fabb f28b 	clzpl	r2, fp
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80015fe:	465a      	movmi	r2, fp
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 8001600:	0952      	lsrpl	r2, r2, #5
 8001602:	4641      	mov	r1, r8
 8001604:	b2c0      	uxtb	r0, r0
 8001606:	f7ff ff95 	bl	8001534 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++) {
 800160a:	3501      	adds	r5, #1
 800160c:	e7ea      	b.n	80015e4 <ssd1306_WriteChar+0x68>
		return 0;
 800160e:	2700      	movs	r7, #0
 8001610:	e7d8      	b.n	80015c4 <ssd1306_WriteChar+0x48>
 8001612:	bf00      	nop
 8001614:	2000020a 	.word	0x2000020a

08001618 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800161a:	e88d 0006 	stmia.w	sp, {r1, r2}
 800161e:	466d      	mov	r5, sp
 8001620:	461f      	mov	r7, r3
 8001622:	1e46      	subs	r6, r0, #1
	// Write until null-byte
	while (*str) {
 8001624:	7874      	ldrb	r4, [r6, #1]
 8001626:	b14c      	cbz	r4, 800163c <ssd1306_WriteString+0x24>
		if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001628:	4620      	mov	r0, r4
 800162a:	463b      	mov	r3, r7
 800162c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001630:	f7ff ffa4 	bl	800157c <ssd1306_WriteChar>
 8001634:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 8001638:	42a0      	cmp	r0, r4
 800163a:	d0f3      	beq.n	8001624 <ssd1306_WriteString+0xc>
		str++;
	}

	// Everything ok
	return *str;
}
 800163c:	4620      	mov	r0, r4
 800163e:	b003      	add	sp, #12
 8001640:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001644 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
	SSD1306.CurrentX = x;
 8001644:	4b01      	ldr	r3, [pc, #4]	; (800164c <ssd1306_SetCursor+0x8>)
 8001646:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8001648:	8059      	strh	r1, [r3, #2]
 800164a:	4770      	bx	lr
 800164c:	2000020a 	.word	0x2000020a

08001650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001650:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001652:	4a0e      	ldr	r2, [pc, #56]	; (800168c <HAL_InitTick+0x3c>)
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <HAL_InitTick+0x40>)
{
 8001656:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001658:	7818      	ldrb	r0, [r3, #0]
 800165a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001662:	6810      	ldr	r0, [r2, #0]
 8001664:	fbb0 f0f3 	udiv	r0, r0, r3
 8001668:	f000 f89c 	bl	80017a4 <HAL_SYSTICK_Config>
 800166c:	4604      	mov	r4, r0
 800166e:	b958      	cbnz	r0, 8001688 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001670:	2d0f      	cmp	r5, #15
 8001672:	d809      	bhi.n	8001688 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001674:	4602      	mov	r2, r0
 8001676:	4629      	mov	r1, r5
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f000 f85e 	bl	800173c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <HAL_InitTick+0x44>)
 8001682:	4620      	mov	r0, r4
 8001684:	601d      	str	r5, [r3, #0]
 8001686:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001688:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800168a:	bd38      	pop	{r3, r4, r5, pc}
 800168c:	20000008 	.word	0x20000008
 8001690:	20000014 	.word	0x20000014
 8001694:	20000018 	.word	0x20000018

08001698 <HAL_Init>:
{
 8001698:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <HAL_Init+0x30>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016a2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016aa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016b2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b4:	2003      	movs	r0, #3
 80016b6:	f000 f82f 	bl	8001718 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ba:	2000      	movs	r0, #0
 80016bc:	f7ff ffc8 	bl	8001650 <HAL_InitTick>
  HAL_MspInit();
 80016c0:	f7ff fe06 	bl	80012d0 <HAL_MspInit>
}
 80016c4:	2000      	movs	r0, #0
 80016c6:	bd08      	pop	{r3, pc}
 80016c8:	40023c00 	.word	0x40023c00

080016cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80016cc:	4a03      	ldr	r2, [pc, #12]	; (80016dc <HAL_IncTick+0x10>)
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <HAL_IncTick+0x14>)
 80016d0:	6811      	ldr	r1, [r2, #0]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	440b      	add	r3, r1
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	200006ac 	.word	0x200006ac
 80016e0:	20000014 	.word	0x20000014

080016e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80016e4:	4b01      	ldr	r3, [pc, #4]	; (80016ec <HAL_GetTick+0x8>)
 80016e6:	6818      	ldr	r0, [r3, #0]
}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	200006ac 	.word	0x200006ac

080016f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f0:	b538      	push	{r3, r4, r5, lr}
 80016f2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80016f4:	f7ff fff6 	bl	80016e4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016f8:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80016fa:	bf1c      	itt	ne
 80016fc:	4b05      	ldrne	r3, [pc, #20]	; (8001714 <HAL_Delay+0x24>)
 80016fe:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001700:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001702:	bf18      	it	ne
 8001704:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001706:	f7ff ffed 	bl	80016e4 <HAL_GetTick>
 800170a:	1b40      	subs	r0, r0, r5
 800170c:	4284      	cmp	r4, r0
 800170e:	d8fa      	bhi.n	8001706 <HAL_Delay+0x16>
  {
  }
}
 8001710:	bd38      	pop	{r3, r4, r5, pc}
 8001712:	bf00      	nop
 8001714:	20000014 	.word	0x20000014

08001718 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001718:	4a07      	ldr	r2, [pc, #28]	; (8001738 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800171a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001720:	041b      	lsls	r3, r3, #16
 8001722:	0c1b      	lsrs	r3, r3, #16
 8001724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001728:	0200      	lsls	r0, r0, #8
 800172a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800172e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001732:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001734:	60d3      	str	r3, [r2, #12]
 8001736:	4770      	bx	lr
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800173c:	4b17      	ldr	r3, [pc, #92]	; (800179c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173e:	b530      	push	{r4, r5, lr}
 8001740:	68dc      	ldr	r4, [r3, #12]
 8001742:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001746:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800174c:	2b04      	cmp	r3, #4
 800174e:	bf28      	it	cs
 8001750:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001752:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	f04f 0501 	mov.w	r5, #1
 8001758:	fa05 f303 	lsl.w	r3, r5, r3
 800175c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001760:	bf8c      	ite	hi
 8001762:	3c03      	subhi	r4, #3
 8001764:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001766:	4019      	ands	r1, r3
 8001768:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800176a:	fa05 f404 	lsl.w	r4, r5, r4
 800176e:	3c01      	subs	r4, #1
 8001770:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001772:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001774:	ea42 0201 	orr.w	r2, r2, r1
 8001778:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177c:	bfaf      	iteee	ge
 800177e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001782:	f000 000f 	andlt.w	r0, r0, #15
 8001786:	4b06      	ldrlt	r3, [pc, #24]	; (80017a0 <HAL_NVIC_SetPriority+0x64>)
 8001788:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178a:	bfa5      	ittet	ge
 800178c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001790:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001792:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001794:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001798:	bd30      	pop	{r4, r5, pc}
 800179a:	bf00      	nop
 800179c:	e000ed00 	.word	0xe000ed00
 80017a0:	e000ed14 	.word	0xe000ed14

080017a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a4:	3801      	subs	r0, #1
 80017a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80017aa:	d20a      	bcs.n	80017c2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ae:	4a07      	ldr	r2, [pc, #28]	; (80017cc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b2:	21f0      	movs	r1, #240	; 0xf0
 80017b4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ba:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017bc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80017c2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000e010 	.word	0xe000e010
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017d4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001988 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017dc:	4a68      	ldr	r2, [pc, #416]	; (8001980 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017de:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800198c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017e2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017e4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80017e6:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ea:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80017ec:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017f0:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80017f4:	45b6      	cmp	lr, r6
 80017f6:	f040 80ae 	bne.w	8001956 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017fa:	684c      	ldr	r4, [r1, #4]
 80017fc:	f024 0710 	bic.w	r7, r4, #16
 8001800:	2f02      	cmp	r7, #2
 8001802:	d116      	bne.n	8001832 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001804:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001808:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800180c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001810:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001814:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001818:	f04f 0c0f 	mov.w	ip, #15
 800181c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001820:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001824:	690d      	ldr	r5, [r1, #16]
 8001826:	fa05 f50b 	lsl.w	r5, r5, fp
 800182a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800182e:	f8ca 5020 	str.w	r5, [sl, #32]
 8001832:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001836:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001838:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800183c:	fa05 f50a 	lsl.w	r5, r5, sl
 8001840:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001842:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001846:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800184a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800184e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001850:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001854:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001856:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800185a:	d811      	bhi.n	8001880 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800185c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800185e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001862:	68cf      	ldr	r7, [r1, #12]
 8001864:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001868:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800186c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800186e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001870:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001874:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001878:	409f      	lsls	r7, r3
 800187a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800187e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001880:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001882:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001884:	688f      	ldr	r7, [r1, #8]
 8001886:	fa07 f70a 	lsl.w	r7, r7, sl
 800188a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800188c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800188e:	00e5      	lsls	r5, r4, #3
 8001890:	d561      	bpl.n	8001956 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	f04f 0b00 	mov.w	fp, #0
 8001896:	f8cd b00c 	str.w	fp, [sp, #12]
 800189a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800189e:	4d39      	ldr	r5, [pc, #228]	; (8001984 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80018a4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80018a8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80018ac:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80018b0:	9703      	str	r7, [sp, #12]
 80018b2:	9f03      	ldr	r7, [sp, #12]
 80018b4:	f023 0703 	bic.w	r7, r3, #3
 80018b8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80018bc:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018c0:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80018c4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018c8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80018cc:	f04f 0e0f 	mov.w	lr, #15
 80018d0:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018d4:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018d6:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018da:	d043      	beq.n	8001964 <HAL_GPIO_Init+0x194>
 80018dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018e0:	42a8      	cmp	r0, r5
 80018e2:	d041      	beq.n	8001968 <HAL_GPIO_Init+0x198>
 80018e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018e8:	42a8      	cmp	r0, r5
 80018ea:	d03f      	beq.n	800196c <HAL_GPIO_Init+0x19c>
 80018ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018f0:	42a8      	cmp	r0, r5
 80018f2:	d03d      	beq.n	8001970 <HAL_GPIO_Init+0x1a0>
 80018f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018f8:	42a8      	cmp	r0, r5
 80018fa:	d03b      	beq.n	8001974 <HAL_GPIO_Init+0x1a4>
 80018fc:	4548      	cmp	r0, r9
 80018fe:	d03b      	beq.n	8001978 <HAL_GPIO_Init+0x1a8>
 8001900:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001904:	42a8      	cmp	r0, r5
 8001906:	d039      	beq.n	800197c <HAL_GPIO_Init+0x1ac>
 8001908:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800190c:	42a8      	cmp	r0, r5
 800190e:	bf14      	ite	ne
 8001910:	2508      	movne	r5, #8
 8001912:	2507      	moveq	r5, #7
 8001914:	fa05 f50c 	lsl.w	r5, r5, ip
 8001918:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800191c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800191e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001920:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001922:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001926:	bf0c      	ite	eq
 8001928:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800192a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800192c:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800192e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001930:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001934:	bf0c      	ite	eq
 8001936:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001938:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800193a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800193c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800193e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001942:	bf0c      	ite	eq
 8001944:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001946:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001948:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800194a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800194c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800194e:	bf54      	ite	pl
 8001950:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001952:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001954:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001956:	3301      	adds	r3, #1
 8001958:	2b10      	cmp	r3, #16
 800195a:	f47f af44 	bne.w	80017e6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800195e:	b005      	add	sp, #20
 8001960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001964:	465d      	mov	r5, fp
 8001966:	e7d5      	b.n	8001914 <HAL_GPIO_Init+0x144>
 8001968:	2501      	movs	r5, #1
 800196a:	e7d3      	b.n	8001914 <HAL_GPIO_Init+0x144>
 800196c:	2502      	movs	r5, #2
 800196e:	e7d1      	b.n	8001914 <HAL_GPIO_Init+0x144>
 8001970:	2503      	movs	r5, #3
 8001972:	e7cf      	b.n	8001914 <HAL_GPIO_Init+0x144>
 8001974:	2504      	movs	r5, #4
 8001976:	e7cd      	b.n	8001914 <HAL_GPIO_Init+0x144>
 8001978:	2505      	movs	r5, #5
 800197a:	e7cb      	b.n	8001914 <HAL_GPIO_Init+0x144>
 800197c:	2506      	movs	r5, #6
 800197e:	e7c9      	b.n	8001914 <HAL_GPIO_Init+0x144>
 8001980:	40013c00 	.word	0x40013c00
 8001984:	40020000 	.word	0x40020000
 8001988:	40023800 	.word	0x40023800
 800198c:	40021400 	.word	0x40021400

08001990 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001990:	6802      	ldr	r2, [r0, #0]
 8001992:	6953      	ldr	r3, [r2, #20]
 8001994:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001998:	d00d      	beq.n	80019b6 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800199a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800199e:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80019a0:	2304      	movs	r3, #4
 80019a2:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80019a4:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 80019ae:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80019b2:	2001      	movs	r0, #1
 80019b4:	4770      	bx	lr
  }
  return HAL_OK;
 80019b6:	4618      	mov	r0, r3
}
 80019b8:	4770      	bx	lr

080019ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80019ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019be:	4604      	mov	r4, r0
 80019c0:	4617      	mov	r7, r2
 80019c2:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019c4:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80019c8:	b28e      	uxth	r6, r1
 80019ca:	6825      	ldr	r5, [r4, #0]
 80019cc:	f1b8 0f01 	cmp.w	r8, #1
 80019d0:	bf0c      	ite	eq
 80019d2:	696b      	ldreq	r3, [r5, #20]
 80019d4:	69ab      	ldrne	r3, [r5, #24]
 80019d6:	ea36 0303 	bics.w	r3, r6, r3
 80019da:	bf14      	ite	ne
 80019dc:	2001      	movne	r0, #1
 80019de:	2000      	moveq	r0, #0
 80019e0:	b908      	cbnz	r0, 80019e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80019e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019e6:	696b      	ldr	r3, [r5, #20]
 80019e8:	055a      	lsls	r2, r3, #21
 80019ea:	d512      	bpl.n	8001a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80019ec:	682b      	ldr	r3, [r5, #0]
 80019ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f2:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019f4:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80019f8:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80019fa:	2304      	movs	r3, #4
 80019fc:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80019fe:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8001a04:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001a08:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001a12:	1c7b      	adds	r3, r7, #1
 8001a14:	d0d9      	beq.n	80019ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001a16:	b94f      	cbnz	r7, 8001a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a18:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001a1a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a1c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001a1e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001a22:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001a26:	2003      	movs	r0, #3
 8001a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001a2c:	f7ff fe5a 	bl	80016e4 <HAL_GetTick>
 8001a30:	eba0 0009 	sub.w	r0, r0, r9
 8001a34:	4287      	cmp	r7, r0
 8001a36:	d2c8      	bcs.n	80019ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8001a38:	e7ee      	b.n	8001a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001a3a <I2C_WaitOnFlagUntilTimeout>:
{
 8001a3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a3e:	9e08      	ldr	r6, [sp, #32]
 8001a40:	4604      	mov	r4, r0
 8001a42:	4690      	mov	r8, r2
 8001a44:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8001a46:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001a4a:	b28d      	uxth	r5, r1
 8001a4c:	6823      	ldr	r3, [r4, #0]
 8001a4e:	f1b9 0f01 	cmp.w	r9, #1
 8001a52:	bf0c      	ite	eq
 8001a54:	695b      	ldreq	r3, [r3, #20]
 8001a56:	699b      	ldrne	r3, [r3, #24]
 8001a58:	ea35 0303 	bics.w	r3, r5, r3
 8001a5c:	bf0c      	ite	eq
 8001a5e:	2301      	moveq	r3, #1
 8001a60:	2300      	movne	r3, #0
 8001a62:	4543      	cmp	r3, r8
 8001a64:	d002      	beq.n	8001a6c <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001a66:	2000      	movs	r0, #0
}
 8001a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001a6c:	1c7b      	adds	r3, r7, #1
 8001a6e:	d0ed      	beq.n	8001a4c <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001a70:	b95f      	cbnz	r7, 8001a8a <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a72:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001a74:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a76:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001a78:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001a7c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001a80:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a82:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001a8a:	f7ff fe2b 	bl	80016e4 <HAL_GetTick>
 8001a8e:	1b80      	subs	r0, r0, r6
 8001a90:	4287      	cmp	r7, r0
 8001a92:	d2db      	bcs.n	8001a4c <I2C_WaitOnFlagUntilTimeout+0x12>
 8001a94:	e7ed      	b.n	8001a72 <I2C_WaitOnFlagUntilTimeout+0x38>

08001a96 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8001a96:	b570      	push	{r4, r5, r6, lr}
 8001a98:	4604      	mov	r4, r0
 8001a9a:	460d      	mov	r5, r1
 8001a9c:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a9e:	6823      	ldr	r3, [r4, #0]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	061b      	lsls	r3, r3, #24
 8001aa4:	d501      	bpl.n	8001aaa <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f7ff ff70 	bl	8001990 <I2C_IsAcknowledgeFailed>
 8001ab0:	b9a8      	cbnz	r0, 8001ade <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001ab2:	1c6a      	adds	r2, r5, #1
 8001ab4:	d0f3      	beq.n	8001a9e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001ab6:	b965      	cbnz	r5, 8001ad2 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ab8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001aba:	f043 0320 	orr.w	r3, r3, #32
 8001abe:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001ac0:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001ac6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001aca:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001ace:	2003      	movs	r0, #3
 8001ad0:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001ad2:	f7ff fe07 	bl	80016e4 <HAL_GetTick>
 8001ad6:	1b80      	subs	r0, r0, r6
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	d2e0      	bcs.n	8001a9e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001adc:	e7ec      	b.n	8001ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001ade:	2001      	movs	r0, #1
}
 8001ae0:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ae4 <I2C_RequestMemoryWrite>:
{
 8001ae4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001ae8:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001aea:	6802      	ldr	r2, [r0, #0]
{
 8001aec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8001aee:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001af0:	6813      	ldr	r3, [r2, #0]
 8001af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af6:	6013      	str	r3, [r2, #0]
{
 8001af8:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001afa:	9600      	str	r6, [sp, #0]
 8001afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001afe:	2200      	movs	r2, #0
 8001b00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001b04:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b06:	f7ff ff98 	bl	8001a3a <I2C_WaitOnFlagUntilTimeout>
 8001b0a:	b968      	cbnz	r0, 8001b28 <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b0c:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001b10:	491c      	ldr	r1, [pc, #112]	; (8001b84 <I2C_RequestMemoryWrite+0xa0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b12:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8001b16:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b18:	4620      	mov	r0, r4
 8001b1a:	4633      	mov	r3, r6
 8001b1c:	f7ff ff4d 	bl	80019ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b20:	b130      	cbz	r0, 8001b30 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d018      	beq.n	8001b5a <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 8001b28:	2003      	movs	r0, #3
}
 8001b2a:	b004      	add	sp, #16
 8001b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b30:	6823      	ldr	r3, [r4, #0]
 8001b32:	9003      	str	r0, [sp, #12]
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	9203      	str	r2, [sp, #12]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b3c:	4632      	mov	r2, r6
 8001b3e:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b40:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b42:	4620      	mov	r0, r4
 8001b44:	f7ff ffa7 	bl	8001a96 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b48:	b148      	cbz	r0, 8001b5e <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d1eb      	bne.n	8001b28 <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b50:	6822      	ldr	r2, [r4, #0]
 8001b52:	6813      	ldr	r3, [r2, #0]
 8001b54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b58:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	e7e5      	b.n	8001b2a <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b5e:	f1b8 0f01 	cmp.w	r8, #1
 8001b62:	6823      	ldr	r3, [r4, #0]
 8001b64:	d102      	bne.n	8001b6c <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b66:	b2ed      	uxtb	r5, r5
 8001b68:	611d      	str	r5, [r3, #16]
 8001b6a:	e7de      	b.n	8001b2a <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b6c:	0a2a      	lsrs	r2, r5, #8
 8001b6e:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b70:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001b72:	4632      	mov	r2, r6
 8001b74:	4620      	mov	r0, r4
 8001b76:	f7ff ff8e 	bl	8001a96 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b7a:	2800      	cmp	r0, #0
 8001b7c:	d1e5      	bne.n	8001b4a <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b7e:	6823      	ldr	r3, [r4, #0]
 8001b80:	e7f1      	b.n	8001b66 <I2C_RequestMemoryWrite+0x82>
 8001b82:	bf00      	nop
 8001b84:	00010002 	.word	0x00010002

08001b88 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001b88:	b570      	push	{r4, r5, r6, lr}
 8001b8a:	4604      	mov	r4, r0
 8001b8c:	460d      	mov	r5, r1
 8001b8e:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	075b      	lsls	r3, r3, #29
 8001b96:	d501      	bpl.n	8001b9c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001b98:	2000      	movs	r0, #0
 8001b9a:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	f7ff fef7 	bl	8001990 <I2C_IsAcknowledgeFailed>
 8001ba2:	b9a8      	cbnz	r0, 8001bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001ba4:	1c6a      	adds	r2, r5, #1
 8001ba6:	d0f3      	beq.n	8001b90 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001ba8:	b965      	cbnz	r5, 8001bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001baa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bac:	f043 0320 	orr.w	r3, r3, #32
 8001bb0:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001bb2:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001bb8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001bbc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001bc0:	2003      	movs	r0, #3
 8001bc2:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001bc4:	f7ff fd8e 	bl	80016e4 <HAL_GetTick>
 8001bc8:	1b80      	subs	r0, r0, r6
 8001bca:	4285      	cmp	r5, r0
 8001bcc:	d2e0      	bcs.n	8001b90 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001bce:	e7ec      	b.n	8001baa <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001bd0:	2001      	movs	r0, #1
}
 8001bd2:	bd70      	pop	{r4, r5, r6, pc}

08001bd4 <HAL_I2C_Init>:
{
 8001bd4:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 8001bd6:	4604      	mov	r4, r0
 8001bd8:	2800      	cmp	r0, #0
 8001bda:	d062      	beq.n	8001ca2 <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001bdc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001be0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001be4:	b91b      	cbnz	r3, 8001bee <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001be6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001bea:	f7ff fb8d 	bl	8001308 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8001bee:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001bf0:	4e2d      	ldr	r6, [pc, #180]	; (8001ca8 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001bf2:	4d2e      	ldr	r5, [pc, #184]	; (8001cac <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf4:	2324      	movs	r3, #36	; 0x24
 8001bf6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001bfa:	6813      	ldr	r3, [r2, #0]
 8001bfc:	f023 0301 	bic.w	r3, r3, #1
 8001c00:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c02:	f000 fc0b 	bl	800241c <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c06:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8001c08:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001c0a:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c0e:	42b3      	cmp	r3, r6
 8001c10:	bf84      	itt	hi
 8001c12:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8001c16:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8001c18:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c1a:	bf91      	iteee	ls
 8001c1c:	1c69      	addls	r1, r5, #1
 8001c1e:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8001c22:	fbb1 f1f5 	udivhi	r1, r1, r5
 8001c26:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001c28:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c2a:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001c2c:	d821      	bhi.n	8001c72 <HAL_I2C_Init+0x9e>
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c34:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	bf98      	it	ls
 8001c3c:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c3e:	6a21      	ldr	r1, [r4, #32]
 8001c40:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001c42:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c44:	430b      	orrs	r3, r1
 8001c46:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001c48:	68e1      	ldr	r1, [r4, #12]
 8001c4a:	6923      	ldr	r3, [r4, #16]
 8001c4c:	430b      	orrs	r3, r1
 8001c4e:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001c50:	69a1      	ldr	r1, [r4, #24]
 8001c52:	6963      	ldr	r3, [r4, #20]
 8001c54:	430b      	orrs	r3, r1
 8001c56:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001c58:	6813      	ldr	r3, [r2, #0]
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c60:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001c62:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c64:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c6a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c6c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001c70:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001c72:	68a1      	ldr	r1, [r4, #8]
 8001c74:	b949      	cbnz	r1, 8001c8a <HAL_I2C_Init+0xb6>
 8001c76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001c7a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c7e:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001c82:	b163      	cbz	r3, 8001c9e <HAL_I2C_Init+0xca>
 8001c84:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001c88:	e7d9      	b.n	8001c3e <HAL_I2C_Init+0x6a>
 8001c8a:	2119      	movs	r1, #25
 8001c8c:	434b      	muls	r3, r1
 8001c8e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c92:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001c96:	b113      	cbz	r3, 8001c9e <HAL_I2C_Init+0xca>
 8001c98:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001c9c:	e7cf      	b.n	8001c3e <HAL_I2C_Init+0x6a>
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	e7cd      	b.n	8001c3e <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8001ca2:	2001      	movs	r0, #1
}
 8001ca4:	bd70      	pop	{r4, r5, r6, pc}
 8001ca6:	bf00      	nop
 8001ca8:	000186a0 	.word	0x000186a0
 8001cac:	000f4240 	.word	0x000f4240

08001cb0 <HAL_I2C_Master_Transmit>:
{
 8001cb0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001cb4:	4604      	mov	r4, r0
 8001cb6:	461f      	mov	r7, r3
 8001cb8:	460d      	mov	r5, r1
 8001cba:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8001cbc:	f7ff fd12 	bl	80016e4 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001cc0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001cc4:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001cc6:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001cc8:	d004      	beq.n	8001cd4 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001cca:	2502      	movs	r5, #2
}
 8001ccc:	4628      	mov	r0, r5
 8001cce:	b004      	add	sp, #16
 8001cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cd4:	9000      	str	r0, [sp, #0]
 8001cd6:	2319      	movs	r3, #25
 8001cd8:	2201      	movs	r2, #1
 8001cda:	495d      	ldr	r1, [pc, #372]	; (8001e50 <HAL_I2C_Master_Transmit+0x1a0>)
 8001cdc:	4620      	mov	r0, r4
 8001cde:	f7ff feac 	bl	8001a3a <I2C_WaitOnFlagUntilTimeout>
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	d1f1      	bne.n	8001cca <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001ce6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d0ed      	beq.n	8001cca <HAL_I2C_Master_Transmit+0x1a>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cf4:	6823      	ldr	r3, [r4, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001cfa:	bf5e      	ittt	pl
 8001cfc:	681a      	ldrpl	r2, [r3, #0]
 8001cfe:	f042 0201 	orrpl.w	r2, r2, #1
 8001d02:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d0a:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d0c:	2221      	movs	r2, #33	; 0x21
 8001d0e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d12:	2210      	movs	r2, #16
 8001d14:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d18:	2200      	movs	r2, #0
 8001d1a:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d1c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001d20:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d22:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001d24:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001d26:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8001d2a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d2e:	2a04      	cmp	r2, #4
 8001d30:	d004      	beq.n	8001d3c <HAL_I2C_Master_Transmit+0x8c>
 8001d32:	2a01      	cmp	r2, #1
 8001d34:	d002      	beq.n	8001d3c <HAL_I2C_Master_Transmit+0x8c>
 8001d36:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001d3a:	d104      	bne.n	8001d46 <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	e002      	b.n	8001d4c <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d46:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d48:	2a12      	cmp	r2, #18
 8001d4a:	d0f7      	beq.n	8001d3c <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d4c:	9600      	str	r6, [sp, #0]
 8001d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d50:	2200      	movs	r2, #0
 8001d52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d56:	4620      	mov	r0, r4
 8001d58:	f7ff fe6f 	bl	8001a3a <I2C_WaitOnFlagUntilTimeout>
 8001d5c:	bb28      	cbnz	r0, 8001daa <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d5e:	6923      	ldr	r3, [r4, #16]
 8001d60:	6822      	ldr	r2, [r4, #0]
 8001d62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d66:	d112      	bne.n	8001d8e <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d68:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001d6c:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d6e:	4633      	mov	r3, r6
 8001d70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001d72:	4938      	ldr	r1, [pc, #224]	; (8001e54 <HAL_I2C_Master_Transmit+0x1a4>)
 8001d74:	4620      	mov	r0, r4
 8001d76:	f7ff fe20 	bl	80019ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d7a:	4605      	mov	r5, r0
 8001d7c:	b9a0      	cbnz	r0, 8001da8 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	9003      	str	r0, [sp, #12]
 8001d82:	695a      	ldr	r2, [r3, #20]
 8001d84:	9203      	str	r2, [sp, #12]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	9303      	str	r3, [sp, #12]
 8001d8a:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8001d8c:	e050      	b.n	8001e30 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d8e:	11eb      	asrs	r3, r5, #7
 8001d90:	f003 0306 	and.w	r3, r3, #6
 8001d94:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001d98:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d9a:	492f      	ldr	r1, [pc, #188]	; (8001e58 <HAL_I2C_Master_Transmit+0x1a8>)
 8001d9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001d9e:	4633      	mov	r3, r6
 8001da0:	4620      	mov	r0, r4
 8001da2:	f7ff fe0a 	bl	80019ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001da6:	b148      	cbz	r0, 8001dbc <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001da8:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001daa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	d107      	bne.n	8001dc4 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8001db4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001db8:	2501      	movs	r5, #1
 8001dba:	e787      	b.n	8001ccc <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001dbc:	6823      	ldr	r3, [r4, #0]
 8001dbe:	b2ed      	uxtb	r5, r5
 8001dc0:	611d      	str	r5, [r3, #16]
 8001dc2:	e7d4      	b.n	8001d6e <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8001dc4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8001dc8:	2503      	movs	r5, #3
 8001dca:	e77f      	b.n	8001ccc <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dcc:	4632      	mov	r2, r6
 8001dce:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	f7ff fe60 	bl	8001a96 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dd6:	b140      	cbz	r0, 8001dea <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d1f4      	bne.n	8001dc8 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001dde:	6822      	ldr	r2, [r4, #0]
 8001de0:	6813      	ldr	r3, [r2, #0]
 8001de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	e7e6      	b.n	8001db8 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001dea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001dec:	6820      	ldr	r0, [r4, #0]
      hi2c->XferSize--;
 8001dee:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001df0:	1c4b      	adds	r3, r1, #1
 8001df2:	6263      	str	r3, [r4, #36]	; 0x24
 8001df4:	780b      	ldrb	r3, [r1, #0]
 8001df6:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8001df8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e00:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8001e02:	1e53      	subs	r3, r2, #1
 8001e04:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e06:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8001e08:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e0a:	d50a      	bpl.n	8001e22 <HAL_I2C_Master_Transmit+0x172>
 8001e0c:	b14b      	cbz	r3, 8001e22 <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001e0e:	1c8b      	adds	r3, r1, #2
 8001e10:	6263      	str	r3, [r4, #36]	; 0x24
 8001e12:	784b      	ldrb	r3, [r1, #1]
 8001e14:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8001e16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001e1c:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8001e1e:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001e20:	8522      	strh	r2, [r4, #40]	; 0x28
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e22:	4632      	mov	r2, r6
 8001e24:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001e26:	4620      	mov	r0, r4
 8001e28:	f7ff feae 	bl	8001b88 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e2c:	2800      	cmp	r0, #0
 8001e2e:	d1d3      	bne.n	8001dd8 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8001e30:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1ca      	bne.n	8001dcc <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e36:	6821      	ldr	r1, [r4, #0]
 8001e38:	680a      	ldr	r2, [r1, #0]
 8001e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e3e:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e40:	2220      	movs	r2, #32
 8001e42:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001e46:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e4a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001e4e:	e73d      	b.n	8001ccc <HAL_I2C_Master_Transmit+0x1c>
 8001e50:	00100002 	.word	0x00100002
 8001e54:	00010002 	.word	0x00010002
 8001e58:	00010008 	.word	0x00010008

08001e5c <HAL_I2C_Mem_Write>:
{
 8001e5c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e60:	4604      	mov	r4, r0
 8001e62:	469a      	mov	sl, r3
 8001e64:	4688      	mov	r8, r1
 8001e66:	4691      	mov	r9, r2
 8001e68:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8001e6a:	f7ff fc3b 	bl	80016e4 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001e6e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001e72:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001e74:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001e76:	d003      	beq.n	8001e80 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001e78:	2002      	movs	r0, #2
}
 8001e7a:	b002      	add	sp, #8
 8001e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e80:	9000      	str	r0, [sp, #0]
 8001e82:	2319      	movs	r3, #25
 8001e84:	2201      	movs	r2, #1
 8001e86:	493e      	ldr	r1, [pc, #248]	; (8001f80 <HAL_I2C_Mem_Write+0x124>)
 8001e88:	4620      	mov	r0, r4
 8001e8a:	f7ff fdd6 	bl	8001a3a <I2C_WaitOnFlagUntilTimeout>
 8001e8e:	2800      	cmp	r0, #0
 8001e90:	d1f2      	bne.n	8001e78 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001e92:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d0ee      	beq.n	8001e78 <HAL_I2C_Mem_Write+0x1c>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ea0:	6823      	ldr	r3, [r4, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001ea6:	bf5e      	ittt	pl
 8001ea8:	681a      	ldrpl	r2, [r3, #0]
 8001eaa:	f042 0201 	orrpl.w	r2, r2, #1
 8001eae:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eb6:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001eb8:	2321      	movs	r3, #33	; 0x21
 8001eba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ebe:	2340      	movs	r3, #64	; 0x40
 8001ec0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001ec6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec8:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 8001eca:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ece:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001ed0:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ed2:	4b2c      	ldr	r3, [pc, #176]	; (8001f84 <HAL_I2C_Mem_Write+0x128>)
 8001ed4:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001ed6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ed8:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001eda:	9501      	str	r5, [sp, #4]
 8001edc:	9600      	str	r6, [sp, #0]
 8001ede:	4653      	mov	r3, sl
 8001ee0:	464a      	mov	r2, r9
 8001ee2:	4641      	mov	r1, r8
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f7ff fdfd 	bl	8001ae4 <I2C_RequestMemoryWrite>
 8001eea:	2800      	cmp	r0, #0
 8001eec:	d02a      	beq.n	8001f44 <HAL_I2C_Mem_Write+0xe8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eee:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001ef0:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d107      	bne.n	8001f08 <HAL_I2C_Mem_Write+0xac>
        return HAL_ERROR;
 8001ef8:	2001      	movs	r0, #1
 8001efa:	e7be      	b.n	8001e7a <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001efc:	f7ff fdcb 	bl	8001a96 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f00:	b120      	cbz	r0, 8001f0c <HAL_I2C_Mem_Write+0xb0>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d034      	beq.n	8001f72 <HAL_I2C_Mem_Write+0x116>
          return HAL_TIMEOUT;
 8001f08:	2003      	movs	r0, #3
 8001f0a:	e7b6      	b.n	8001e7a <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001f0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001f0e:	6827      	ldr	r7, [r4, #0]
      hi2c->XferSize--;
 8001f10:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001f12:	1c4b      	adds	r3, r1, #1
 8001f14:	6263      	str	r3, [r4, #36]	; 0x24
 8001f16:	780b      	ldrb	r3, [r1, #0]
 8001f18:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8001f1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f22:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 8001f24:	1e50      	subs	r0, r2, #1
 8001f26:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f28:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8001f2a:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f2c:	d50a      	bpl.n	8001f44 <HAL_I2C_Mem_Write+0xe8>
 8001f2e:	b148      	cbz	r0, 8001f44 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001f30:	1c8b      	adds	r3, r1, #2
 8001f32:	6263      	str	r3, [r4, #36]	; 0x24
 8001f34:	784b      	ldrb	r3, [r1, #1]
 8001f36:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8001f38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f3a:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8001f3c:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8001f3e:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001f40:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001f42:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001f44:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f46:	462a      	mov	r2, r5
 8001f48:	4631      	mov	r1, r6
 8001f4a:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1d5      	bne.n	8001efc <HAL_I2C_Mem_Write+0xa0>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f50:	f7ff fe1a 	bl	8001b88 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f54:	2800      	cmp	r0, #0
 8001f56:	d1d4      	bne.n	8001f02 <HAL_I2C_Mem_Write+0xa6>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001f58:	6822      	ldr	r2, [r4, #0]
 8001f5a:	6813      	ldr	r3, [r2, #0]
 8001f5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f60:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f62:	2320      	movs	r3, #32
 8001f64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001f68:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001f70:	e783      	b.n	8001e7a <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001f72:	6822      	ldr	r2, [r4, #0]
 8001f74:	6813      	ldr	r3, [r2, #0]
 8001f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f7a:	6013      	str	r3, [r2, #0]
 8001f7c:	e7bc      	b.n	8001ef8 <HAL_I2C_Mem_Write+0x9c>
 8001f7e:	bf00      	nop
 8001f80:	00100002 	.word	0x00100002
 8001f84:	ffff0000 	.word	0xffff0000

08001f88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f8c:	4604      	mov	r4, r0
 8001f8e:	b918      	cbnz	r0, 8001f98 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001f90:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001f92:	b002      	add	sp, #8
 8001f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f98:	6803      	ldr	r3, [r0, #0]
 8001f9a:	07dd      	lsls	r5, r3, #31
 8001f9c:	d410      	bmi.n	8001fc0 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9e:	6823      	ldr	r3, [r4, #0]
 8001fa0:	0798      	lsls	r0, r3, #30
 8001fa2:	d458      	bmi.n	8002056 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa4:	6823      	ldr	r3, [r4, #0]
 8001fa6:	071a      	lsls	r2, r3, #28
 8001fa8:	f100 809a 	bmi.w	80020e0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	075b      	lsls	r3, r3, #29
 8001fb0:	f100 80b8 	bmi.w	8002124 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fb4:	69a2      	ldr	r2, [r4, #24]
 8001fb6:	2a00      	cmp	r2, #0
 8001fb8:	f040 8119 	bne.w	80021ee <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	e7e8      	b.n	8001f92 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fc0:	4ba6      	ldr	r3, [pc, #664]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	f002 020c 	and.w	r2, r2, #12
 8001fc8:	2a04      	cmp	r2, #4
 8001fca:	d007      	beq.n	8001fdc <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fd2:	2a08      	cmp	r2, #8
 8001fd4:	d10a      	bne.n	8001fec <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	0259      	lsls	r1, r3, #9
 8001fda:	d507      	bpl.n	8001fec <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fdc:	4b9f      	ldr	r3, [pc, #636]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	039a      	lsls	r2, r3, #14
 8001fe2:	d5dc      	bpl.n	8001f9e <HAL_RCC_OscConfig+0x16>
 8001fe4:	6863      	ldr	r3, [r4, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1d9      	bne.n	8001f9e <HAL_RCC_OscConfig+0x16>
 8001fea:	e7d1      	b.n	8001f90 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fec:	6863      	ldr	r3, [r4, #4]
 8001fee:	4d9b      	ldr	r5, [pc, #620]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
 8001ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff4:	d111      	bne.n	800201a <HAL_RCC_OscConfig+0x92>
 8001ff6:	682b      	ldr	r3, [r5, #0]
 8001ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ffe:	f7ff fb71 	bl	80016e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	4d96      	ldr	r5, [pc, #600]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002004:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002006:	682b      	ldr	r3, [r5, #0]
 8002008:	039b      	lsls	r3, r3, #14
 800200a:	d4c8      	bmi.n	8001f9e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800200c:	f7ff fb6a 	bl	80016e4 <HAL_GetTick>
 8002010:	1b80      	subs	r0, r0, r6
 8002012:	2864      	cmp	r0, #100	; 0x64
 8002014:	d9f7      	bls.n	8002006 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8002016:	2003      	movs	r0, #3
 8002018:	e7bb      	b.n	8001f92 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800201a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800201e:	d104      	bne.n	800202a <HAL_RCC_OscConfig+0xa2>
 8002020:	682b      	ldr	r3, [r5, #0]
 8002022:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002026:	602b      	str	r3, [r5, #0]
 8002028:	e7e5      	b.n	8001ff6 <HAL_RCC_OscConfig+0x6e>
 800202a:	682a      	ldr	r2, [r5, #0]
 800202c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002030:	602a      	str	r2, [r5, #0]
 8002032:	682a      	ldr	r2, [r5, #0]
 8002034:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002038:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1df      	bne.n	8001ffe <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800203e:	f7ff fb51 	bl	80016e4 <HAL_GetTick>
 8002042:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002044:	682b      	ldr	r3, [r5, #0]
 8002046:	039f      	lsls	r7, r3, #14
 8002048:	d5a9      	bpl.n	8001f9e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800204a:	f7ff fb4b 	bl	80016e4 <HAL_GetTick>
 800204e:	1b80      	subs	r0, r0, r6
 8002050:	2864      	cmp	r0, #100	; 0x64
 8002052:	d9f7      	bls.n	8002044 <HAL_RCC_OscConfig+0xbc>
 8002054:	e7df      	b.n	8002016 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002056:	4b81      	ldr	r3, [pc, #516]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	f012 0f0c 	tst.w	r2, #12
 800205e:	d007      	beq.n	8002070 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002066:	2a08      	cmp	r2, #8
 8002068:	d111      	bne.n	800208e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	025e      	lsls	r6, r3, #9
 800206e:	d40e      	bmi.n	800208e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002070:	4b7a      	ldr	r3, [pc, #488]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	0795      	lsls	r5, r2, #30
 8002076:	d502      	bpl.n	800207e <HAL_RCC_OscConfig+0xf6>
 8002078:	68e2      	ldr	r2, [r4, #12]
 800207a:	2a01      	cmp	r2, #1
 800207c:	d188      	bne.n	8001f90 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	6921      	ldr	r1, [r4, #16]
 8002082:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002086:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800208a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208c:	e78a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800208e:	68e2      	ldr	r2, [r4, #12]
 8002090:	4b73      	ldr	r3, [pc, #460]	; (8002260 <HAL_RCC_OscConfig+0x2d8>)
 8002092:	b1b2      	cbz	r2, 80020c2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002094:	2201      	movs	r2, #1
 8002096:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002098:	f7ff fb24 	bl	80016e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209c:	4d6f      	ldr	r5, [pc, #444]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800209e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a0:	682b      	ldr	r3, [r5, #0]
 80020a2:	0798      	lsls	r0, r3, #30
 80020a4:	d507      	bpl.n	80020b6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a6:	682b      	ldr	r3, [r5, #0]
 80020a8:	6922      	ldr	r2, [r4, #16]
 80020aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80020ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80020b2:	602b      	str	r3, [r5, #0]
 80020b4:	e776      	b.n	8001fa4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b6:	f7ff fb15 	bl	80016e4 <HAL_GetTick>
 80020ba:	1b80      	subs	r0, r0, r6
 80020bc:	2802      	cmp	r0, #2
 80020be:	d9ef      	bls.n	80020a0 <HAL_RCC_OscConfig+0x118>
 80020c0:	e7a9      	b.n	8002016 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80020c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020c4:	f7ff fb0e 	bl	80016e4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c8:	4d64      	ldr	r5, [pc, #400]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80020ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020cc:	682b      	ldr	r3, [r5, #0]
 80020ce:	0799      	lsls	r1, r3, #30
 80020d0:	f57f af68 	bpl.w	8001fa4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d4:	f7ff fb06 	bl	80016e4 <HAL_GetTick>
 80020d8:	1b80      	subs	r0, r0, r6
 80020da:	2802      	cmp	r0, #2
 80020dc:	d9f6      	bls.n	80020cc <HAL_RCC_OscConfig+0x144>
 80020de:	e79a      	b.n	8002016 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020e0:	6962      	ldr	r2, [r4, #20]
 80020e2:	4b60      	ldr	r3, [pc, #384]	; (8002264 <HAL_RCC_OscConfig+0x2dc>)
 80020e4:	b17a      	cbz	r2, 8002106 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80020e6:	2201      	movs	r2, #1
 80020e8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80020ea:	f7ff fafb 	bl	80016e4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ee:	4d5b      	ldr	r5, [pc, #364]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80020f0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80020f4:	079f      	lsls	r7, r3, #30
 80020f6:	f53f af59 	bmi.w	8001fac <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020fa:	f7ff faf3 	bl	80016e4 <HAL_GetTick>
 80020fe:	1b80      	subs	r0, r0, r6
 8002100:	2802      	cmp	r0, #2
 8002102:	d9f6      	bls.n	80020f2 <HAL_RCC_OscConfig+0x16a>
 8002104:	e787      	b.n	8002016 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8002106:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002108:	f7ff faec 	bl	80016e4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210c:	4d53      	ldr	r5, [pc, #332]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800210e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002110:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002112:	0798      	lsls	r0, r3, #30
 8002114:	f57f af4a 	bpl.w	8001fac <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002118:	f7ff fae4 	bl	80016e4 <HAL_GetTick>
 800211c:	1b80      	subs	r0, r0, r6
 800211e:	2802      	cmp	r0, #2
 8002120:	d9f6      	bls.n	8002110 <HAL_RCC_OscConfig+0x188>
 8002122:	e778      	b.n	8002016 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002124:	4b4d      	ldr	r3, [pc, #308]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
 8002126:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002128:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800212c:	d128      	bne.n	8002180 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800212e:	9201      	str	r2, [sp, #4]
 8002130:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002132:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002136:	641a      	str	r2, [r3, #64]	; 0x40
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	9301      	str	r3, [sp, #4]
 8002140:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002142:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002144:	4d48      	ldr	r5, [pc, #288]	; (8002268 <HAL_RCC_OscConfig+0x2e0>)
 8002146:	682b      	ldr	r3, [r5, #0]
 8002148:	05d9      	lsls	r1, r3, #23
 800214a:	d51b      	bpl.n	8002184 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214c:	68a3      	ldr	r3, [r4, #8]
 800214e:	4d43      	ldr	r5, [pc, #268]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
 8002150:	2b01      	cmp	r3, #1
 8002152:	d127      	bne.n	80021a4 <HAL_RCC_OscConfig+0x21c>
 8002154:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800215c:	f7ff fac2 	bl	80016e4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002160:	4d3e      	ldr	r5, [pc, #248]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002162:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002164:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002168:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800216a:	079b      	lsls	r3, r3, #30
 800216c:	d539      	bpl.n	80021e2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800216e:	2e00      	cmp	r6, #0
 8002170:	f43f af20 	beq.w	8001fb4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002174:	4a39      	ldr	r2, [pc, #228]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
 8002176:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800217c:	6413      	str	r3, [r2, #64]	; 0x40
 800217e:	e719      	b.n	8001fb4 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002180:	2600      	movs	r6, #0
 8002182:	e7df      	b.n	8002144 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002184:	682b      	ldr	r3, [r5, #0]
 8002186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800218c:	f7ff faaa 	bl	80016e4 <HAL_GetTick>
 8002190:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002192:	682b      	ldr	r3, [r5, #0]
 8002194:	05da      	lsls	r2, r3, #23
 8002196:	d4d9      	bmi.n	800214c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002198:	f7ff faa4 	bl	80016e4 <HAL_GetTick>
 800219c:	1bc0      	subs	r0, r0, r7
 800219e:	2802      	cmp	r0, #2
 80021a0:	d9f7      	bls.n	8002192 <HAL_RCC_OscConfig+0x20a>
 80021a2:	e738      	b.n	8002016 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a4:	2b05      	cmp	r3, #5
 80021a6:	d104      	bne.n	80021b2 <HAL_RCC_OscConfig+0x22a>
 80021a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	672b      	str	r3, [r5, #112]	; 0x70
 80021b0:	e7d0      	b.n	8002154 <HAL_RCC_OscConfig+0x1cc>
 80021b2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80021b4:	f022 0201 	bic.w	r2, r2, #1
 80021b8:	672a      	str	r2, [r5, #112]	; 0x70
 80021ba:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80021bc:	f022 0204 	bic.w	r2, r2, #4
 80021c0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1ca      	bne.n	800215c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80021c6:	f7ff fa8d 	bl	80016e4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80021ce:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80021d2:	0798      	lsls	r0, r3, #30
 80021d4:	d5cb      	bpl.n	800216e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7ff fa85 	bl	80016e4 <HAL_GetTick>
 80021da:	1bc0      	subs	r0, r0, r7
 80021dc:	4540      	cmp	r0, r8
 80021de:	d9f7      	bls.n	80021d0 <HAL_RCC_OscConfig+0x248>
 80021e0:	e719      	b.n	8002016 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7ff fa7f 	bl	80016e4 <HAL_GetTick>
 80021e6:	1bc0      	subs	r0, r0, r7
 80021e8:	4540      	cmp	r0, r8
 80021ea:	d9bd      	bls.n	8002168 <HAL_RCC_OscConfig+0x1e0>
 80021ec:	e713      	b.n	8002016 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ee:	4d1b      	ldr	r5, [pc, #108]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
 80021f0:	68ab      	ldr	r3, [r5, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	f43f aeca 	beq.w	8001f90 <HAL_RCC_OscConfig+0x8>
 80021fc:	4e1b      	ldr	r6, [pc, #108]	; (800226c <HAL_RCC_OscConfig+0x2e4>)
 80021fe:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002200:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002202:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002204:	d134      	bne.n	8002270 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8002206:	f7ff fa6d 	bl	80016e4 <HAL_GetTick>
 800220a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220c:	682b      	ldr	r3, [r5, #0]
 800220e:	0199      	lsls	r1, r3, #6
 8002210:	d41e      	bmi.n	8002250 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002212:	6a22      	ldr	r2, [r4, #32]
 8002214:	69e3      	ldr	r3, [r4, #28]
 8002216:	4313      	orrs	r3, r2
 8002218:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800221a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800221e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002220:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002224:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002226:	4c0d      	ldr	r4, [pc, #52]	; (800225c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002228:	0852      	lsrs	r2, r2, #1
 800222a:	3a01      	subs	r2, #1
 800222c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002230:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002232:	2301      	movs	r3, #1
 8002234:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002236:	f7ff fa55 	bl	80016e4 <HAL_GetTick>
 800223a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223c:	6823      	ldr	r3, [r4, #0]
 800223e:	019a      	lsls	r2, r3, #6
 8002240:	f53f aebc 	bmi.w	8001fbc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002244:	f7ff fa4e 	bl	80016e4 <HAL_GetTick>
 8002248:	1b40      	subs	r0, r0, r5
 800224a:	2802      	cmp	r0, #2
 800224c:	d9f6      	bls.n	800223c <HAL_RCC_OscConfig+0x2b4>
 800224e:	e6e2      	b.n	8002016 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002250:	f7ff fa48 	bl	80016e4 <HAL_GetTick>
 8002254:	1bc0      	subs	r0, r0, r7
 8002256:	2802      	cmp	r0, #2
 8002258:	d9d8      	bls.n	800220c <HAL_RCC_OscConfig+0x284>
 800225a:	e6dc      	b.n	8002016 <HAL_RCC_OscConfig+0x8e>
 800225c:	40023800 	.word	0x40023800
 8002260:	42470000 	.word	0x42470000
 8002264:	42470e80 	.word	0x42470e80
 8002268:	40007000 	.word	0x40007000
 800226c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002270:	f7ff fa38 	bl	80016e4 <HAL_GetTick>
 8002274:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002276:	682b      	ldr	r3, [r5, #0]
 8002278:	019b      	lsls	r3, r3, #6
 800227a:	f57f ae9f 	bpl.w	8001fbc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800227e:	f7ff fa31 	bl	80016e4 <HAL_GetTick>
 8002282:	1b00      	subs	r0, r0, r4
 8002284:	2802      	cmp	r0, #2
 8002286:	d9f6      	bls.n	8002276 <HAL_RCC_OscConfig+0x2ee>
 8002288:	e6c5      	b.n	8002016 <HAL_RCC_OscConfig+0x8e>
 800228a:	bf00      	nop

0800228c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800228c:	4913      	ldr	r1, [pc, #76]	; (80022dc <HAL_RCC_GetSysClockFreq+0x50>)
{
 800228e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002290:	688b      	ldr	r3, [r1, #8]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b04      	cmp	r3, #4
 8002298:	d003      	beq.n	80022a2 <HAL_RCC_GetSysClockFreq+0x16>
 800229a:	2b08      	cmp	r3, #8
 800229c:	d003      	beq.n	80022a6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800229e:	4810      	ldr	r0, [pc, #64]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80022a0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80022a2:	4810      	ldr	r0, [pc, #64]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x58>)
 80022a4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022a6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022a8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022aa:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022ac:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b0:	bf14      	ite	ne
 80022b2:	480c      	ldrne	r0, [pc, #48]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b4:	480a      	ldreq	r0, [pc, #40]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80022ba:	bf18      	it	ne
 80022bc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022be:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022c2:	fba1 0100 	umull	r0, r1, r1, r0
 80022c6:	f7fe fcbb 	bl	8000c40 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022ca:	4b04      	ldr	r3, [pc, #16]	; (80022dc <HAL_RCC_GetSysClockFreq+0x50>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80022d2:	3301      	adds	r3, #1
 80022d4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80022d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80022da:	bd08      	pop	{r3, pc}
 80022dc:	40023800 	.word	0x40023800
 80022e0:	00f42400 	.word	0x00f42400
 80022e4:	007a1200 	.word	0x007a1200

080022e8 <HAL_RCC_ClockConfig>:
{
 80022e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022ec:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80022ee:	4604      	mov	r4, r0
 80022f0:	b910      	cbnz	r0, 80022f8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80022f2:	2001      	movs	r0, #1
 80022f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022f8:	4b44      	ldr	r3, [pc, #272]	; (800240c <HAL_RCC_ClockConfig+0x124>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	f002 020f 	and.w	r2, r2, #15
 8002300:	428a      	cmp	r2, r1
 8002302:	d328      	bcc.n	8002356 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002304:	6821      	ldr	r1, [r4, #0]
 8002306:	078f      	lsls	r7, r1, #30
 8002308:	d42d      	bmi.n	8002366 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230a:	07c8      	lsls	r0, r1, #31
 800230c:	d440      	bmi.n	8002390 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800230e:	4b3f      	ldr	r3, [pc, #252]	; (800240c <HAL_RCC_ClockConfig+0x124>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	f002 020f 	and.w	r2, r2, #15
 8002316:	4295      	cmp	r5, r2
 8002318:	d366      	bcc.n	80023e8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231a:	6822      	ldr	r2, [r4, #0]
 800231c:	0751      	lsls	r1, r2, #29
 800231e:	d46c      	bmi.n	80023fa <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002320:	0713      	lsls	r3, r2, #28
 8002322:	d507      	bpl.n	8002334 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002324:	4a3a      	ldr	r2, [pc, #232]	; (8002410 <HAL_RCC_ClockConfig+0x128>)
 8002326:	6921      	ldr	r1, [r4, #16]
 8002328:	6893      	ldr	r3, [r2, #8]
 800232a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800232e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002332:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002334:	f7ff ffaa 	bl	800228c <HAL_RCC_GetSysClockFreq>
 8002338:	4b35      	ldr	r3, [pc, #212]	; (8002410 <HAL_RCC_ClockConfig+0x128>)
 800233a:	4a36      	ldr	r2, [pc, #216]	; (8002414 <HAL_RCC_ClockConfig+0x12c>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002342:	5cd3      	ldrb	r3, [r2, r3]
 8002344:	40d8      	lsrs	r0, r3
 8002346:	4b34      	ldr	r3, [pc, #208]	; (8002418 <HAL_RCC_ClockConfig+0x130>)
 8002348:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800234a:	2000      	movs	r0, #0
 800234c:	f7ff f980 	bl	8001650 <HAL_InitTick>
  return HAL_OK;
 8002350:	2000      	movs	r0, #0
 8002352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	b2ca      	uxtb	r2, r1
 8002358:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 030f 	and.w	r3, r3, #15
 8002360:	4299      	cmp	r1, r3
 8002362:	d1c6      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xa>
 8002364:	e7ce      	b.n	8002304 <HAL_RCC_ClockConfig+0x1c>
 8002366:	4b2a      	ldr	r3, [pc, #168]	; (8002410 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002368:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800236c:	bf1e      	ittt	ne
 800236e:	689a      	ldrne	r2, [r3, #8]
 8002370:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002374:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002376:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002378:	bf42      	ittt	mi
 800237a:	689a      	ldrmi	r2, [r3, #8]
 800237c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002380:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	68a0      	ldr	r0, [r4, #8]
 8002386:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800238a:	4302      	orrs	r2, r0
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	e7bc      	b.n	800230a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002390:	6862      	ldr	r2, [r4, #4]
 8002392:	4b1f      	ldr	r3, [pc, #124]	; (8002410 <HAL_RCC_ClockConfig+0x128>)
 8002394:	2a01      	cmp	r2, #1
 8002396:	d11d      	bne.n	80023d4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239e:	d0a8      	beq.n	80022f2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023a0:	4e1b      	ldr	r6, [pc, #108]	; (8002410 <HAL_RCC_ClockConfig+0x128>)
 80023a2:	68b3      	ldr	r3, [r6, #8]
 80023a4:	f023 0303 	bic.w	r3, r3, #3
 80023a8:	4313      	orrs	r3, r2
 80023aa:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80023ac:	f7ff f99a 	bl	80016e4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80023b4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	68b3      	ldr	r3, [r6, #8]
 80023b8:	6862      	ldr	r2, [r4, #4]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80023c2:	d0a4      	beq.n	800230e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c4:	f7ff f98e 	bl	80016e4 <HAL_GetTick>
 80023c8:	1bc0      	subs	r0, r0, r7
 80023ca:	4540      	cmp	r0, r8
 80023cc:	d9f3      	bls.n	80023b6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80023ce:	2003      	movs	r0, #3
}
 80023d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023d4:	1e91      	subs	r1, r2, #2
 80023d6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023da:	d802      	bhi.n	80023e2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023dc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80023e0:	e7dd      	b.n	800239e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e2:	f013 0f02 	tst.w	r3, #2
 80023e6:	e7da      	b.n	800239e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e8:	b2ea      	uxtb	r2, r5
 80023ea:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	429d      	cmp	r5, r3
 80023f4:	f47f af7d 	bne.w	80022f2 <HAL_RCC_ClockConfig+0xa>
 80023f8:	e78f      	b.n	800231a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023fa:	4905      	ldr	r1, [pc, #20]	; (8002410 <HAL_RCC_ClockConfig+0x128>)
 80023fc:	68e0      	ldr	r0, [r4, #12]
 80023fe:	688b      	ldr	r3, [r1, #8]
 8002400:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002404:	4303      	orrs	r3, r0
 8002406:	608b      	str	r3, [r1, #8]
 8002408:	e78a      	b.n	8002320 <HAL_RCC_ClockConfig+0x38>
 800240a:	bf00      	nop
 800240c:	40023c00 	.word	0x40023c00
 8002410:	40023800 	.word	0x40023800
 8002414:	08004811 	.word	0x08004811
 8002418:	20000008 	.word	0x20000008

0800241c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800241c:	4b04      	ldr	r3, [pc, #16]	; (8002430 <HAL_RCC_GetPCLK1Freq+0x14>)
 800241e:	4a05      	ldr	r2, [pc, #20]	; (8002434 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002426:	5cd3      	ldrb	r3, [r2, r3]
 8002428:	4a03      	ldr	r2, [pc, #12]	; (8002438 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800242a:	6810      	ldr	r0, [r2, #0]
}
 800242c:	40d8      	lsrs	r0, r3
 800242e:	4770      	bx	lr
 8002430:	40023800 	.word	0x40023800
 8002434:	08004821 	.word	0x08004821
 8002438:	20000008 	.word	0x20000008

0800243c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800243c:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  switch (Channel)
 800243e:	b189      	cbz	r1, 8002464 <HAL_TIM_Encoder_Start+0x28>
 8002440:	2904      	cmp	r1, #4
 8002442:	d007      	beq.n	8002454 <HAL_TIM_Encoder_Start+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002444:	6a1a      	ldr	r2, [r3, #32]
 8002446:	f022 0201 	bic.w	r2, r2, #1
 800244a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800244c:	6a1a      	ldr	r2, [r3, #32]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8002454:	6a1a      	ldr	r2, [r3, #32]
 8002456:	f022 0210 	bic.w	r2, r2, #16
 800245a:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800245c:	6a1a      	ldr	r2, [r3, #32]
 800245e:	f042 0210 	orr.w	r2, r2, #16
 8002462:	e006      	b.n	8002472 <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8002464:	6a1a      	ldr	r2, [r3, #32]
 8002466:	f022 0201 	bic.w	r2, r2, #1
 800246a:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800246c:	6a1a      	ldr	r2, [r3, #32]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]
}
 800247c:	2000      	movs	r0, #0
 800247e:	4770      	bx	lr

08002480 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002480:	4a2e      	ldr	r2, [pc, #184]	; (800253c <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8002482:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002484:	4290      	cmp	r0, r2
 8002486:	d012      	beq.n	80024ae <TIM_Base_SetConfig+0x2e>
 8002488:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800248c:	d00f      	beq.n	80024ae <TIM_Base_SetConfig+0x2e>
 800248e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002492:	4290      	cmp	r0, r2
 8002494:	d00b      	beq.n	80024ae <TIM_Base_SetConfig+0x2e>
 8002496:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800249a:	4290      	cmp	r0, r2
 800249c:	d007      	beq.n	80024ae <TIM_Base_SetConfig+0x2e>
 800249e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024a2:	4290      	cmp	r0, r2
 80024a4:	d003      	beq.n	80024ae <TIM_Base_SetConfig+0x2e>
 80024a6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80024aa:	4290      	cmp	r0, r2
 80024ac:	d11d      	bne.n	80024ea <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80024ae:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80024b4:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80024b6:	4a21      	ldr	r2, [pc, #132]	; (800253c <TIM_Base_SetConfig+0xbc>)
 80024b8:	4290      	cmp	r0, r2
 80024ba:	d104      	bne.n	80024c6 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024bc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80024be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024c2:	4313      	orrs	r3, r2
 80024c4:	e028      	b.n	8002518 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80024c6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80024ca:	d0f7      	beq.n	80024bc <TIM_Base_SetConfig+0x3c>
 80024cc:	4a1c      	ldr	r2, [pc, #112]	; (8002540 <TIM_Base_SetConfig+0xc0>)
 80024ce:	4290      	cmp	r0, r2
 80024d0:	d0f4      	beq.n	80024bc <TIM_Base_SetConfig+0x3c>
 80024d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024d6:	4290      	cmp	r0, r2
 80024d8:	d0f0      	beq.n	80024bc <TIM_Base_SetConfig+0x3c>
 80024da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024de:	4290      	cmp	r0, r2
 80024e0:	d0ec      	beq.n	80024bc <TIM_Base_SetConfig+0x3c>
 80024e2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80024e6:	4290      	cmp	r0, r2
 80024e8:	d0e8      	beq.n	80024bc <TIM_Base_SetConfig+0x3c>
 80024ea:	4a16      	ldr	r2, [pc, #88]	; (8002544 <TIM_Base_SetConfig+0xc4>)
 80024ec:	4290      	cmp	r0, r2
 80024ee:	d0e5      	beq.n	80024bc <TIM_Base_SetConfig+0x3c>
 80024f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024f4:	4290      	cmp	r0, r2
 80024f6:	d0e1      	beq.n	80024bc <TIM_Base_SetConfig+0x3c>
 80024f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024fc:	4290      	cmp	r0, r2
 80024fe:	d0dd      	beq.n	80024bc <TIM_Base_SetConfig+0x3c>
 8002500:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002504:	4290      	cmp	r0, r2
 8002506:	d0d9      	beq.n	80024bc <TIM_Base_SetConfig+0x3c>
 8002508:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800250c:	4290      	cmp	r0, r2
 800250e:	d0d5      	beq.n	80024bc <TIM_Base_SetConfig+0x3c>
 8002510:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002514:	4290      	cmp	r0, r2
 8002516:	d0d1      	beq.n	80024bc <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8002518:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800251a:	688b      	ldr	r3, [r1, #8]
 800251c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800251e:	680b      	ldr	r3, [r1, #0]
 8002520:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <TIM_Base_SetConfig+0xbc>)
 8002524:	4298      	cmp	r0, r3
 8002526:	d006      	beq.n	8002536 <TIM_Base_SetConfig+0xb6>
 8002528:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800252c:	4298      	cmp	r0, r3
 800252e:	d002      	beq.n	8002536 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8002530:	2301      	movs	r3, #1
 8002532:	6143      	str	r3, [r0, #20]
}
 8002534:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002536:	690b      	ldr	r3, [r1, #16]
 8002538:	6303      	str	r3, [r0, #48]	; 0x30
 800253a:	e7f9      	b.n	8002530 <TIM_Base_SetConfig+0xb0>
 800253c:	40010000 	.word	0x40010000
 8002540:	40000400 	.word	0x40000400
 8002544:	40014000 	.word	0x40014000

08002548 <HAL_TIM_Encoder_Init>:
{
 8002548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254a:	460c      	mov	r4, r1
  if(htim == NULL)
 800254c:	4605      	mov	r5, r0
 800254e:	2800      	cmp	r0, #0
 8002550:	d041      	beq.n	80025d6 <HAL_TIM_Encoder_Init+0x8e>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002552:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002556:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800255a:	b91b      	cbnz	r3, 8002564 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 800255c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Encoder_MspInit(htim);
 8002560:	f7fe fe80 	bl	8001264 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002564:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;   
 8002566:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002568:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;   
 800256c:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002570:	6883      	ldr	r3, [r0, #8]
 8002572:	f023 0307 	bic.w	r3, r3, #7
 8002576:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8002578:	f7ff ff82 	bl	8002480 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 800257c:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 800257e:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002580:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8002582:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002584:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 8002586:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8002588:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800258a:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800258c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002590:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002594:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8002598:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800259a:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800259e:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80025a0:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80025a8:	68e1      	ldr	r1, [r4, #12]
 80025aa:	430b      	orrs	r3, r1
 80025ac:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80025ae:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80025b2:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80025b6:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80025b8:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80025ba:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80025be:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 80025c0:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80025c2:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 80025c6:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80025c8:	4317      	orrs	r7, r2
  htim->State= HAL_TIM_STATE_READY;
 80025ca:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 80025cc:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 80025ce:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  return HAL_OK;
 80025d2:	2000      	movs	r0, #0
 80025d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80025d6:	2001      	movs	r0, #1
}
 80025d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080025da <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80025da:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80025de:	2b01      	cmp	r3, #1
{
 80025e0:	b510      	push	{r4, lr}
 80025e2:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80025e6:	d018      	beq.n	800261a <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80025e8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80025ec:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80025ee:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80025f0:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80025f2:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80025f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80025f8:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	4322      	orrs	r2, r4
 80025fe:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002606:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	430a      	orrs	r2, r1
 800260c:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 800260e:	2301      	movs	r3, #1
 8002610:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002614:	2300      	movs	r3, #0
 8002616:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 800261a:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 800261c:	bd10      	pop	{r4, pc}
	...

08002620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002658 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002624:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002626:	e003      	b.n	8002630 <LoopCopyDataInit>

08002628 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800262a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800262c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800262e:	3104      	adds	r1, #4

08002630 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002630:	480b      	ldr	r0, [pc, #44]	; (8002660 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002632:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002634:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002636:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002638:	d3f6      	bcc.n	8002628 <CopyDataInit>
  ldr  r2, =_sbss
 800263a:	4a0b      	ldr	r2, [pc, #44]	; (8002668 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800263c:	e002      	b.n	8002644 <LoopFillZerobss>

0800263e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800263e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002640:	f842 3b04 	str.w	r3, [r2], #4

08002644 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002646:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002648:	d3f9      	bcc.n	800263e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800264a:	f7fe fe9f 	bl	800138c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800264e:	f000 f831 	bl	80026b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002652:	f7fe fd1d 	bl	8001090 <main>
  bx  lr    
 8002656:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002658:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800265c:	080057f0 	.word	0x080057f0
  ldr  r0, =_sdata
 8002660:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002664:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8002668:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 800266c:	200006b4 	.word	0x200006b4

08002670 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002670:	e7fe      	b.n	8002670 <ADC_IRQHandler>
	...

08002674 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002674:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002676:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <_sbrk+0x2c>)
 8002678:	6819      	ldr	r1, [r3, #0]
{
 800267a:	4602      	mov	r2, r0
	if (heap_end == 0)
 800267c:	b909      	cbnz	r1, 8002682 <_sbrk+0xe>
		heap_end = &end;
 800267e:	4909      	ldr	r1, [pc, #36]	; (80026a4 <_sbrk+0x30>)
 8002680:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8002682:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002684:	4669      	mov	r1, sp
 8002686:	4402      	add	r2, r0
 8002688:	428a      	cmp	r2, r1
 800268a:	d906      	bls.n	800269a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800268c:	f000 f80c 	bl	80026a8 <__errno>
 8002690:	230c      	movs	r3, #12
 8002692:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002694:	f04f 30ff 	mov.w	r0, #4294967295
 8002698:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800269a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800269c:	bd08      	pop	{r3, pc}
 800269e:	bf00      	nop
 80026a0:	20000610 	.word	0x20000610
 80026a4:	200006b4 	.word	0x200006b4

080026a8 <__errno>:
 80026a8:	4b01      	ldr	r3, [pc, #4]	; (80026b0 <__errno+0x8>)
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	2000001c 	.word	0x2000001c

080026b4 <__libc_init_array>:
 80026b4:	b570      	push	{r4, r5, r6, lr}
 80026b6:	4e0d      	ldr	r6, [pc, #52]	; (80026ec <__libc_init_array+0x38>)
 80026b8:	4c0d      	ldr	r4, [pc, #52]	; (80026f0 <__libc_init_array+0x3c>)
 80026ba:	1ba4      	subs	r4, r4, r6
 80026bc:	10a4      	asrs	r4, r4, #2
 80026be:	2500      	movs	r5, #0
 80026c0:	42a5      	cmp	r5, r4
 80026c2:	d109      	bne.n	80026d8 <__libc_init_array+0x24>
 80026c4:	4e0b      	ldr	r6, [pc, #44]	; (80026f4 <__libc_init_array+0x40>)
 80026c6:	4c0c      	ldr	r4, [pc, #48]	; (80026f8 <__libc_init_array+0x44>)
 80026c8:	f002 f892 	bl	80047f0 <_init>
 80026cc:	1ba4      	subs	r4, r4, r6
 80026ce:	10a4      	asrs	r4, r4, #2
 80026d0:	2500      	movs	r5, #0
 80026d2:	42a5      	cmp	r5, r4
 80026d4:	d105      	bne.n	80026e2 <__libc_init_array+0x2e>
 80026d6:	bd70      	pop	{r4, r5, r6, pc}
 80026d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026dc:	4798      	blx	r3
 80026de:	3501      	adds	r5, #1
 80026e0:	e7ee      	b.n	80026c0 <__libc_init_array+0xc>
 80026e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026e6:	4798      	blx	r3
 80026e8:	3501      	adds	r5, #1
 80026ea:	e7f2      	b.n	80026d2 <__libc_init_array+0x1e>
 80026ec:	080057e8 	.word	0x080057e8
 80026f0:	080057e8 	.word	0x080057e8
 80026f4:	080057e8 	.word	0x080057e8
 80026f8:	080057ec 	.word	0x080057ec

080026fc <memset>:
 80026fc:	4402      	add	r2, r0
 80026fe:	4603      	mov	r3, r0
 8002700:	4293      	cmp	r3, r2
 8002702:	d100      	bne.n	8002706 <memset+0xa>
 8002704:	4770      	bx	lr
 8002706:	f803 1b01 	strb.w	r1, [r3], #1
 800270a:	e7f9      	b.n	8002700 <memset+0x4>

0800270c <__cvt>:
 800270c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002710:	ec55 4b10 	vmov	r4, r5, d0
 8002714:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002716:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800271a:	2d00      	cmp	r5, #0
 800271c:	460e      	mov	r6, r1
 800271e:	4691      	mov	r9, r2
 8002720:	4619      	mov	r1, r3
 8002722:	bfb8      	it	lt
 8002724:	4622      	movlt	r2, r4
 8002726:	462b      	mov	r3, r5
 8002728:	f027 0720 	bic.w	r7, r7, #32
 800272c:	bfbb      	ittet	lt
 800272e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002732:	461d      	movlt	r5, r3
 8002734:	2300      	movge	r3, #0
 8002736:	232d      	movlt	r3, #45	; 0x2d
 8002738:	bfb8      	it	lt
 800273a:	4614      	movlt	r4, r2
 800273c:	2f46      	cmp	r7, #70	; 0x46
 800273e:	700b      	strb	r3, [r1, #0]
 8002740:	d004      	beq.n	800274c <__cvt+0x40>
 8002742:	2f45      	cmp	r7, #69	; 0x45
 8002744:	d100      	bne.n	8002748 <__cvt+0x3c>
 8002746:	3601      	adds	r6, #1
 8002748:	2102      	movs	r1, #2
 800274a:	e000      	b.n	800274e <__cvt+0x42>
 800274c:	2103      	movs	r1, #3
 800274e:	ab03      	add	r3, sp, #12
 8002750:	9301      	str	r3, [sp, #4]
 8002752:	ab02      	add	r3, sp, #8
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	4632      	mov	r2, r6
 8002758:	4653      	mov	r3, sl
 800275a:	ec45 4b10 	vmov	d0, r4, r5
 800275e:	f000 fd03 	bl	8003168 <_dtoa_r>
 8002762:	2f47      	cmp	r7, #71	; 0x47
 8002764:	4680      	mov	r8, r0
 8002766:	d102      	bne.n	800276e <__cvt+0x62>
 8002768:	f019 0f01 	tst.w	r9, #1
 800276c:	d026      	beq.n	80027bc <__cvt+0xb0>
 800276e:	2f46      	cmp	r7, #70	; 0x46
 8002770:	eb08 0906 	add.w	r9, r8, r6
 8002774:	d111      	bne.n	800279a <__cvt+0x8e>
 8002776:	f898 3000 	ldrb.w	r3, [r8]
 800277a:	2b30      	cmp	r3, #48	; 0x30
 800277c:	d10a      	bne.n	8002794 <__cvt+0x88>
 800277e:	2200      	movs	r2, #0
 8002780:	2300      	movs	r3, #0
 8002782:	4620      	mov	r0, r4
 8002784:	4629      	mov	r1, r5
 8002786:	f7fe f99b 	bl	8000ac0 <__aeabi_dcmpeq>
 800278a:	b918      	cbnz	r0, 8002794 <__cvt+0x88>
 800278c:	f1c6 0601 	rsb	r6, r6, #1
 8002790:	f8ca 6000 	str.w	r6, [sl]
 8002794:	f8da 3000 	ldr.w	r3, [sl]
 8002798:	4499      	add	r9, r3
 800279a:	2200      	movs	r2, #0
 800279c:	2300      	movs	r3, #0
 800279e:	4620      	mov	r0, r4
 80027a0:	4629      	mov	r1, r5
 80027a2:	f7fe f98d 	bl	8000ac0 <__aeabi_dcmpeq>
 80027a6:	b938      	cbnz	r0, 80027b8 <__cvt+0xac>
 80027a8:	2230      	movs	r2, #48	; 0x30
 80027aa:	9b03      	ldr	r3, [sp, #12]
 80027ac:	4599      	cmp	r9, r3
 80027ae:	d905      	bls.n	80027bc <__cvt+0xb0>
 80027b0:	1c59      	adds	r1, r3, #1
 80027b2:	9103      	str	r1, [sp, #12]
 80027b4:	701a      	strb	r2, [r3, #0]
 80027b6:	e7f8      	b.n	80027aa <__cvt+0x9e>
 80027b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80027bc:	9b03      	ldr	r3, [sp, #12]
 80027be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80027c0:	eba3 0308 	sub.w	r3, r3, r8
 80027c4:	4640      	mov	r0, r8
 80027c6:	6013      	str	r3, [r2, #0]
 80027c8:	b004      	add	sp, #16
 80027ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080027ce <__exponent>:
 80027ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027d0:	4603      	mov	r3, r0
 80027d2:	2900      	cmp	r1, #0
 80027d4:	bfb8      	it	lt
 80027d6:	4249      	neglt	r1, r1
 80027d8:	f803 2b02 	strb.w	r2, [r3], #2
 80027dc:	bfb4      	ite	lt
 80027de:	222d      	movlt	r2, #45	; 0x2d
 80027e0:	222b      	movge	r2, #43	; 0x2b
 80027e2:	2909      	cmp	r1, #9
 80027e4:	7042      	strb	r2, [r0, #1]
 80027e6:	dd20      	ble.n	800282a <__exponent+0x5c>
 80027e8:	f10d 0207 	add.w	r2, sp, #7
 80027ec:	4617      	mov	r7, r2
 80027ee:	260a      	movs	r6, #10
 80027f0:	fb91 f5f6 	sdiv	r5, r1, r6
 80027f4:	fb06 1115 	mls	r1, r6, r5, r1
 80027f8:	3130      	adds	r1, #48	; 0x30
 80027fa:	2d09      	cmp	r5, #9
 80027fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002800:	f102 34ff 	add.w	r4, r2, #4294967295
 8002804:	4629      	mov	r1, r5
 8002806:	dc09      	bgt.n	800281c <__exponent+0x4e>
 8002808:	3130      	adds	r1, #48	; 0x30
 800280a:	3a02      	subs	r2, #2
 800280c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002810:	42ba      	cmp	r2, r7
 8002812:	461c      	mov	r4, r3
 8002814:	d304      	bcc.n	8002820 <__exponent+0x52>
 8002816:	1a20      	subs	r0, r4, r0
 8002818:	b003      	add	sp, #12
 800281a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800281c:	4622      	mov	r2, r4
 800281e:	e7e7      	b.n	80027f0 <__exponent+0x22>
 8002820:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002824:	f803 1b01 	strb.w	r1, [r3], #1
 8002828:	e7f2      	b.n	8002810 <__exponent+0x42>
 800282a:	2230      	movs	r2, #48	; 0x30
 800282c:	461c      	mov	r4, r3
 800282e:	4411      	add	r1, r2
 8002830:	f804 2b02 	strb.w	r2, [r4], #2
 8002834:	7059      	strb	r1, [r3, #1]
 8002836:	e7ee      	b.n	8002816 <__exponent+0x48>

08002838 <_printf_float>:
 8002838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800283c:	b08d      	sub	sp, #52	; 0x34
 800283e:	460c      	mov	r4, r1
 8002840:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8002844:	4616      	mov	r6, r2
 8002846:	461f      	mov	r7, r3
 8002848:	4605      	mov	r5, r0
 800284a:	f001 fa5b 	bl	8003d04 <_localeconv_r>
 800284e:	6803      	ldr	r3, [r0, #0]
 8002850:	9304      	str	r3, [sp, #16]
 8002852:	4618      	mov	r0, r3
 8002854:	f7fd fcbc 	bl	80001d0 <strlen>
 8002858:	2300      	movs	r3, #0
 800285a:	930a      	str	r3, [sp, #40]	; 0x28
 800285c:	f8d8 3000 	ldr.w	r3, [r8]
 8002860:	9005      	str	r0, [sp, #20]
 8002862:	3307      	adds	r3, #7
 8002864:	f023 0307 	bic.w	r3, r3, #7
 8002868:	f103 0208 	add.w	r2, r3, #8
 800286c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002870:	f8d4 b000 	ldr.w	fp, [r4]
 8002874:	f8c8 2000 	str.w	r2, [r8]
 8002878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002880:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002884:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002888:	9307      	str	r3, [sp, #28]
 800288a:	f8cd 8018 	str.w	r8, [sp, #24]
 800288e:	f04f 32ff 	mov.w	r2, #4294967295
 8002892:	4ba5      	ldr	r3, [pc, #660]	; (8002b28 <_printf_float+0x2f0>)
 8002894:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002898:	f7fe f944 	bl	8000b24 <__aeabi_dcmpun>
 800289c:	2800      	cmp	r0, #0
 800289e:	f040 81fb 	bne.w	8002c98 <_printf_float+0x460>
 80028a2:	f04f 32ff 	mov.w	r2, #4294967295
 80028a6:	4ba0      	ldr	r3, [pc, #640]	; (8002b28 <_printf_float+0x2f0>)
 80028a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80028ac:	f7fe f91c 	bl	8000ae8 <__aeabi_dcmple>
 80028b0:	2800      	cmp	r0, #0
 80028b2:	f040 81f1 	bne.w	8002c98 <_printf_float+0x460>
 80028b6:	2200      	movs	r2, #0
 80028b8:	2300      	movs	r3, #0
 80028ba:	4640      	mov	r0, r8
 80028bc:	4649      	mov	r1, r9
 80028be:	f7fe f909 	bl	8000ad4 <__aeabi_dcmplt>
 80028c2:	b110      	cbz	r0, 80028ca <_printf_float+0x92>
 80028c4:	232d      	movs	r3, #45	; 0x2d
 80028c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028ca:	4b98      	ldr	r3, [pc, #608]	; (8002b2c <_printf_float+0x2f4>)
 80028cc:	4a98      	ldr	r2, [pc, #608]	; (8002b30 <_printf_float+0x2f8>)
 80028ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80028d2:	bf8c      	ite	hi
 80028d4:	4690      	movhi	r8, r2
 80028d6:	4698      	movls	r8, r3
 80028d8:	2303      	movs	r3, #3
 80028da:	f02b 0204 	bic.w	r2, fp, #4
 80028de:	6123      	str	r3, [r4, #16]
 80028e0:	6022      	str	r2, [r4, #0]
 80028e2:	f04f 0900 	mov.w	r9, #0
 80028e6:	9700      	str	r7, [sp, #0]
 80028e8:	4633      	mov	r3, r6
 80028ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80028ec:	4621      	mov	r1, r4
 80028ee:	4628      	mov	r0, r5
 80028f0:	f000 f9e2 	bl	8002cb8 <_printf_common>
 80028f4:	3001      	adds	r0, #1
 80028f6:	f040 8093 	bne.w	8002a20 <_printf_float+0x1e8>
 80028fa:	f04f 30ff 	mov.w	r0, #4294967295
 80028fe:	b00d      	add	sp, #52	; 0x34
 8002900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002904:	6861      	ldr	r1, [r4, #4]
 8002906:	1c4b      	adds	r3, r1, #1
 8002908:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800290c:	d13f      	bne.n	800298e <_printf_float+0x156>
 800290e:	2306      	movs	r3, #6
 8002910:	6063      	str	r3, [r4, #4]
 8002912:	2300      	movs	r3, #0
 8002914:	9303      	str	r3, [sp, #12]
 8002916:	ab0a      	add	r3, sp, #40	; 0x28
 8002918:	9302      	str	r3, [sp, #8]
 800291a:	ab09      	add	r3, sp, #36	; 0x24
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	ec49 8b10 	vmov	d0, r8, r9
 8002922:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002926:	6022      	str	r2, [r4, #0]
 8002928:	f8cd a004 	str.w	sl, [sp, #4]
 800292c:	6861      	ldr	r1, [r4, #4]
 800292e:	4628      	mov	r0, r5
 8002930:	f7ff feec 	bl	800270c <__cvt>
 8002934:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8002938:	2b47      	cmp	r3, #71	; 0x47
 800293a:	4680      	mov	r8, r0
 800293c:	d109      	bne.n	8002952 <_printf_float+0x11a>
 800293e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002940:	1cd8      	adds	r0, r3, #3
 8002942:	db02      	blt.n	800294a <_printf_float+0x112>
 8002944:	6862      	ldr	r2, [r4, #4]
 8002946:	4293      	cmp	r3, r2
 8002948:	dd57      	ble.n	80029fa <_printf_float+0x1c2>
 800294a:	f1aa 0a02 	sub.w	sl, sl, #2
 800294e:	fa5f fa8a 	uxtb.w	sl, sl
 8002952:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002956:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002958:	d834      	bhi.n	80029c4 <_printf_float+0x18c>
 800295a:	3901      	subs	r1, #1
 800295c:	4652      	mov	r2, sl
 800295e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002962:	9109      	str	r1, [sp, #36]	; 0x24
 8002964:	f7ff ff33 	bl	80027ce <__exponent>
 8002968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800296a:	1883      	adds	r3, r0, r2
 800296c:	2a01      	cmp	r2, #1
 800296e:	4681      	mov	r9, r0
 8002970:	6123      	str	r3, [r4, #16]
 8002972:	dc02      	bgt.n	800297a <_printf_float+0x142>
 8002974:	6822      	ldr	r2, [r4, #0]
 8002976:	07d1      	lsls	r1, r2, #31
 8002978:	d501      	bpl.n	800297e <_printf_float+0x146>
 800297a:	3301      	adds	r3, #1
 800297c:	6123      	str	r3, [r4, #16]
 800297e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0af      	beq.n	80028e6 <_printf_float+0xae>
 8002986:	232d      	movs	r3, #45	; 0x2d
 8002988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800298c:	e7ab      	b.n	80028e6 <_printf_float+0xae>
 800298e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8002992:	d002      	beq.n	800299a <_printf_float+0x162>
 8002994:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002998:	d1bb      	bne.n	8002912 <_printf_float+0xda>
 800299a:	b189      	cbz	r1, 80029c0 <_printf_float+0x188>
 800299c:	2300      	movs	r3, #0
 800299e:	9303      	str	r3, [sp, #12]
 80029a0:	ab0a      	add	r3, sp, #40	; 0x28
 80029a2:	9302      	str	r3, [sp, #8]
 80029a4:	ab09      	add	r3, sp, #36	; 0x24
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	ec49 8b10 	vmov	d0, r8, r9
 80029ac:	6022      	str	r2, [r4, #0]
 80029ae:	f8cd a004 	str.w	sl, [sp, #4]
 80029b2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80029b6:	4628      	mov	r0, r5
 80029b8:	f7ff fea8 	bl	800270c <__cvt>
 80029bc:	4680      	mov	r8, r0
 80029be:	e7be      	b.n	800293e <_printf_float+0x106>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e7a5      	b.n	8002910 <_printf_float+0xd8>
 80029c4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80029c8:	d119      	bne.n	80029fe <_printf_float+0x1c6>
 80029ca:	2900      	cmp	r1, #0
 80029cc:	6863      	ldr	r3, [r4, #4]
 80029ce:	dd0c      	ble.n	80029ea <_printf_float+0x1b2>
 80029d0:	6121      	str	r1, [r4, #16]
 80029d2:	b913      	cbnz	r3, 80029da <_printf_float+0x1a2>
 80029d4:	6822      	ldr	r2, [r4, #0]
 80029d6:	07d2      	lsls	r2, r2, #31
 80029d8:	d502      	bpl.n	80029e0 <_printf_float+0x1a8>
 80029da:	3301      	adds	r3, #1
 80029dc:	440b      	add	r3, r1
 80029de:	6123      	str	r3, [r4, #16]
 80029e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029e2:	65a3      	str	r3, [r4, #88]	; 0x58
 80029e4:	f04f 0900 	mov.w	r9, #0
 80029e8:	e7c9      	b.n	800297e <_printf_float+0x146>
 80029ea:	b913      	cbnz	r3, 80029f2 <_printf_float+0x1ba>
 80029ec:	6822      	ldr	r2, [r4, #0]
 80029ee:	07d0      	lsls	r0, r2, #31
 80029f0:	d501      	bpl.n	80029f6 <_printf_float+0x1be>
 80029f2:	3302      	adds	r3, #2
 80029f4:	e7f3      	b.n	80029de <_printf_float+0x1a6>
 80029f6:	2301      	movs	r3, #1
 80029f8:	e7f1      	b.n	80029de <_printf_float+0x1a6>
 80029fa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80029fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002a02:	4293      	cmp	r3, r2
 8002a04:	db05      	blt.n	8002a12 <_printf_float+0x1da>
 8002a06:	6822      	ldr	r2, [r4, #0]
 8002a08:	6123      	str	r3, [r4, #16]
 8002a0a:	07d1      	lsls	r1, r2, #31
 8002a0c:	d5e8      	bpl.n	80029e0 <_printf_float+0x1a8>
 8002a0e:	3301      	adds	r3, #1
 8002a10:	e7e5      	b.n	80029de <_printf_float+0x1a6>
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	bfd4      	ite	le
 8002a16:	f1c3 0302 	rsble	r3, r3, #2
 8002a1a:	2301      	movgt	r3, #1
 8002a1c:	4413      	add	r3, r2
 8002a1e:	e7de      	b.n	80029de <_printf_float+0x1a6>
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	055a      	lsls	r2, r3, #21
 8002a24:	d407      	bmi.n	8002a36 <_printf_float+0x1fe>
 8002a26:	6923      	ldr	r3, [r4, #16]
 8002a28:	4642      	mov	r2, r8
 8002a2a:	4631      	mov	r1, r6
 8002a2c:	4628      	mov	r0, r5
 8002a2e:	47b8      	blx	r7
 8002a30:	3001      	adds	r0, #1
 8002a32:	d12b      	bne.n	8002a8c <_printf_float+0x254>
 8002a34:	e761      	b.n	80028fa <_printf_float+0xc2>
 8002a36:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002a3a:	f240 80e2 	bls.w	8002c02 <_printf_float+0x3ca>
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2300      	movs	r3, #0
 8002a42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002a46:	f7fe f83b 	bl	8000ac0 <__aeabi_dcmpeq>
 8002a4a:	2800      	cmp	r0, #0
 8002a4c:	d03c      	beq.n	8002ac8 <_printf_float+0x290>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	4a38      	ldr	r2, [pc, #224]	; (8002b34 <_printf_float+0x2fc>)
 8002a52:	4631      	mov	r1, r6
 8002a54:	4628      	mov	r0, r5
 8002a56:	47b8      	blx	r7
 8002a58:	3001      	adds	r0, #1
 8002a5a:	f43f af4e 	beq.w	80028fa <_printf_float+0xc2>
 8002a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a62:	429a      	cmp	r2, r3
 8002a64:	db02      	blt.n	8002a6c <_printf_float+0x234>
 8002a66:	6823      	ldr	r3, [r4, #0]
 8002a68:	07d8      	lsls	r0, r3, #31
 8002a6a:	d50f      	bpl.n	8002a8c <_printf_float+0x254>
 8002a6c:	9b05      	ldr	r3, [sp, #20]
 8002a6e:	9a04      	ldr	r2, [sp, #16]
 8002a70:	4631      	mov	r1, r6
 8002a72:	4628      	mov	r0, r5
 8002a74:	47b8      	blx	r7
 8002a76:	3001      	adds	r0, #1
 8002a78:	f43f af3f 	beq.w	80028fa <_printf_float+0xc2>
 8002a7c:	f04f 0800 	mov.w	r8, #0
 8002a80:	f104 091a 	add.w	r9, r4, #26
 8002a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a86:	3b01      	subs	r3, #1
 8002a88:	4598      	cmp	r8, r3
 8002a8a:	db12      	blt.n	8002ab2 <_printf_float+0x27a>
 8002a8c:	6823      	ldr	r3, [r4, #0]
 8002a8e:	079b      	lsls	r3, r3, #30
 8002a90:	d509      	bpl.n	8002aa6 <_printf_float+0x26e>
 8002a92:	f04f 0800 	mov.w	r8, #0
 8002a96:	f104 0919 	add.w	r9, r4, #25
 8002a9a:	68e3      	ldr	r3, [r4, #12]
 8002a9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002a9e:	1a9b      	subs	r3, r3, r2
 8002aa0:	4598      	cmp	r8, r3
 8002aa2:	f2c0 80ee 	blt.w	8002c82 <_printf_float+0x44a>
 8002aa6:	68e0      	ldr	r0, [r4, #12]
 8002aa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002aaa:	4298      	cmp	r0, r3
 8002aac:	bfb8      	it	lt
 8002aae:	4618      	movlt	r0, r3
 8002ab0:	e725      	b.n	80028fe <_printf_float+0xc6>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	464a      	mov	r2, r9
 8002ab6:	4631      	mov	r1, r6
 8002ab8:	4628      	mov	r0, r5
 8002aba:	47b8      	blx	r7
 8002abc:	3001      	adds	r0, #1
 8002abe:	f43f af1c 	beq.w	80028fa <_printf_float+0xc2>
 8002ac2:	f108 0801 	add.w	r8, r8, #1
 8002ac6:	e7dd      	b.n	8002a84 <_printf_float+0x24c>
 8002ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	dc34      	bgt.n	8002b38 <_printf_float+0x300>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	4a18      	ldr	r2, [pc, #96]	; (8002b34 <_printf_float+0x2fc>)
 8002ad2:	4631      	mov	r1, r6
 8002ad4:	4628      	mov	r0, r5
 8002ad6:	47b8      	blx	r7
 8002ad8:	3001      	adds	r0, #1
 8002ada:	f43f af0e 	beq.w	80028fa <_printf_float+0xc2>
 8002ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ae0:	b923      	cbnz	r3, 8002aec <_printf_float+0x2b4>
 8002ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ae4:	b913      	cbnz	r3, 8002aec <_printf_float+0x2b4>
 8002ae6:	6823      	ldr	r3, [r4, #0]
 8002ae8:	07d9      	lsls	r1, r3, #31
 8002aea:	d5cf      	bpl.n	8002a8c <_printf_float+0x254>
 8002aec:	9b05      	ldr	r3, [sp, #20]
 8002aee:	9a04      	ldr	r2, [sp, #16]
 8002af0:	4631      	mov	r1, r6
 8002af2:	4628      	mov	r0, r5
 8002af4:	47b8      	blx	r7
 8002af6:	3001      	adds	r0, #1
 8002af8:	f43f aeff 	beq.w	80028fa <_printf_float+0xc2>
 8002afc:	f04f 0900 	mov.w	r9, #0
 8002b00:	f104 0a1a 	add.w	sl, r4, #26
 8002b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b06:	425b      	negs	r3, r3
 8002b08:	4599      	cmp	r9, r3
 8002b0a:	db01      	blt.n	8002b10 <_printf_float+0x2d8>
 8002b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b0e:	e78b      	b.n	8002a28 <_printf_float+0x1f0>
 8002b10:	2301      	movs	r3, #1
 8002b12:	4652      	mov	r2, sl
 8002b14:	4631      	mov	r1, r6
 8002b16:	4628      	mov	r0, r5
 8002b18:	47b8      	blx	r7
 8002b1a:	3001      	adds	r0, #1
 8002b1c:	f43f aeed 	beq.w	80028fa <_printf_float+0xc2>
 8002b20:	f109 0901 	add.w	r9, r9, #1
 8002b24:	e7ee      	b.n	8002b04 <_printf_float+0x2cc>
 8002b26:	bf00      	nop
 8002b28:	7fefffff 	.word	0x7fefffff
 8002b2c:	08005586 	.word	0x08005586
 8002b30:	0800558a 	.word	0x0800558a
 8002b34:	08005596 	.word	0x08005596
 8002b38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	bfa8      	it	ge
 8002b40:	461a      	movge	r2, r3
 8002b42:	2a00      	cmp	r2, #0
 8002b44:	4691      	mov	r9, r2
 8002b46:	dc38      	bgt.n	8002bba <_printf_float+0x382>
 8002b48:	f104 031a 	add.w	r3, r4, #26
 8002b4c:	f04f 0b00 	mov.w	fp, #0
 8002b50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002b54:	9306      	str	r3, [sp, #24]
 8002b56:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002b5a:	ebaa 0309 	sub.w	r3, sl, r9
 8002b5e:	459b      	cmp	fp, r3
 8002b60:	db33      	blt.n	8002bca <_printf_float+0x392>
 8002b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b66:	429a      	cmp	r2, r3
 8002b68:	db3a      	blt.n	8002be0 <_printf_float+0x3a8>
 8002b6a:	6823      	ldr	r3, [r4, #0]
 8002b6c:	07da      	lsls	r2, r3, #31
 8002b6e:	d437      	bmi.n	8002be0 <_printf_float+0x3a8>
 8002b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002b74:	eba3 020a 	sub.w	r2, r3, sl
 8002b78:	eba3 0901 	sub.w	r9, r3, r1
 8002b7c:	4591      	cmp	r9, r2
 8002b7e:	bfa8      	it	ge
 8002b80:	4691      	movge	r9, r2
 8002b82:	f1b9 0f00 	cmp.w	r9, #0
 8002b86:	dc33      	bgt.n	8002bf0 <_printf_float+0x3b8>
 8002b88:	f04f 0800 	mov.w	r8, #0
 8002b8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002b90:	f104 0a1a 	add.w	sl, r4, #26
 8002b94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b98:	1a9b      	subs	r3, r3, r2
 8002b9a:	eba3 0309 	sub.w	r3, r3, r9
 8002b9e:	4598      	cmp	r8, r3
 8002ba0:	f6bf af74 	bge.w	8002a8c <_printf_float+0x254>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	4652      	mov	r2, sl
 8002ba8:	4631      	mov	r1, r6
 8002baa:	4628      	mov	r0, r5
 8002bac:	47b8      	blx	r7
 8002bae:	3001      	adds	r0, #1
 8002bb0:	f43f aea3 	beq.w	80028fa <_printf_float+0xc2>
 8002bb4:	f108 0801 	add.w	r8, r8, #1
 8002bb8:	e7ec      	b.n	8002b94 <_printf_float+0x35c>
 8002bba:	4613      	mov	r3, r2
 8002bbc:	4631      	mov	r1, r6
 8002bbe:	4642      	mov	r2, r8
 8002bc0:	4628      	mov	r0, r5
 8002bc2:	47b8      	blx	r7
 8002bc4:	3001      	adds	r0, #1
 8002bc6:	d1bf      	bne.n	8002b48 <_printf_float+0x310>
 8002bc8:	e697      	b.n	80028fa <_printf_float+0xc2>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	9a06      	ldr	r2, [sp, #24]
 8002bce:	4631      	mov	r1, r6
 8002bd0:	4628      	mov	r0, r5
 8002bd2:	47b8      	blx	r7
 8002bd4:	3001      	adds	r0, #1
 8002bd6:	f43f ae90 	beq.w	80028fa <_printf_float+0xc2>
 8002bda:	f10b 0b01 	add.w	fp, fp, #1
 8002bde:	e7ba      	b.n	8002b56 <_printf_float+0x31e>
 8002be0:	9b05      	ldr	r3, [sp, #20]
 8002be2:	9a04      	ldr	r2, [sp, #16]
 8002be4:	4631      	mov	r1, r6
 8002be6:	4628      	mov	r0, r5
 8002be8:	47b8      	blx	r7
 8002bea:	3001      	adds	r0, #1
 8002bec:	d1c0      	bne.n	8002b70 <_printf_float+0x338>
 8002bee:	e684      	b.n	80028fa <_printf_float+0xc2>
 8002bf0:	464b      	mov	r3, r9
 8002bf2:	eb08 020a 	add.w	r2, r8, sl
 8002bf6:	4631      	mov	r1, r6
 8002bf8:	4628      	mov	r0, r5
 8002bfa:	47b8      	blx	r7
 8002bfc:	3001      	adds	r0, #1
 8002bfe:	d1c3      	bne.n	8002b88 <_printf_float+0x350>
 8002c00:	e67b      	b.n	80028fa <_printf_float+0xc2>
 8002c02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002c04:	2a01      	cmp	r2, #1
 8002c06:	dc01      	bgt.n	8002c0c <_printf_float+0x3d4>
 8002c08:	07db      	lsls	r3, r3, #31
 8002c0a:	d537      	bpl.n	8002c7c <_printf_float+0x444>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	4642      	mov	r2, r8
 8002c10:	4631      	mov	r1, r6
 8002c12:	4628      	mov	r0, r5
 8002c14:	47b8      	blx	r7
 8002c16:	3001      	adds	r0, #1
 8002c18:	f43f ae6f 	beq.w	80028fa <_printf_float+0xc2>
 8002c1c:	9b05      	ldr	r3, [sp, #20]
 8002c1e:	9a04      	ldr	r2, [sp, #16]
 8002c20:	4631      	mov	r1, r6
 8002c22:	4628      	mov	r0, r5
 8002c24:	47b8      	blx	r7
 8002c26:	3001      	adds	r0, #1
 8002c28:	f43f ae67 	beq.w	80028fa <_printf_float+0xc2>
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002c34:	f7fd ff44 	bl	8000ac0 <__aeabi_dcmpeq>
 8002c38:	b158      	cbz	r0, 8002c52 <_printf_float+0x41a>
 8002c3a:	f04f 0800 	mov.w	r8, #0
 8002c3e:	f104 0a1a 	add.w	sl, r4, #26
 8002c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c44:	3b01      	subs	r3, #1
 8002c46:	4598      	cmp	r8, r3
 8002c48:	db0d      	blt.n	8002c66 <_printf_float+0x42e>
 8002c4a:	464b      	mov	r3, r9
 8002c4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002c50:	e6eb      	b.n	8002a2a <_printf_float+0x1f2>
 8002c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c54:	f108 0201 	add.w	r2, r8, #1
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	4631      	mov	r1, r6
 8002c5c:	4628      	mov	r0, r5
 8002c5e:	47b8      	blx	r7
 8002c60:	3001      	adds	r0, #1
 8002c62:	d1f2      	bne.n	8002c4a <_printf_float+0x412>
 8002c64:	e649      	b.n	80028fa <_printf_float+0xc2>
 8002c66:	2301      	movs	r3, #1
 8002c68:	4652      	mov	r2, sl
 8002c6a:	4631      	mov	r1, r6
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	47b8      	blx	r7
 8002c70:	3001      	adds	r0, #1
 8002c72:	f43f ae42 	beq.w	80028fa <_printf_float+0xc2>
 8002c76:	f108 0801 	add.w	r8, r8, #1
 8002c7a:	e7e2      	b.n	8002c42 <_printf_float+0x40a>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	4642      	mov	r2, r8
 8002c80:	e7eb      	b.n	8002c5a <_printf_float+0x422>
 8002c82:	2301      	movs	r3, #1
 8002c84:	464a      	mov	r2, r9
 8002c86:	4631      	mov	r1, r6
 8002c88:	4628      	mov	r0, r5
 8002c8a:	47b8      	blx	r7
 8002c8c:	3001      	adds	r0, #1
 8002c8e:	f43f ae34 	beq.w	80028fa <_printf_float+0xc2>
 8002c92:	f108 0801 	add.w	r8, r8, #1
 8002c96:	e700      	b.n	8002a9a <_printf_float+0x262>
 8002c98:	4642      	mov	r2, r8
 8002c9a:	464b      	mov	r3, r9
 8002c9c:	4640      	mov	r0, r8
 8002c9e:	4649      	mov	r1, r9
 8002ca0:	f7fd ff40 	bl	8000b24 <__aeabi_dcmpun>
 8002ca4:	2800      	cmp	r0, #0
 8002ca6:	f43f ae2d 	beq.w	8002904 <_printf_float+0xcc>
 8002caa:	4b01      	ldr	r3, [pc, #4]	; (8002cb0 <_printf_float+0x478>)
 8002cac:	4a01      	ldr	r2, [pc, #4]	; (8002cb4 <_printf_float+0x47c>)
 8002cae:	e60e      	b.n	80028ce <_printf_float+0x96>
 8002cb0:	0800558e 	.word	0x0800558e
 8002cb4:	08005592 	.word	0x08005592

08002cb8 <_printf_common>:
 8002cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cbc:	4691      	mov	r9, r2
 8002cbe:	461f      	mov	r7, r3
 8002cc0:	688a      	ldr	r2, [r1, #8]
 8002cc2:	690b      	ldr	r3, [r1, #16]
 8002cc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	bfb8      	it	lt
 8002ccc:	4613      	movlt	r3, r2
 8002cce:	f8c9 3000 	str.w	r3, [r9]
 8002cd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cd6:	4606      	mov	r6, r0
 8002cd8:	460c      	mov	r4, r1
 8002cda:	b112      	cbz	r2, 8002ce2 <_printf_common+0x2a>
 8002cdc:	3301      	adds	r3, #1
 8002cde:	f8c9 3000 	str.w	r3, [r9]
 8002ce2:	6823      	ldr	r3, [r4, #0]
 8002ce4:	0699      	lsls	r1, r3, #26
 8002ce6:	bf42      	ittt	mi
 8002ce8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002cec:	3302      	addmi	r3, #2
 8002cee:	f8c9 3000 	strmi.w	r3, [r9]
 8002cf2:	6825      	ldr	r5, [r4, #0]
 8002cf4:	f015 0506 	ands.w	r5, r5, #6
 8002cf8:	d107      	bne.n	8002d0a <_printf_common+0x52>
 8002cfa:	f104 0a19 	add.w	sl, r4, #25
 8002cfe:	68e3      	ldr	r3, [r4, #12]
 8002d00:	f8d9 2000 	ldr.w	r2, [r9]
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	429d      	cmp	r5, r3
 8002d08:	db29      	blt.n	8002d5e <_printf_common+0xa6>
 8002d0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002d0e:	6822      	ldr	r2, [r4, #0]
 8002d10:	3300      	adds	r3, #0
 8002d12:	bf18      	it	ne
 8002d14:	2301      	movne	r3, #1
 8002d16:	0692      	lsls	r2, r2, #26
 8002d18:	d42e      	bmi.n	8002d78 <_printf_common+0xc0>
 8002d1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d1e:	4639      	mov	r1, r7
 8002d20:	4630      	mov	r0, r6
 8002d22:	47c0      	blx	r8
 8002d24:	3001      	adds	r0, #1
 8002d26:	d021      	beq.n	8002d6c <_printf_common+0xb4>
 8002d28:	6823      	ldr	r3, [r4, #0]
 8002d2a:	68e5      	ldr	r5, [r4, #12]
 8002d2c:	f8d9 2000 	ldr.w	r2, [r9]
 8002d30:	f003 0306 	and.w	r3, r3, #6
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	bf08      	it	eq
 8002d38:	1aad      	subeq	r5, r5, r2
 8002d3a:	68a3      	ldr	r3, [r4, #8]
 8002d3c:	6922      	ldr	r2, [r4, #16]
 8002d3e:	bf0c      	ite	eq
 8002d40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d44:	2500      	movne	r5, #0
 8002d46:	4293      	cmp	r3, r2
 8002d48:	bfc4      	itt	gt
 8002d4a:	1a9b      	subgt	r3, r3, r2
 8002d4c:	18ed      	addgt	r5, r5, r3
 8002d4e:	f04f 0900 	mov.w	r9, #0
 8002d52:	341a      	adds	r4, #26
 8002d54:	454d      	cmp	r5, r9
 8002d56:	d11b      	bne.n	8002d90 <_printf_common+0xd8>
 8002d58:	2000      	movs	r0, #0
 8002d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d5e:	2301      	movs	r3, #1
 8002d60:	4652      	mov	r2, sl
 8002d62:	4639      	mov	r1, r7
 8002d64:	4630      	mov	r0, r6
 8002d66:	47c0      	blx	r8
 8002d68:	3001      	adds	r0, #1
 8002d6a:	d103      	bne.n	8002d74 <_printf_common+0xbc>
 8002d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d74:	3501      	adds	r5, #1
 8002d76:	e7c2      	b.n	8002cfe <_printf_common+0x46>
 8002d78:	18e1      	adds	r1, r4, r3
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	2030      	movs	r0, #48	; 0x30
 8002d7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d82:	4422      	add	r2, r4
 8002d84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	e7c4      	b.n	8002d1a <_printf_common+0x62>
 8002d90:	2301      	movs	r3, #1
 8002d92:	4622      	mov	r2, r4
 8002d94:	4639      	mov	r1, r7
 8002d96:	4630      	mov	r0, r6
 8002d98:	47c0      	blx	r8
 8002d9a:	3001      	adds	r0, #1
 8002d9c:	d0e6      	beq.n	8002d6c <_printf_common+0xb4>
 8002d9e:	f109 0901 	add.w	r9, r9, #1
 8002da2:	e7d7      	b.n	8002d54 <_printf_common+0x9c>

08002da4 <_printf_i>:
 8002da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002da8:	4617      	mov	r7, r2
 8002daa:	7e0a      	ldrb	r2, [r1, #24]
 8002dac:	b085      	sub	sp, #20
 8002dae:	2a6e      	cmp	r2, #110	; 0x6e
 8002db0:	4698      	mov	r8, r3
 8002db2:	4606      	mov	r6, r0
 8002db4:	460c      	mov	r4, r1
 8002db6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002db8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002dbc:	f000 80bc 	beq.w	8002f38 <_printf_i+0x194>
 8002dc0:	d81a      	bhi.n	8002df8 <_printf_i+0x54>
 8002dc2:	2a63      	cmp	r2, #99	; 0x63
 8002dc4:	d02e      	beq.n	8002e24 <_printf_i+0x80>
 8002dc6:	d80a      	bhi.n	8002dde <_printf_i+0x3a>
 8002dc8:	2a00      	cmp	r2, #0
 8002dca:	f000 80c8 	beq.w	8002f5e <_printf_i+0x1ba>
 8002dce:	2a58      	cmp	r2, #88	; 0x58
 8002dd0:	f000 808a 	beq.w	8002ee8 <_printf_i+0x144>
 8002dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dd8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002ddc:	e02a      	b.n	8002e34 <_printf_i+0x90>
 8002dde:	2a64      	cmp	r2, #100	; 0x64
 8002de0:	d001      	beq.n	8002de6 <_printf_i+0x42>
 8002de2:	2a69      	cmp	r2, #105	; 0x69
 8002de4:	d1f6      	bne.n	8002dd4 <_printf_i+0x30>
 8002de6:	6821      	ldr	r1, [r4, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002dee:	d023      	beq.n	8002e38 <_printf_i+0x94>
 8002df0:	1d11      	adds	r1, r2, #4
 8002df2:	6019      	str	r1, [r3, #0]
 8002df4:	6813      	ldr	r3, [r2, #0]
 8002df6:	e027      	b.n	8002e48 <_printf_i+0xa4>
 8002df8:	2a73      	cmp	r2, #115	; 0x73
 8002dfa:	f000 80b4 	beq.w	8002f66 <_printf_i+0x1c2>
 8002dfe:	d808      	bhi.n	8002e12 <_printf_i+0x6e>
 8002e00:	2a6f      	cmp	r2, #111	; 0x6f
 8002e02:	d02a      	beq.n	8002e5a <_printf_i+0xb6>
 8002e04:	2a70      	cmp	r2, #112	; 0x70
 8002e06:	d1e5      	bne.n	8002dd4 <_printf_i+0x30>
 8002e08:	680a      	ldr	r2, [r1, #0]
 8002e0a:	f042 0220 	orr.w	r2, r2, #32
 8002e0e:	600a      	str	r2, [r1, #0]
 8002e10:	e003      	b.n	8002e1a <_printf_i+0x76>
 8002e12:	2a75      	cmp	r2, #117	; 0x75
 8002e14:	d021      	beq.n	8002e5a <_printf_i+0xb6>
 8002e16:	2a78      	cmp	r2, #120	; 0x78
 8002e18:	d1dc      	bne.n	8002dd4 <_printf_i+0x30>
 8002e1a:	2278      	movs	r2, #120	; 0x78
 8002e1c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002e20:	496e      	ldr	r1, [pc, #440]	; (8002fdc <_printf_i+0x238>)
 8002e22:	e064      	b.n	8002eee <_printf_i+0x14a>
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002e2a:	1d11      	adds	r1, r2, #4
 8002e2c:	6019      	str	r1, [r3, #0]
 8002e2e:	6813      	ldr	r3, [r2, #0]
 8002e30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0a3      	b.n	8002f80 <_printf_i+0x1dc>
 8002e38:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002e3c:	f102 0104 	add.w	r1, r2, #4
 8002e40:	6019      	str	r1, [r3, #0]
 8002e42:	d0d7      	beq.n	8002df4 <_printf_i+0x50>
 8002e44:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	da03      	bge.n	8002e54 <_printf_i+0xb0>
 8002e4c:	222d      	movs	r2, #45	; 0x2d
 8002e4e:	425b      	negs	r3, r3
 8002e50:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002e54:	4962      	ldr	r1, [pc, #392]	; (8002fe0 <_printf_i+0x23c>)
 8002e56:	220a      	movs	r2, #10
 8002e58:	e017      	b.n	8002e8a <_printf_i+0xe6>
 8002e5a:	6820      	ldr	r0, [r4, #0]
 8002e5c:	6819      	ldr	r1, [r3, #0]
 8002e5e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002e62:	d003      	beq.n	8002e6c <_printf_i+0xc8>
 8002e64:	1d08      	adds	r0, r1, #4
 8002e66:	6018      	str	r0, [r3, #0]
 8002e68:	680b      	ldr	r3, [r1, #0]
 8002e6a:	e006      	b.n	8002e7a <_printf_i+0xd6>
 8002e6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e70:	f101 0004 	add.w	r0, r1, #4
 8002e74:	6018      	str	r0, [r3, #0]
 8002e76:	d0f7      	beq.n	8002e68 <_printf_i+0xc4>
 8002e78:	880b      	ldrh	r3, [r1, #0]
 8002e7a:	4959      	ldr	r1, [pc, #356]	; (8002fe0 <_printf_i+0x23c>)
 8002e7c:	2a6f      	cmp	r2, #111	; 0x6f
 8002e7e:	bf14      	ite	ne
 8002e80:	220a      	movne	r2, #10
 8002e82:	2208      	moveq	r2, #8
 8002e84:	2000      	movs	r0, #0
 8002e86:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002e8a:	6865      	ldr	r5, [r4, #4]
 8002e8c:	60a5      	str	r5, [r4, #8]
 8002e8e:	2d00      	cmp	r5, #0
 8002e90:	f2c0 809c 	blt.w	8002fcc <_printf_i+0x228>
 8002e94:	6820      	ldr	r0, [r4, #0]
 8002e96:	f020 0004 	bic.w	r0, r0, #4
 8002e9a:	6020      	str	r0, [r4, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d13f      	bne.n	8002f20 <_printf_i+0x17c>
 8002ea0:	2d00      	cmp	r5, #0
 8002ea2:	f040 8095 	bne.w	8002fd0 <_printf_i+0x22c>
 8002ea6:	4675      	mov	r5, lr
 8002ea8:	2a08      	cmp	r2, #8
 8002eaa:	d10b      	bne.n	8002ec4 <_printf_i+0x120>
 8002eac:	6823      	ldr	r3, [r4, #0]
 8002eae:	07da      	lsls	r2, r3, #31
 8002eb0:	d508      	bpl.n	8002ec4 <_printf_i+0x120>
 8002eb2:	6923      	ldr	r3, [r4, #16]
 8002eb4:	6862      	ldr	r2, [r4, #4]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	bfde      	ittt	le
 8002eba:	2330      	movle	r3, #48	; 0x30
 8002ebc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ec0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ec4:	ebae 0305 	sub.w	r3, lr, r5
 8002ec8:	6123      	str	r3, [r4, #16]
 8002eca:	f8cd 8000 	str.w	r8, [sp]
 8002ece:	463b      	mov	r3, r7
 8002ed0:	aa03      	add	r2, sp, #12
 8002ed2:	4621      	mov	r1, r4
 8002ed4:	4630      	mov	r0, r6
 8002ed6:	f7ff feef 	bl	8002cb8 <_printf_common>
 8002eda:	3001      	adds	r0, #1
 8002edc:	d155      	bne.n	8002f8a <_printf_i+0x1e6>
 8002ede:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee2:	b005      	add	sp, #20
 8002ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ee8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002eec:	493c      	ldr	r1, [pc, #240]	; (8002fe0 <_printf_i+0x23c>)
 8002eee:	6822      	ldr	r2, [r4, #0]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002ef6:	f100 0504 	add.w	r5, r0, #4
 8002efa:	601d      	str	r5, [r3, #0]
 8002efc:	d001      	beq.n	8002f02 <_printf_i+0x15e>
 8002efe:	6803      	ldr	r3, [r0, #0]
 8002f00:	e002      	b.n	8002f08 <_printf_i+0x164>
 8002f02:	0655      	lsls	r5, r2, #25
 8002f04:	d5fb      	bpl.n	8002efe <_printf_i+0x15a>
 8002f06:	8803      	ldrh	r3, [r0, #0]
 8002f08:	07d0      	lsls	r0, r2, #31
 8002f0a:	bf44      	itt	mi
 8002f0c:	f042 0220 	orrmi.w	r2, r2, #32
 8002f10:	6022      	strmi	r2, [r4, #0]
 8002f12:	b91b      	cbnz	r3, 8002f1c <_printf_i+0x178>
 8002f14:	6822      	ldr	r2, [r4, #0]
 8002f16:	f022 0220 	bic.w	r2, r2, #32
 8002f1a:	6022      	str	r2, [r4, #0]
 8002f1c:	2210      	movs	r2, #16
 8002f1e:	e7b1      	b.n	8002e84 <_printf_i+0xe0>
 8002f20:	4675      	mov	r5, lr
 8002f22:	fbb3 f0f2 	udiv	r0, r3, r2
 8002f26:	fb02 3310 	mls	r3, r2, r0, r3
 8002f2a:	5ccb      	ldrb	r3, [r1, r3]
 8002f2c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002f30:	4603      	mov	r3, r0
 8002f32:	2800      	cmp	r0, #0
 8002f34:	d1f5      	bne.n	8002f22 <_printf_i+0x17e>
 8002f36:	e7b7      	b.n	8002ea8 <_printf_i+0x104>
 8002f38:	6808      	ldr	r0, [r1, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	6949      	ldr	r1, [r1, #20]
 8002f3e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002f42:	d004      	beq.n	8002f4e <_printf_i+0x1aa>
 8002f44:	1d10      	adds	r0, r2, #4
 8002f46:	6018      	str	r0, [r3, #0]
 8002f48:	6813      	ldr	r3, [r2, #0]
 8002f4a:	6019      	str	r1, [r3, #0]
 8002f4c:	e007      	b.n	8002f5e <_printf_i+0x1ba>
 8002f4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f52:	f102 0004 	add.w	r0, r2, #4
 8002f56:	6018      	str	r0, [r3, #0]
 8002f58:	6813      	ldr	r3, [r2, #0]
 8002f5a:	d0f6      	beq.n	8002f4a <_printf_i+0x1a6>
 8002f5c:	8019      	strh	r1, [r3, #0]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	6123      	str	r3, [r4, #16]
 8002f62:	4675      	mov	r5, lr
 8002f64:	e7b1      	b.n	8002eca <_printf_i+0x126>
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	1d11      	adds	r1, r2, #4
 8002f6a:	6019      	str	r1, [r3, #0]
 8002f6c:	6815      	ldr	r5, [r2, #0]
 8002f6e:	6862      	ldr	r2, [r4, #4]
 8002f70:	2100      	movs	r1, #0
 8002f72:	4628      	mov	r0, r5
 8002f74:	f7fd f934 	bl	80001e0 <memchr>
 8002f78:	b108      	cbz	r0, 8002f7e <_printf_i+0x1da>
 8002f7a:	1b40      	subs	r0, r0, r5
 8002f7c:	6060      	str	r0, [r4, #4]
 8002f7e:	6863      	ldr	r3, [r4, #4]
 8002f80:	6123      	str	r3, [r4, #16]
 8002f82:	2300      	movs	r3, #0
 8002f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f88:	e79f      	b.n	8002eca <_printf_i+0x126>
 8002f8a:	6923      	ldr	r3, [r4, #16]
 8002f8c:	462a      	mov	r2, r5
 8002f8e:	4639      	mov	r1, r7
 8002f90:	4630      	mov	r0, r6
 8002f92:	47c0      	blx	r8
 8002f94:	3001      	adds	r0, #1
 8002f96:	d0a2      	beq.n	8002ede <_printf_i+0x13a>
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	079b      	lsls	r3, r3, #30
 8002f9c:	d507      	bpl.n	8002fae <_printf_i+0x20a>
 8002f9e:	2500      	movs	r5, #0
 8002fa0:	f104 0919 	add.w	r9, r4, #25
 8002fa4:	68e3      	ldr	r3, [r4, #12]
 8002fa6:	9a03      	ldr	r2, [sp, #12]
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	429d      	cmp	r5, r3
 8002fac:	db05      	blt.n	8002fba <_printf_i+0x216>
 8002fae:	68e0      	ldr	r0, [r4, #12]
 8002fb0:	9b03      	ldr	r3, [sp, #12]
 8002fb2:	4298      	cmp	r0, r3
 8002fb4:	bfb8      	it	lt
 8002fb6:	4618      	movlt	r0, r3
 8002fb8:	e793      	b.n	8002ee2 <_printf_i+0x13e>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	464a      	mov	r2, r9
 8002fbe:	4639      	mov	r1, r7
 8002fc0:	4630      	mov	r0, r6
 8002fc2:	47c0      	blx	r8
 8002fc4:	3001      	adds	r0, #1
 8002fc6:	d08a      	beq.n	8002ede <_printf_i+0x13a>
 8002fc8:	3501      	adds	r5, #1
 8002fca:	e7eb      	b.n	8002fa4 <_printf_i+0x200>
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1a7      	bne.n	8002f20 <_printf_i+0x17c>
 8002fd0:	780b      	ldrb	r3, [r1, #0]
 8002fd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fd6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fda:	e765      	b.n	8002ea8 <_printf_i+0x104>
 8002fdc:	080055a9 	.word	0x080055a9
 8002fe0:	08005598 	.word	0x08005598

08002fe4 <sniprintf>:
 8002fe4:	b40c      	push	{r2, r3}
 8002fe6:	b530      	push	{r4, r5, lr}
 8002fe8:	4b17      	ldr	r3, [pc, #92]	; (8003048 <sniprintf+0x64>)
 8002fea:	1e0c      	subs	r4, r1, #0
 8002fec:	b09d      	sub	sp, #116	; 0x74
 8002fee:	681d      	ldr	r5, [r3, #0]
 8002ff0:	da08      	bge.n	8003004 <sniprintf+0x20>
 8002ff2:	238b      	movs	r3, #139	; 0x8b
 8002ff4:	602b      	str	r3, [r5, #0]
 8002ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8002ffa:	b01d      	add	sp, #116	; 0x74
 8002ffc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003000:	b002      	add	sp, #8
 8003002:	4770      	bx	lr
 8003004:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003008:	f8ad 3014 	strh.w	r3, [sp, #20]
 800300c:	bf14      	ite	ne
 800300e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003012:	4623      	moveq	r3, r4
 8003014:	9304      	str	r3, [sp, #16]
 8003016:	9307      	str	r3, [sp, #28]
 8003018:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800301c:	9002      	str	r0, [sp, #8]
 800301e:	9006      	str	r0, [sp, #24]
 8003020:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003024:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003026:	ab21      	add	r3, sp, #132	; 0x84
 8003028:	a902      	add	r1, sp, #8
 800302a:	4628      	mov	r0, r5
 800302c:	9301      	str	r3, [sp, #4]
 800302e:	f001 fa71 	bl	8004514 <_svfiprintf_r>
 8003032:	1c43      	adds	r3, r0, #1
 8003034:	bfbc      	itt	lt
 8003036:	238b      	movlt	r3, #139	; 0x8b
 8003038:	602b      	strlt	r3, [r5, #0]
 800303a:	2c00      	cmp	r4, #0
 800303c:	d0dd      	beq.n	8002ffa <sniprintf+0x16>
 800303e:	9b02      	ldr	r3, [sp, #8]
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
 8003044:	e7d9      	b.n	8002ffa <sniprintf+0x16>
 8003046:	bf00      	nop
 8003048:	2000001c 	.word	0x2000001c

0800304c <quorem>:
 800304c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003050:	6903      	ldr	r3, [r0, #16]
 8003052:	690c      	ldr	r4, [r1, #16]
 8003054:	429c      	cmp	r4, r3
 8003056:	4680      	mov	r8, r0
 8003058:	f300 8082 	bgt.w	8003160 <quorem+0x114>
 800305c:	3c01      	subs	r4, #1
 800305e:	f101 0714 	add.w	r7, r1, #20
 8003062:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003066:	f100 0614 	add.w	r6, r0, #20
 800306a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800306e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003072:	eb06 030e 	add.w	r3, r6, lr
 8003076:	3501      	adds	r5, #1
 8003078:	eb07 090e 	add.w	r9, r7, lr
 800307c:	9301      	str	r3, [sp, #4]
 800307e:	fbb0 f5f5 	udiv	r5, r0, r5
 8003082:	b395      	cbz	r5, 80030ea <quorem+0x9e>
 8003084:	f04f 0a00 	mov.w	sl, #0
 8003088:	4638      	mov	r0, r7
 800308a:	46b4      	mov	ip, r6
 800308c:	46d3      	mov	fp, sl
 800308e:	f850 2b04 	ldr.w	r2, [r0], #4
 8003092:	b293      	uxth	r3, r2
 8003094:	fb05 a303 	mla	r3, r5, r3, sl
 8003098:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800309c:	b29b      	uxth	r3, r3
 800309e:	ebab 0303 	sub.w	r3, fp, r3
 80030a2:	0c12      	lsrs	r2, r2, #16
 80030a4:	f8bc b000 	ldrh.w	fp, [ip]
 80030a8:	fb05 a202 	mla	r2, r5, r2, sl
 80030ac:	fa13 f38b 	uxtah	r3, r3, fp
 80030b0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80030b4:	fa1f fb82 	uxth.w	fp, r2
 80030b8:	f8dc 2000 	ldr.w	r2, [ip]
 80030bc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80030c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80030ca:	4581      	cmp	r9, r0
 80030cc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80030d0:	f84c 3b04 	str.w	r3, [ip], #4
 80030d4:	d2db      	bcs.n	800308e <quorem+0x42>
 80030d6:	f856 300e 	ldr.w	r3, [r6, lr]
 80030da:	b933      	cbnz	r3, 80030ea <quorem+0x9e>
 80030dc:	9b01      	ldr	r3, [sp, #4]
 80030de:	3b04      	subs	r3, #4
 80030e0:	429e      	cmp	r6, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	d330      	bcc.n	8003148 <quorem+0xfc>
 80030e6:	f8c8 4010 	str.w	r4, [r8, #16]
 80030ea:	4640      	mov	r0, r8
 80030ec:	f001 f835 	bl	800415a <__mcmp>
 80030f0:	2800      	cmp	r0, #0
 80030f2:	db25      	blt.n	8003140 <quorem+0xf4>
 80030f4:	3501      	adds	r5, #1
 80030f6:	4630      	mov	r0, r6
 80030f8:	f04f 0e00 	mov.w	lr, #0
 80030fc:	f857 2b04 	ldr.w	r2, [r7], #4
 8003100:	f8d0 c000 	ldr.w	ip, [r0]
 8003104:	b293      	uxth	r3, r2
 8003106:	ebae 0303 	sub.w	r3, lr, r3
 800310a:	0c12      	lsrs	r2, r2, #16
 800310c:	fa13 f38c 	uxtah	r3, r3, ip
 8003110:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003114:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003118:	b29b      	uxth	r3, r3
 800311a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800311e:	45b9      	cmp	r9, r7
 8003120:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003124:	f840 3b04 	str.w	r3, [r0], #4
 8003128:	d2e8      	bcs.n	80030fc <quorem+0xb0>
 800312a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800312e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003132:	b92a      	cbnz	r2, 8003140 <quorem+0xf4>
 8003134:	3b04      	subs	r3, #4
 8003136:	429e      	cmp	r6, r3
 8003138:	461a      	mov	r2, r3
 800313a:	d30b      	bcc.n	8003154 <quorem+0x108>
 800313c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003140:	4628      	mov	r0, r5
 8003142:	b003      	add	sp, #12
 8003144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003148:	6812      	ldr	r2, [r2, #0]
 800314a:	3b04      	subs	r3, #4
 800314c:	2a00      	cmp	r2, #0
 800314e:	d1ca      	bne.n	80030e6 <quorem+0x9a>
 8003150:	3c01      	subs	r4, #1
 8003152:	e7c5      	b.n	80030e0 <quorem+0x94>
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	3b04      	subs	r3, #4
 8003158:	2a00      	cmp	r2, #0
 800315a:	d1ef      	bne.n	800313c <quorem+0xf0>
 800315c:	3c01      	subs	r4, #1
 800315e:	e7ea      	b.n	8003136 <quorem+0xea>
 8003160:	2000      	movs	r0, #0
 8003162:	e7ee      	b.n	8003142 <quorem+0xf6>
 8003164:	0000      	movs	r0, r0
	...

08003168 <_dtoa_r>:
 8003168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800316c:	ec57 6b10 	vmov	r6, r7, d0
 8003170:	b097      	sub	sp, #92	; 0x5c
 8003172:	e9cd 6700 	strd	r6, r7, [sp]
 8003176:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003178:	9107      	str	r1, [sp, #28]
 800317a:	4604      	mov	r4, r0
 800317c:	920a      	str	r2, [sp, #40]	; 0x28
 800317e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003180:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8003182:	b93e      	cbnz	r6, 8003194 <_dtoa_r+0x2c>
 8003184:	2010      	movs	r0, #16
 8003186:	f000 fdcb 	bl	8003d20 <malloc>
 800318a:	6260      	str	r0, [r4, #36]	; 0x24
 800318c:	6046      	str	r6, [r0, #4]
 800318e:	6086      	str	r6, [r0, #8]
 8003190:	6006      	str	r6, [r0, #0]
 8003192:	60c6      	str	r6, [r0, #12]
 8003194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003196:	6819      	ldr	r1, [r3, #0]
 8003198:	b151      	cbz	r1, 80031b0 <_dtoa_r+0x48>
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	604a      	str	r2, [r1, #4]
 800319e:	2301      	movs	r3, #1
 80031a0:	4093      	lsls	r3, r2
 80031a2:	608b      	str	r3, [r1, #8]
 80031a4:	4620      	mov	r0, r4
 80031a6:	f000 fe02 	bl	8003dae <_Bfree>
 80031aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	9b01      	ldr	r3, [sp, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	bfbf      	itttt	lt
 80031b6:	2301      	movlt	r3, #1
 80031b8:	602b      	strlt	r3, [r5, #0]
 80031ba:	9b01      	ldrlt	r3, [sp, #4]
 80031bc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80031c0:	bfb2      	itee	lt
 80031c2:	9301      	strlt	r3, [sp, #4]
 80031c4:	2300      	movge	r3, #0
 80031c6:	602b      	strge	r3, [r5, #0]
 80031c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80031cc:	4ba8      	ldr	r3, [pc, #672]	; (8003470 <_dtoa_r+0x308>)
 80031ce:	ea33 0308 	bics.w	r3, r3, r8
 80031d2:	d11b      	bne.n	800320c <_dtoa_r+0xa4>
 80031d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80031d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	9b00      	ldr	r3, [sp, #0]
 80031de:	b923      	cbnz	r3, 80031ea <_dtoa_r+0x82>
 80031e0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80031e4:	2800      	cmp	r0, #0
 80031e6:	f000 8578 	beq.w	8003cda <_dtoa_r+0xb72>
 80031ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80031ec:	b953      	cbnz	r3, 8003204 <_dtoa_r+0x9c>
 80031ee:	4ba1      	ldr	r3, [pc, #644]	; (8003474 <_dtoa_r+0x30c>)
 80031f0:	e021      	b.n	8003236 <_dtoa_r+0xce>
 80031f2:	4ba1      	ldr	r3, [pc, #644]	; (8003478 <_dtoa_r+0x310>)
 80031f4:	9302      	str	r3, [sp, #8]
 80031f6:	3308      	adds	r3, #8
 80031f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	9802      	ldr	r0, [sp, #8]
 80031fe:	b017      	add	sp, #92	; 0x5c
 8003200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003204:	4b9b      	ldr	r3, [pc, #620]	; (8003474 <_dtoa_r+0x30c>)
 8003206:	9302      	str	r3, [sp, #8]
 8003208:	3303      	adds	r3, #3
 800320a:	e7f5      	b.n	80031f8 <_dtoa_r+0x90>
 800320c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003210:	2200      	movs	r2, #0
 8003212:	2300      	movs	r3, #0
 8003214:	4630      	mov	r0, r6
 8003216:	4639      	mov	r1, r7
 8003218:	f7fd fc52 	bl	8000ac0 <__aeabi_dcmpeq>
 800321c:	4681      	mov	r9, r0
 800321e:	b160      	cbz	r0, 800323a <_dtoa_r+0xd2>
 8003220:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003222:	2301      	movs	r3, #1
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 8553 	beq.w	8003cd4 <_dtoa_r+0xb6c>
 800322e:	4b93      	ldr	r3, [pc, #588]	; (800347c <_dtoa_r+0x314>)
 8003230:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	3b01      	subs	r3, #1
 8003236:	9302      	str	r3, [sp, #8]
 8003238:	e7e0      	b.n	80031fc <_dtoa_r+0x94>
 800323a:	aa14      	add	r2, sp, #80	; 0x50
 800323c:	a915      	add	r1, sp, #84	; 0x54
 800323e:	ec47 6b10 	vmov	d0, r6, r7
 8003242:	4620      	mov	r0, r4
 8003244:	f001 f801 	bl	800424a <__d2b>
 8003248:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800324c:	4682      	mov	sl, r0
 800324e:	2d00      	cmp	r5, #0
 8003250:	d07e      	beq.n	8003350 <_dtoa_r+0x1e8>
 8003252:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003256:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800325a:	4630      	mov	r0, r6
 800325c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003260:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003264:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8003268:	2200      	movs	r2, #0
 800326a:	4b85      	ldr	r3, [pc, #532]	; (8003480 <_dtoa_r+0x318>)
 800326c:	f7fd f80c 	bl	8000288 <__aeabi_dsub>
 8003270:	a379      	add	r3, pc, #484	; (adr r3, 8003458 <_dtoa_r+0x2f0>)
 8003272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003276:	f7fd f9bb 	bl	80005f0 <__aeabi_dmul>
 800327a:	a379      	add	r3, pc, #484	; (adr r3, 8003460 <_dtoa_r+0x2f8>)
 800327c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003280:	f7fd f804 	bl	800028c <__adddf3>
 8003284:	4606      	mov	r6, r0
 8003286:	4628      	mov	r0, r5
 8003288:	460f      	mov	r7, r1
 800328a:	f7fd f94b 	bl	8000524 <__aeabi_i2d>
 800328e:	a376      	add	r3, pc, #472	; (adr r3, 8003468 <_dtoa_r+0x300>)
 8003290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003294:	f7fd f9ac 	bl	80005f0 <__aeabi_dmul>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4630      	mov	r0, r6
 800329e:	4639      	mov	r1, r7
 80032a0:	f7fc fff4 	bl	800028c <__adddf3>
 80032a4:	4606      	mov	r6, r0
 80032a6:	460f      	mov	r7, r1
 80032a8:	f7fd fc52 	bl	8000b50 <__aeabi_d2iz>
 80032ac:	2200      	movs	r2, #0
 80032ae:	4683      	mov	fp, r0
 80032b0:	2300      	movs	r3, #0
 80032b2:	4630      	mov	r0, r6
 80032b4:	4639      	mov	r1, r7
 80032b6:	f7fd fc0d 	bl	8000ad4 <__aeabi_dcmplt>
 80032ba:	b158      	cbz	r0, 80032d4 <_dtoa_r+0x16c>
 80032bc:	4658      	mov	r0, fp
 80032be:	f7fd f931 	bl	8000524 <__aeabi_i2d>
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	4630      	mov	r0, r6
 80032c8:	4639      	mov	r1, r7
 80032ca:	f7fd fbf9 	bl	8000ac0 <__aeabi_dcmpeq>
 80032ce:	b908      	cbnz	r0, 80032d4 <_dtoa_r+0x16c>
 80032d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80032d4:	f1bb 0f16 	cmp.w	fp, #22
 80032d8:	d859      	bhi.n	800338e <_dtoa_r+0x226>
 80032da:	496a      	ldr	r1, [pc, #424]	; (8003484 <_dtoa_r+0x31c>)
 80032dc:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80032e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80032e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80032e8:	f7fd fc12 	bl	8000b10 <__aeabi_dcmpgt>
 80032ec:	2800      	cmp	r0, #0
 80032ee:	d050      	beq.n	8003392 <_dtoa_r+0x22a>
 80032f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80032f4:	2300      	movs	r3, #0
 80032f6:	930e      	str	r3, [sp, #56]	; 0x38
 80032f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80032fa:	1b5d      	subs	r5, r3, r5
 80032fc:	1e6b      	subs	r3, r5, #1
 80032fe:	9306      	str	r3, [sp, #24]
 8003300:	bf45      	ittet	mi
 8003302:	f1c5 0301 	rsbmi	r3, r5, #1
 8003306:	9305      	strmi	r3, [sp, #20]
 8003308:	2300      	movpl	r3, #0
 800330a:	2300      	movmi	r3, #0
 800330c:	bf4c      	ite	mi
 800330e:	9306      	strmi	r3, [sp, #24]
 8003310:	9305      	strpl	r3, [sp, #20]
 8003312:	f1bb 0f00 	cmp.w	fp, #0
 8003316:	db3e      	blt.n	8003396 <_dtoa_r+0x22e>
 8003318:	9b06      	ldr	r3, [sp, #24]
 800331a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800331e:	445b      	add	r3, fp
 8003320:	9306      	str	r3, [sp, #24]
 8003322:	2300      	movs	r3, #0
 8003324:	9308      	str	r3, [sp, #32]
 8003326:	9b07      	ldr	r3, [sp, #28]
 8003328:	2b09      	cmp	r3, #9
 800332a:	f200 80af 	bhi.w	800348c <_dtoa_r+0x324>
 800332e:	2b05      	cmp	r3, #5
 8003330:	bfc4      	itt	gt
 8003332:	3b04      	subgt	r3, #4
 8003334:	9307      	strgt	r3, [sp, #28]
 8003336:	9b07      	ldr	r3, [sp, #28]
 8003338:	f1a3 0302 	sub.w	r3, r3, #2
 800333c:	bfcc      	ite	gt
 800333e:	2600      	movgt	r6, #0
 8003340:	2601      	movle	r6, #1
 8003342:	2b03      	cmp	r3, #3
 8003344:	f200 80ae 	bhi.w	80034a4 <_dtoa_r+0x33c>
 8003348:	e8df f003 	tbb	[pc, r3]
 800334c:	772f8482 	.word	0x772f8482
 8003350:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003352:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003354:	441d      	add	r5, r3
 8003356:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800335a:	2b20      	cmp	r3, #32
 800335c:	dd11      	ble.n	8003382 <_dtoa_r+0x21a>
 800335e:	9a00      	ldr	r2, [sp, #0]
 8003360:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003364:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003368:	fa22 f000 	lsr.w	r0, r2, r0
 800336c:	fa08 f303 	lsl.w	r3, r8, r3
 8003370:	4318      	orrs	r0, r3
 8003372:	f7fd f8c7 	bl	8000504 <__aeabi_ui2d>
 8003376:	2301      	movs	r3, #1
 8003378:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800337c:	3d01      	subs	r5, #1
 800337e:	9312      	str	r3, [sp, #72]	; 0x48
 8003380:	e772      	b.n	8003268 <_dtoa_r+0x100>
 8003382:	f1c3 0020 	rsb	r0, r3, #32
 8003386:	9b00      	ldr	r3, [sp, #0]
 8003388:	fa03 f000 	lsl.w	r0, r3, r0
 800338c:	e7f1      	b.n	8003372 <_dtoa_r+0x20a>
 800338e:	2301      	movs	r3, #1
 8003390:	e7b1      	b.n	80032f6 <_dtoa_r+0x18e>
 8003392:	900e      	str	r0, [sp, #56]	; 0x38
 8003394:	e7b0      	b.n	80032f8 <_dtoa_r+0x190>
 8003396:	9b05      	ldr	r3, [sp, #20]
 8003398:	eba3 030b 	sub.w	r3, r3, fp
 800339c:	9305      	str	r3, [sp, #20]
 800339e:	f1cb 0300 	rsb	r3, fp, #0
 80033a2:	9308      	str	r3, [sp, #32]
 80033a4:	2300      	movs	r3, #0
 80033a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80033a8:	e7bd      	b.n	8003326 <_dtoa_r+0x1be>
 80033aa:	2301      	movs	r3, #1
 80033ac:	9309      	str	r3, [sp, #36]	; 0x24
 80033ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	dd7a      	ble.n	80034aa <_dtoa_r+0x342>
 80033b4:	9304      	str	r3, [sp, #16]
 80033b6:	9303      	str	r3, [sp, #12]
 80033b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80033ba:	2200      	movs	r2, #0
 80033bc:	606a      	str	r2, [r5, #4]
 80033be:	2104      	movs	r1, #4
 80033c0:	f101 0214 	add.w	r2, r1, #20
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d975      	bls.n	80034b4 <_dtoa_r+0x34c>
 80033c8:	6869      	ldr	r1, [r5, #4]
 80033ca:	4620      	mov	r0, r4
 80033cc:	f000 fcbb 	bl	8003d46 <_Balloc>
 80033d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033d2:	6028      	str	r0, [r5, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	9302      	str	r3, [sp, #8]
 80033d8:	9b03      	ldr	r3, [sp, #12]
 80033da:	2b0e      	cmp	r3, #14
 80033dc:	f200 80e5 	bhi.w	80035aa <_dtoa_r+0x442>
 80033e0:	2e00      	cmp	r6, #0
 80033e2:	f000 80e2 	beq.w	80035aa <_dtoa_r+0x442>
 80033e6:	ed9d 7b00 	vldr	d7, [sp]
 80033ea:	f1bb 0f00 	cmp.w	fp, #0
 80033ee:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80033f2:	dd74      	ble.n	80034de <_dtoa_r+0x376>
 80033f4:	4a23      	ldr	r2, [pc, #140]	; (8003484 <_dtoa_r+0x31c>)
 80033f6:	f00b 030f 	and.w	r3, fp, #15
 80033fa:	ea4f 162b 	mov.w	r6, fp, asr #4
 80033fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003402:	06f0      	lsls	r0, r6, #27
 8003404:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003408:	d559      	bpl.n	80034be <_dtoa_r+0x356>
 800340a:	4b1f      	ldr	r3, [pc, #124]	; (8003488 <_dtoa_r+0x320>)
 800340c:	ec51 0b17 	vmov	r0, r1, d7
 8003410:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003414:	f7fd fa16 	bl	8000844 <__aeabi_ddiv>
 8003418:	e9cd 0100 	strd	r0, r1, [sp]
 800341c:	f006 060f 	and.w	r6, r6, #15
 8003420:	2503      	movs	r5, #3
 8003422:	4f19      	ldr	r7, [pc, #100]	; (8003488 <_dtoa_r+0x320>)
 8003424:	2e00      	cmp	r6, #0
 8003426:	d14c      	bne.n	80034c2 <_dtoa_r+0x35a>
 8003428:	4642      	mov	r2, r8
 800342a:	464b      	mov	r3, r9
 800342c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003430:	f7fd fa08 	bl	8000844 <__aeabi_ddiv>
 8003434:	e9cd 0100 	strd	r0, r1, [sp]
 8003438:	e06a      	b.n	8003510 <_dtoa_r+0x3a8>
 800343a:	2301      	movs	r3, #1
 800343c:	9309      	str	r3, [sp, #36]	; 0x24
 800343e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003440:	445b      	add	r3, fp
 8003442:	9304      	str	r3, [sp, #16]
 8003444:	3301      	adds	r3, #1
 8003446:	2b01      	cmp	r3, #1
 8003448:	9303      	str	r3, [sp, #12]
 800344a:	bfb8      	it	lt
 800344c:	2301      	movlt	r3, #1
 800344e:	e7b3      	b.n	80033b8 <_dtoa_r+0x250>
 8003450:	2300      	movs	r3, #0
 8003452:	e7ab      	b.n	80033ac <_dtoa_r+0x244>
 8003454:	2300      	movs	r3, #0
 8003456:	e7f1      	b.n	800343c <_dtoa_r+0x2d4>
 8003458:	636f4361 	.word	0x636f4361
 800345c:	3fd287a7 	.word	0x3fd287a7
 8003460:	8b60c8b3 	.word	0x8b60c8b3
 8003464:	3fc68a28 	.word	0x3fc68a28
 8003468:	509f79fb 	.word	0x509f79fb
 800346c:	3fd34413 	.word	0x3fd34413
 8003470:	7ff00000 	.word	0x7ff00000
 8003474:	080055c3 	.word	0x080055c3
 8003478:	080055ba 	.word	0x080055ba
 800347c:	08005597 	.word	0x08005597
 8003480:	3ff80000 	.word	0x3ff80000
 8003484:	080055f0 	.word	0x080055f0
 8003488:	080055c8 	.word	0x080055c8
 800348c:	2601      	movs	r6, #1
 800348e:	2300      	movs	r3, #0
 8003490:	9307      	str	r3, [sp, #28]
 8003492:	9609      	str	r6, [sp, #36]	; 0x24
 8003494:	f04f 33ff 	mov.w	r3, #4294967295
 8003498:	9304      	str	r3, [sp, #16]
 800349a:	9303      	str	r3, [sp, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	2312      	movs	r3, #18
 80034a0:	920a      	str	r2, [sp, #40]	; 0x28
 80034a2:	e789      	b.n	80033b8 <_dtoa_r+0x250>
 80034a4:	2301      	movs	r3, #1
 80034a6:	9309      	str	r3, [sp, #36]	; 0x24
 80034a8:	e7f4      	b.n	8003494 <_dtoa_r+0x32c>
 80034aa:	2301      	movs	r3, #1
 80034ac:	9304      	str	r3, [sp, #16]
 80034ae:	9303      	str	r3, [sp, #12]
 80034b0:	461a      	mov	r2, r3
 80034b2:	e7f5      	b.n	80034a0 <_dtoa_r+0x338>
 80034b4:	686a      	ldr	r2, [r5, #4]
 80034b6:	3201      	adds	r2, #1
 80034b8:	606a      	str	r2, [r5, #4]
 80034ba:	0049      	lsls	r1, r1, #1
 80034bc:	e780      	b.n	80033c0 <_dtoa_r+0x258>
 80034be:	2502      	movs	r5, #2
 80034c0:	e7af      	b.n	8003422 <_dtoa_r+0x2ba>
 80034c2:	07f1      	lsls	r1, r6, #31
 80034c4:	d508      	bpl.n	80034d8 <_dtoa_r+0x370>
 80034c6:	4640      	mov	r0, r8
 80034c8:	4649      	mov	r1, r9
 80034ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034ce:	f7fd f88f 	bl	80005f0 <__aeabi_dmul>
 80034d2:	3501      	adds	r5, #1
 80034d4:	4680      	mov	r8, r0
 80034d6:	4689      	mov	r9, r1
 80034d8:	1076      	asrs	r6, r6, #1
 80034da:	3708      	adds	r7, #8
 80034dc:	e7a2      	b.n	8003424 <_dtoa_r+0x2bc>
 80034de:	f000 809d 	beq.w	800361c <_dtoa_r+0x4b4>
 80034e2:	f1cb 0600 	rsb	r6, fp, #0
 80034e6:	4b9f      	ldr	r3, [pc, #636]	; (8003764 <_dtoa_r+0x5fc>)
 80034e8:	4f9f      	ldr	r7, [pc, #636]	; (8003768 <_dtoa_r+0x600>)
 80034ea:	f006 020f 	and.w	r2, r6, #15
 80034ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80034f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80034fa:	f7fd f879 	bl	80005f0 <__aeabi_dmul>
 80034fe:	e9cd 0100 	strd	r0, r1, [sp]
 8003502:	1136      	asrs	r6, r6, #4
 8003504:	2300      	movs	r3, #0
 8003506:	2502      	movs	r5, #2
 8003508:	2e00      	cmp	r6, #0
 800350a:	d17c      	bne.n	8003606 <_dtoa_r+0x49e>
 800350c:	2b00      	cmp	r3, #0
 800350e:	d191      	bne.n	8003434 <_dtoa_r+0x2cc>
 8003510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 8084 	beq.w	8003620 <_dtoa_r+0x4b8>
 8003518:	e9dd 8900 	ldrd	r8, r9, [sp]
 800351c:	2200      	movs	r2, #0
 800351e:	4b93      	ldr	r3, [pc, #588]	; (800376c <_dtoa_r+0x604>)
 8003520:	4640      	mov	r0, r8
 8003522:	4649      	mov	r1, r9
 8003524:	f7fd fad6 	bl	8000ad4 <__aeabi_dcmplt>
 8003528:	2800      	cmp	r0, #0
 800352a:	d079      	beq.n	8003620 <_dtoa_r+0x4b8>
 800352c:	9b03      	ldr	r3, [sp, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d076      	beq.n	8003620 <_dtoa_r+0x4b8>
 8003532:	9b04      	ldr	r3, [sp, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	dd34      	ble.n	80035a2 <_dtoa_r+0x43a>
 8003538:	2200      	movs	r2, #0
 800353a:	4b8d      	ldr	r3, [pc, #564]	; (8003770 <_dtoa_r+0x608>)
 800353c:	4640      	mov	r0, r8
 800353e:	4649      	mov	r1, r9
 8003540:	f7fd f856 	bl	80005f0 <__aeabi_dmul>
 8003544:	e9cd 0100 	strd	r0, r1, [sp]
 8003548:	9e04      	ldr	r6, [sp, #16]
 800354a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800354e:	3501      	adds	r5, #1
 8003550:	4628      	mov	r0, r5
 8003552:	f7fc ffe7 	bl	8000524 <__aeabi_i2d>
 8003556:	e9dd 2300 	ldrd	r2, r3, [sp]
 800355a:	f7fd f849 	bl	80005f0 <__aeabi_dmul>
 800355e:	2200      	movs	r2, #0
 8003560:	4b84      	ldr	r3, [pc, #528]	; (8003774 <_dtoa_r+0x60c>)
 8003562:	f7fc fe93 	bl	800028c <__adddf3>
 8003566:	4680      	mov	r8, r0
 8003568:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800356c:	2e00      	cmp	r6, #0
 800356e:	d15a      	bne.n	8003626 <_dtoa_r+0x4be>
 8003570:	2200      	movs	r2, #0
 8003572:	4b81      	ldr	r3, [pc, #516]	; (8003778 <_dtoa_r+0x610>)
 8003574:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003578:	f7fc fe86 	bl	8000288 <__aeabi_dsub>
 800357c:	4642      	mov	r2, r8
 800357e:	464b      	mov	r3, r9
 8003580:	e9cd 0100 	strd	r0, r1, [sp]
 8003584:	f7fd fac4 	bl	8000b10 <__aeabi_dcmpgt>
 8003588:	2800      	cmp	r0, #0
 800358a:	f040 829b 	bne.w	8003ac4 <_dtoa_r+0x95c>
 800358e:	4642      	mov	r2, r8
 8003590:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003594:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003598:	f7fd fa9c 	bl	8000ad4 <__aeabi_dcmplt>
 800359c:	2800      	cmp	r0, #0
 800359e:	f040 828f 	bne.w	8003ac0 <_dtoa_r+0x958>
 80035a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80035a6:	e9cd 2300 	strd	r2, r3, [sp]
 80035aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f2c0 8150 	blt.w	8003852 <_dtoa_r+0x6ea>
 80035b2:	f1bb 0f0e 	cmp.w	fp, #14
 80035b6:	f300 814c 	bgt.w	8003852 <_dtoa_r+0x6ea>
 80035ba:	4b6a      	ldr	r3, [pc, #424]	; (8003764 <_dtoa_r+0x5fc>)
 80035bc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80035c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80035c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f280 80da 	bge.w	8003780 <_dtoa_r+0x618>
 80035cc:	9b03      	ldr	r3, [sp, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f300 80d6 	bgt.w	8003780 <_dtoa_r+0x618>
 80035d4:	f040 8273 	bne.w	8003abe <_dtoa_r+0x956>
 80035d8:	2200      	movs	r2, #0
 80035da:	4b67      	ldr	r3, [pc, #412]	; (8003778 <_dtoa_r+0x610>)
 80035dc:	4640      	mov	r0, r8
 80035de:	4649      	mov	r1, r9
 80035e0:	f7fd f806 	bl	80005f0 <__aeabi_dmul>
 80035e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80035e8:	f7fd fa88 	bl	8000afc <__aeabi_dcmpge>
 80035ec:	9e03      	ldr	r6, [sp, #12]
 80035ee:	4637      	mov	r7, r6
 80035f0:	2800      	cmp	r0, #0
 80035f2:	f040 824a 	bne.w	8003a8a <_dtoa_r+0x922>
 80035f6:	9b02      	ldr	r3, [sp, #8]
 80035f8:	9a02      	ldr	r2, [sp, #8]
 80035fa:	1c5d      	adds	r5, r3, #1
 80035fc:	2331      	movs	r3, #49	; 0x31
 80035fe:	7013      	strb	r3, [r2, #0]
 8003600:	f10b 0b01 	add.w	fp, fp, #1
 8003604:	e245      	b.n	8003a92 <_dtoa_r+0x92a>
 8003606:	07f2      	lsls	r2, r6, #31
 8003608:	d505      	bpl.n	8003616 <_dtoa_r+0x4ae>
 800360a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800360e:	f7fc ffef 	bl	80005f0 <__aeabi_dmul>
 8003612:	3501      	adds	r5, #1
 8003614:	2301      	movs	r3, #1
 8003616:	1076      	asrs	r6, r6, #1
 8003618:	3708      	adds	r7, #8
 800361a:	e775      	b.n	8003508 <_dtoa_r+0x3a0>
 800361c:	2502      	movs	r5, #2
 800361e:	e777      	b.n	8003510 <_dtoa_r+0x3a8>
 8003620:	465f      	mov	r7, fp
 8003622:	9e03      	ldr	r6, [sp, #12]
 8003624:	e794      	b.n	8003550 <_dtoa_r+0x3e8>
 8003626:	9a02      	ldr	r2, [sp, #8]
 8003628:	4b4e      	ldr	r3, [pc, #312]	; (8003764 <_dtoa_r+0x5fc>)
 800362a:	4432      	add	r2, r6
 800362c:	9213      	str	r2, [sp, #76]	; 0x4c
 800362e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003630:	1e71      	subs	r1, r6, #1
 8003632:	2a00      	cmp	r2, #0
 8003634:	d048      	beq.n	80036c8 <_dtoa_r+0x560>
 8003636:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800363a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363e:	2000      	movs	r0, #0
 8003640:	494e      	ldr	r1, [pc, #312]	; (800377c <_dtoa_r+0x614>)
 8003642:	f7fd f8ff 	bl	8000844 <__aeabi_ddiv>
 8003646:	4642      	mov	r2, r8
 8003648:	464b      	mov	r3, r9
 800364a:	f7fc fe1d 	bl	8000288 <__aeabi_dsub>
 800364e:	9d02      	ldr	r5, [sp, #8]
 8003650:	4680      	mov	r8, r0
 8003652:	4689      	mov	r9, r1
 8003654:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003658:	f7fd fa7a 	bl	8000b50 <__aeabi_d2iz>
 800365c:	4606      	mov	r6, r0
 800365e:	f7fc ff61 	bl	8000524 <__aeabi_i2d>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	e9dd 0100 	ldrd	r0, r1, [sp]
 800366a:	f7fc fe0d 	bl	8000288 <__aeabi_dsub>
 800366e:	3630      	adds	r6, #48	; 0x30
 8003670:	f805 6b01 	strb.w	r6, [r5], #1
 8003674:	4642      	mov	r2, r8
 8003676:	464b      	mov	r3, r9
 8003678:	e9cd 0100 	strd	r0, r1, [sp]
 800367c:	f7fd fa2a 	bl	8000ad4 <__aeabi_dcmplt>
 8003680:	2800      	cmp	r0, #0
 8003682:	d165      	bne.n	8003750 <_dtoa_r+0x5e8>
 8003684:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003688:	2000      	movs	r0, #0
 800368a:	4938      	ldr	r1, [pc, #224]	; (800376c <_dtoa_r+0x604>)
 800368c:	f7fc fdfc 	bl	8000288 <__aeabi_dsub>
 8003690:	4642      	mov	r2, r8
 8003692:	464b      	mov	r3, r9
 8003694:	f7fd fa1e 	bl	8000ad4 <__aeabi_dcmplt>
 8003698:	2800      	cmp	r0, #0
 800369a:	f040 80ba 	bne.w	8003812 <_dtoa_r+0x6aa>
 800369e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80036a0:	429d      	cmp	r5, r3
 80036a2:	f43f af7e 	beq.w	80035a2 <_dtoa_r+0x43a>
 80036a6:	2200      	movs	r2, #0
 80036a8:	4b31      	ldr	r3, [pc, #196]	; (8003770 <_dtoa_r+0x608>)
 80036aa:	4640      	mov	r0, r8
 80036ac:	4649      	mov	r1, r9
 80036ae:	f7fc ff9f 	bl	80005f0 <__aeabi_dmul>
 80036b2:	2200      	movs	r2, #0
 80036b4:	4680      	mov	r8, r0
 80036b6:	4689      	mov	r9, r1
 80036b8:	4b2d      	ldr	r3, [pc, #180]	; (8003770 <_dtoa_r+0x608>)
 80036ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80036be:	f7fc ff97 	bl	80005f0 <__aeabi_dmul>
 80036c2:	e9cd 0100 	strd	r0, r1, [sp]
 80036c6:	e7c5      	b.n	8003654 <_dtoa_r+0x4ec>
 80036c8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80036cc:	4642      	mov	r2, r8
 80036ce:	464b      	mov	r3, r9
 80036d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036d4:	f7fc ff8c 	bl	80005f0 <__aeabi_dmul>
 80036d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80036dc:	9d02      	ldr	r5, [sp, #8]
 80036de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80036e2:	f7fd fa35 	bl	8000b50 <__aeabi_d2iz>
 80036e6:	4606      	mov	r6, r0
 80036e8:	f7fc ff1c 	bl	8000524 <__aeabi_i2d>
 80036ec:	3630      	adds	r6, #48	; 0x30
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80036f6:	f7fc fdc7 	bl	8000288 <__aeabi_dsub>
 80036fa:	f805 6b01 	strb.w	r6, [r5], #1
 80036fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003700:	42ab      	cmp	r3, r5
 8003702:	4680      	mov	r8, r0
 8003704:	4689      	mov	r9, r1
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	d125      	bne.n	8003758 <_dtoa_r+0x5f0>
 800370c:	4b1b      	ldr	r3, [pc, #108]	; (800377c <_dtoa_r+0x614>)
 800370e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003712:	f7fc fdbb 	bl	800028c <__adddf3>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4640      	mov	r0, r8
 800371c:	4649      	mov	r1, r9
 800371e:	f7fd f9f7 	bl	8000b10 <__aeabi_dcmpgt>
 8003722:	2800      	cmp	r0, #0
 8003724:	d175      	bne.n	8003812 <_dtoa_r+0x6aa>
 8003726:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800372a:	2000      	movs	r0, #0
 800372c:	4913      	ldr	r1, [pc, #76]	; (800377c <_dtoa_r+0x614>)
 800372e:	f7fc fdab 	bl	8000288 <__aeabi_dsub>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	4640      	mov	r0, r8
 8003738:	4649      	mov	r1, r9
 800373a:	f7fd f9cb 	bl	8000ad4 <__aeabi_dcmplt>
 800373e:	2800      	cmp	r0, #0
 8003740:	f43f af2f 	beq.w	80035a2 <_dtoa_r+0x43a>
 8003744:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003748:	2b30      	cmp	r3, #48	; 0x30
 800374a:	f105 32ff 	add.w	r2, r5, #4294967295
 800374e:	d001      	beq.n	8003754 <_dtoa_r+0x5ec>
 8003750:	46bb      	mov	fp, r7
 8003752:	e04d      	b.n	80037f0 <_dtoa_r+0x688>
 8003754:	4615      	mov	r5, r2
 8003756:	e7f5      	b.n	8003744 <_dtoa_r+0x5dc>
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <_dtoa_r+0x608>)
 800375a:	f7fc ff49 	bl	80005f0 <__aeabi_dmul>
 800375e:	e9cd 0100 	strd	r0, r1, [sp]
 8003762:	e7bc      	b.n	80036de <_dtoa_r+0x576>
 8003764:	080055f0 	.word	0x080055f0
 8003768:	080055c8 	.word	0x080055c8
 800376c:	3ff00000 	.word	0x3ff00000
 8003770:	40240000 	.word	0x40240000
 8003774:	401c0000 	.word	0x401c0000
 8003778:	40140000 	.word	0x40140000
 800377c:	3fe00000 	.word	0x3fe00000
 8003780:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003784:	9d02      	ldr	r5, [sp, #8]
 8003786:	4642      	mov	r2, r8
 8003788:	464b      	mov	r3, r9
 800378a:	4630      	mov	r0, r6
 800378c:	4639      	mov	r1, r7
 800378e:	f7fd f859 	bl	8000844 <__aeabi_ddiv>
 8003792:	f7fd f9dd 	bl	8000b50 <__aeabi_d2iz>
 8003796:	9000      	str	r0, [sp, #0]
 8003798:	f7fc fec4 	bl	8000524 <__aeabi_i2d>
 800379c:	4642      	mov	r2, r8
 800379e:	464b      	mov	r3, r9
 80037a0:	f7fc ff26 	bl	80005f0 <__aeabi_dmul>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4630      	mov	r0, r6
 80037aa:	4639      	mov	r1, r7
 80037ac:	f7fc fd6c 	bl	8000288 <__aeabi_dsub>
 80037b0:	9e00      	ldr	r6, [sp, #0]
 80037b2:	9f03      	ldr	r7, [sp, #12]
 80037b4:	3630      	adds	r6, #48	; 0x30
 80037b6:	f805 6b01 	strb.w	r6, [r5], #1
 80037ba:	9e02      	ldr	r6, [sp, #8]
 80037bc:	1bae      	subs	r6, r5, r6
 80037be:	42b7      	cmp	r7, r6
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	d138      	bne.n	8003838 <_dtoa_r+0x6d0>
 80037c6:	f7fc fd61 	bl	800028c <__adddf3>
 80037ca:	4606      	mov	r6, r0
 80037cc:	460f      	mov	r7, r1
 80037ce:	4602      	mov	r2, r0
 80037d0:	460b      	mov	r3, r1
 80037d2:	4640      	mov	r0, r8
 80037d4:	4649      	mov	r1, r9
 80037d6:	f7fd f97d 	bl	8000ad4 <__aeabi_dcmplt>
 80037da:	b9c8      	cbnz	r0, 8003810 <_dtoa_r+0x6a8>
 80037dc:	4632      	mov	r2, r6
 80037de:	463b      	mov	r3, r7
 80037e0:	4640      	mov	r0, r8
 80037e2:	4649      	mov	r1, r9
 80037e4:	f7fd f96c 	bl	8000ac0 <__aeabi_dcmpeq>
 80037e8:	b110      	cbz	r0, 80037f0 <_dtoa_r+0x688>
 80037ea:	9b00      	ldr	r3, [sp, #0]
 80037ec:	07db      	lsls	r3, r3, #31
 80037ee:	d40f      	bmi.n	8003810 <_dtoa_r+0x6a8>
 80037f0:	4651      	mov	r1, sl
 80037f2:	4620      	mov	r0, r4
 80037f4:	f000 fadb 	bl	8003dae <_Bfree>
 80037f8:	2300      	movs	r3, #0
 80037fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80037fc:	702b      	strb	r3, [r5, #0]
 80037fe:	f10b 0301 	add.w	r3, fp, #1
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003806:	2b00      	cmp	r3, #0
 8003808:	f43f acf8 	beq.w	80031fc <_dtoa_r+0x94>
 800380c:	601d      	str	r5, [r3, #0]
 800380e:	e4f5      	b.n	80031fc <_dtoa_r+0x94>
 8003810:	465f      	mov	r7, fp
 8003812:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003816:	2a39      	cmp	r2, #57	; 0x39
 8003818:	f105 33ff 	add.w	r3, r5, #4294967295
 800381c:	d106      	bne.n	800382c <_dtoa_r+0x6c4>
 800381e:	9a02      	ldr	r2, [sp, #8]
 8003820:	429a      	cmp	r2, r3
 8003822:	d107      	bne.n	8003834 <_dtoa_r+0x6cc>
 8003824:	2330      	movs	r3, #48	; 0x30
 8003826:	7013      	strb	r3, [r2, #0]
 8003828:	3701      	adds	r7, #1
 800382a:	4613      	mov	r3, r2
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	3201      	adds	r2, #1
 8003830:	701a      	strb	r2, [r3, #0]
 8003832:	e78d      	b.n	8003750 <_dtoa_r+0x5e8>
 8003834:	461d      	mov	r5, r3
 8003836:	e7ec      	b.n	8003812 <_dtoa_r+0x6aa>
 8003838:	2200      	movs	r2, #0
 800383a:	4ba4      	ldr	r3, [pc, #656]	; (8003acc <_dtoa_r+0x964>)
 800383c:	f7fc fed8 	bl	80005f0 <__aeabi_dmul>
 8003840:	2200      	movs	r2, #0
 8003842:	2300      	movs	r3, #0
 8003844:	4606      	mov	r6, r0
 8003846:	460f      	mov	r7, r1
 8003848:	f7fd f93a 	bl	8000ac0 <__aeabi_dcmpeq>
 800384c:	2800      	cmp	r0, #0
 800384e:	d09a      	beq.n	8003786 <_dtoa_r+0x61e>
 8003850:	e7ce      	b.n	80037f0 <_dtoa_r+0x688>
 8003852:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003854:	2a00      	cmp	r2, #0
 8003856:	f000 80cd 	beq.w	80039f4 <_dtoa_r+0x88c>
 800385a:	9a07      	ldr	r2, [sp, #28]
 800385c:	2a01      	cmp	r2, #1
 800385e:	f300 80af 	bgt.w	80039c0 <_dtoa_r+0x858>
 8003862:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003864:	2a00      	cmp	r2, #0
 8003866:	f000 80a7 	beq.w	80039b8 <_dtoa_r+0x850>
 800386a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800386e:	9e08      	ldr	r6, [sp, #32]
 8003870:	9d05      	ldr	r5, [sp, #20]
 8003872:	9a05      	ldr	r2, [sp, #20]
 8003874:	441a      	add	r2, r3
 8003876:	9205      	str	r2, [sp, #20]
 8003878:	9a06      	ldr	r2, [sp, #24]
 800387a:	2101      	movs	r1, #1
 800387c:	441a      	add	r2, r3
 800387e:	4620      	mov	r0, r4
 8003880:	9206      	str	r2, [sp, #24]
 8003882:	f000 fb34 	bl	8003eee <__i2b>
 8003886:	4607      	mov	r7, r0
 8003888:	2d00      	cmp	r5, #0
 800388a:	dd0c      	ble.n	80038a6 <_dtoa_r+0x73e>
 800388c:	9b06      	ldr	r3, [sp, #24]
 800388e:	2b00      	cmp	r3, #0
 8003890:	dd09      	ble.n	80038a6 <_dtoa_r+0x73e>
 8003892:	42ab      	cmp	r3, r5
 8003894:	9a05      	ldr	r2, [sp, #20]
 8003896:	bfa8      	it	ge
 8003898:	462b      	movge	r3, r5
 800389a:	1ad2      	subs	r2, r2, r3
 800389c:	9205      	str	r2, [sp, #20]
 800389e:	9a06      	ldr	r2, [sp, #24]
 80038a0:	1aed      	subs	r5, r5, r3
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	9306      	str	r3, [sp, #24]
 80038a6:	9b08      	ldr	r3, [sp, #32]
 80038a8:	b1f3      	cbz	r3, 80038e8 <_dtoa_r+0x780>
 80038aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80a5 	beq.w	80039fc <_dtoa_r+0x894>
 80038b2:	2e00      	cmp	r6, #0
 80038b4:	dd10      	ble.n	80038d8 <_dtoa_r+0x770>
 80038b6:	4639      	mov	r1, r7
 80038b8:	4632      	mov	r2, r6
 80038ba:	4620      	mov	r0, r4
 80038bc:	f000 fbae 	bl	800401c <__pow5mult>
 80038c0:	4652      	mov	r2, sl
 80038c2:	4601      	mov	r1, r0
 80038c4:	4607      	mov	r7, r0
 80038c6:	4620      	mov	r0, r4
 80038c8:	f000 fb1a 	bl	8003f00 <__multiply>
 80038cc:	4651      	mov	r1, sl
 80038ce:	4680      	mov	r8, r0
 80038d0:	4620      	mov	r0, r4
 80038d2:	f000 fa6c 	bl	8003dae <_Bfree>
 80038d6:	46c2      	mov	sl, r8
 80038d8:	9b08      	ldr	r3, [sp, #32]
 80038da:	1b9a      	subs	r2, r3, r6
 80038dc:	d004      	beq.n	80038e8 <_dtoa_r+0x780>
 80038de:	4651      	mov	r1, sl
 80038e0:	4620      	mov	r0, r4
 80038e2:	f000 fb9b 	bl	800401c <__pow5mult>
 80038e6:	4682      	mov	sl, r0
 80038e8:	2101      	movs	r1, #1
 80038ea:	4620      	mov	r0, r4
 80038ec:	f000 faff 	bl	8003eee <__i2b>
 80038f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	4606      	mov	r6, r0
 80038f6:	f340 8083 	ble.w	8003a00 <_dtoa_r+0x898>
 80038fa:	461a      	mov	r2, r3
 80038fc:	4601      	mov	r1, r0
 80038fe:	4620      	mov	r0, r4
 8003900:	f000 fb8c 	bl	800401c <__pow5mult>
 8003904:	9b07      	ldr	r3, [sp, #28]
 8003906:	2b01      	cmp	r3, #1
 8003908:	4606      	mov	r6, r0
 800390a:	dd7c      	ble.n	8003a06 <_dtoa_r+0x89e>
 800390c:	f04f 0800 	mov.w	r8, #0
 8003910:	6933      	ldr	r3, [r6, #16]
 8003912:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003916:	6918      	ldr	r0, [r3, #16]
 8003918:	f000 fa9b 	bl	8003e52 <__hi0bits>
 800391c:	f1c0 0020 	rsb	r0, r0, #32
 8003920:	9b06      	ldr	r3, [sp, #24]
 8003922:	4418      	add	r0, r3
 8003924:	f010 001f 	ands.w	r0, r0, #31
 8003928:	f000 8096 	beq.w	8003a58 <_dtoa_r+0x8f0>
 800392c:	f1c0 0320 	rsb	r3, r0, #32
 8003930:	2b04      	cmp	r3, #4
 8003932:	f340 8087 	ble.w	8003a44 <_dtoa_r+0x8dc>
 8003936:	9b05      	ldr	r3, [sp, #20]
 8003938:	f1c0 001c 	rsb	r0, r0, #28
 800393c:	4403      	add	r3, r0
 800393e:	9305      	str	r3, [sp, #20]
 8003940:	9b06      	ldr	r3, [sp, #24]
 8003942:	4405      	add	r5, r0
 8003944:	4403      	add	r3, r0
 8003946:	9306      	str	r3, [sp, #24]
 8003948:	9b05      	ldr	r3, [sp, #20]
 800394a:	2b00      	cmp	r3, #0
 800394c:	dd05      	ble.n	800395a <_dtoa_r+0x7f2>
 800394e:	4651      	mov	r1, sl
 8003950:	461a      	mov	r2, r3
 8003952:	4620      	mov	r0, r4
 8003954:	f000 fbb0 	bl	80040b8 <__lshift>
 8003958:	4682      	mov	sl, r0
 800395a:	9b06      	ldr	r3, [sp, #24]
 800395c:	2b00      	cmp	r3, #0
 800395e:	dd05      	ble.n	800396c <_dtoa_r+0x804>
 8003960:	4631      	mov	r1, r6
 8003962:	461a      	mov	r2, r3
 8003964:	4620      	mov	r0, r4
 8003966:	f000 fba7 	bl	80040b8 <__lshift>
 800396a:	4606      	mov	r6, r0
 800396c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800396e:	2b00      	cmp	r3, #0
 8003970:	d074      	beq.n	8003a5c <_dtoa_r+0x8f4>
 8003972:	4631      	mov	r1, r6
 8003974:	4650      	mov	r0, sl
 8003976:	f000 fbf0 	bl	800415a <__mcmp>
 800397a:	2800      	cmp	r0, #0
 800397c:	da6e      	bge.n	8003a5c <_dtoa_r+0x8f4>
 800397e:	2300      	movs	r3, #0
 8003980:	4651      	mov	r1, sl
 8003982:	220a      	movs	r2, #10
 8003984:	4620      	mov	r0, r4
 8003986:	f000 fa29 	bl	8003ddc <__multadd>
 800398a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800398c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003990:	4682      	mov	sl, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 81a8 	beq.w	8003ce8 <_dtoa_r+0xb80>
 8003998:	2300      	movs	r3, #0
 800399a:	4639      	mov	r1, r7
 800399c:	220a      	movs	r2, #10
 800399e:	4620      	mov	r0, r4
 80039a0:	f000 fa1c 	bl	8003ddc <__multadd>
 80039a4:	9b04      	ldr	r3, [sp, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	4607      	mov	r7, r0
 80039aa:	f300 80c8 	bgt.w	8003b3e <_dtoa_r+0x9d6>
 80039ae:	9b07      	ldr	r3, [sp, #28]
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	f340 80c4 	ble.w	8003b3e <_dtoa_r+0x9d6>
 80039b6:	e059      	b.n	8003a6c <_dtoa_r+0x904>
 80039b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80039ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80039be:	e756      	b.n	800386e <_dtoa_r+0x706>
 80039c0:	9b03      	ldr	r3, [sp, #12]
 80039c2:	1e5e      	subs	r6, r3, #1
 80039c4:	9b08      	ldr	r3, [sp, #32]
 80039c6:	42b3      	cmp	r3, r6
 80039c8:	bfbf      	itttt	lt
 80039ca:	9b08      	ldrlt	r3, [sp, #32]
 80039cc:	9608      	strlt	r6, [sp, #32]
 80039ce:	1af2      	sublt	r2, r6, r3
 80039d0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80039d2:	bfb6      	itet	lt
 80039d4:	189b      	addlt	r3, r3, r2
 80039d6:	1b9e      	subge	r6, r3, r6
 80039d8:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80039da:	9b03      	ldr	r3, [sp, #12]
 80039dc:	bfb8      	it	lt
 80039de:	2600      	movlt	r6, #0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	bfb9      	ittee	lt
 80039e4:	9b05      	ldrlt	r3, [sp, #20]
 80039e6:	9a03      	ldrlt	r2, [sp, #12]
 80039e8:	9d05      	ldrge	r5, [sp, #20]
 80039ea:	9b03      	ldrge	r3, [sp, #12]
 80039ec:	bfbc      	itt	lt
 80039ee:	1a9d      	sublt	r5, r3, r2
 80039f0:	2300      	movlt	r3, #0
 80039f2:	e73e      	b.n	8003872 <_dtoa_r+0x70a>
 80039f4:	9e08      	ldr	r6, [sp, #32]
 80039f6:	9d05      	ldr	r5, [sp, #20]
 80039f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80039fa:	e745      	b.n	8003888 <_dtoa_r+0x720>
 80039fc:	9a08      	ldr	r2, [sp, #32]
 80039fe:	e76e      	b.n	80038de <_dtoa_r+0x776>
 8003a00:	9b07      	ldr	r3, [sp, #28]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	dc19      	bgt.n	8003a3a <_dtoa_r+0x8d2>
 8003a06:	9b00      	ldr	r3, [sp, #0]
 8003a08:	b9bb      	cbnz	r3, 8003a3a <_dtoa_r+0x8d2>
 8003a0a:	9b01      	ldr	r3, [sp, #4]
 8003a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a10:	b99b      	cbnz	r3, 8003a3a <_dtoa_r+0x8d2>
 8003a12:	9b01      	ldr	r3, [sp, #4]
 8003a14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a18:	0d1b      	lsrs	r3, r3, #20
 8003a1a:	051b      	lsls	r3, r3, #20
 8003a1c:	b183      	cbz	r3, 8003a40 <_dtoa_r+0x8d8>
 8003a1e:	9b05      	ldr	r3, [sp, #20]
 8003a20:	3301      	adds	r3, #1
 8003a22:	9305      	str	r3, [sp, #20]
 8003a24:	9b06      	ldr	r3, [sp, #24]
 8003a26:	3301      	adds	r3, #1
 8003a28:	9306      	str	r3, [sp, #24]
 8003a2a:	f04f 0801 	mov.w	r8, #1
 8003a2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f47f af6d 	bne.w	8003910 <_dtoa_r+0x7a8>
 8003a36:	2001      	movs	r0, #1
 8003a38:	e772      	b.n	8003920 <_dtoa_r+0x7b8>
 8003a3a:	f04f 0800 	mov.w	r8, #0
 8003a3e:	e7f6      	b.n	8003a2e <_dtoa_r+0x8c6>
 8003a40:	4698      	mov	r8, r3
 8003a42:	e7f4      	b.n	8003a2e <_dtoa_r+0x8c6>
 8003a44:	d080      	beq.n	8003948 <_dtoa_r+0x7e0>
 8003a46:	9a05      	ldr	r2, [sp, #20]
 8003a48:	331c      	adds	r3, #28
 8003a4a:	441a      	add	r2, r3
 8003a4c:	9205      	str	r2, [sp, #20]
 8003a4e:	9a06      	ldr	r2, [sp, #24]
 8003a50:	441a      	add	r2, r3
 8003a52:	441d      	add	r5, r3
 8003a54:	4613      	mov	r3, r2
 8003a56:	e776      	b.n	8003946 <_dtoa_r+0x7de>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	e7f4      	b.n	8003a46 <_dtoa_r+0x8de>
 8003a5c:	9b03      	ldr	r3, [sp, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	dc36      	bgt.n	8003ad0 <_dtoa_r+0x968>
 8003a62:	9b07      	ldr	r3, [sp, #28]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	dd33      	ble.n	8003ad0 <_dtoa_r+0x968>
 8003a68:	9b03      	ldr	r3, [sp, #12]
 8003a6a:	9304      	str	r3, [sp, #16]
 8003a6c:	9b04      	ldr	r3, [sp, #16]
 8003a6e:	b963      	cbnz	r3, 8003a8a <_dtoa_r+0x922>
 8003a70:	4631      	mov	r1, r6
 8003a72:	2205      	movs	r2, #5
 8003a74:	4620      	mov	r0, r4
 8003a76:	f000 f9b1 	bl	8003ddc <__multadd>
 8003a7a:	4601      	mov	r1, r0
 8003a7c:	4606      	mov	r6, r0
 8003a7e:	4650      	mov	r0, sl
 8003a80:	f000 fb6b 	bl	800415a <__mcmp>
 8003a84:	2800      	cmp	r0, #0
 8003a86:	f73f adb6 	bgt.w	80035f6 <_dtoa_r+0x48e>
 8003a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a8c:	9d02      	ldr	r5, [sp, #8]
 8003a8e:	ea6f 0b03 	mvn.w	fp, r3
 8003a92:	2300      	movs	r3, #0
 8003a94:	9303      	str	r3, [sp, #12]
 8003a96:	4631      	mov	r1, r6
 8003a98:	4620      	mov	r0, r4
 8003a9a:	f000 f988 	bl	8003dae <_Bfree>
 8003a9e:	2f00      	cmp	r7, #0
 8003aa0:	f43f aea6 	beq.w	80037f0 <_dtoa_r+0x688>
 8003aa4:	9b03      	ldr	r3, [sp, #12]
 8003aa6:	b12b      	cbz	r3, 8003ab4 <_dtoa_r+0x94c>
 8003aa8:	42bb      	cmp	r3, r7
 8003aaa:	d003      	beq.n	8003ab4 <_dtoa_r+0x94c>
 8003aac:	4619      	mov	r1, r3
 8003aae:	4620      	mov	r0, r4
 8003ab0:	f000 f97d 	bl	8003dae <_Bfree>
 8003ab4:	4639      	mov	r1, r7
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	f000 f979 	bl	8003dae <_Bfree>
 8003abc:	e698      	b.n	80037f0 <_dtoa_r+0x688>
 8003abe:	2600      	movs	r6, #0
 8003ac0:	4637      	mov	r7, r6
 8003ac2:	e7e2      	b.n	8003a8a <_dtoa_r+0x922>
 8003ac4:	46bb      	mov	fp, r7
 8003ac6:	4637      	mov	r7, r6
 8003ac8:	e595      	b.n	80035f6 <_dtoa_r+0x48e>
 8003aca:	bf00      	nop
 8003acc:	40240000 	.word	0x40240000
 8003ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ad2:	bb93      	cbnz	r3, 8003b3a <_dtoa_r+0x9d2>
 8003ad4:	9b03      	ldr	r3, [sp, #12]
 8003ad6:	9304      	str	r3, [sp, #16]
 8003ad8:	9d02      	ldr	r5, [sp, #8]
 8003ada:	4631      	mov	r1, r6
 8003adc:	4650      	mov	r0, sl
 8003ade:	f7ff fab5 	bl	800304c <quorem>
 8003ae2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003ae6:	f805 9b01 	strb.w	r9, [r5], #1
 8003aea:	9b02      	ldr	r3, [sp, #8]
 8003aec:	9a04      	ldr	r2, [sp, #16]
 8003aee:	1aeb      	subs	r3, r5, r3
 8003af0:	429a      	cmp	r2, r3
 8003af2:	f300 80dc 	bgt.w	8003cae <_dtoa_r+0xb46>
 8003af6:	9b02      	ldr	r3, [sp, #8]
 8003af8:	2a01      	cmp	r2, #1
 8003afa:	bfac      	ite	ge
 8003afc:	189b      	addge	r3, r3, r2
 8003afe:	3301      	addlt	r3, #1
 8003b00:	4698      	mov	r8, r3
 8003b02:	2300      	movs	r3, #0
 8003b04:	9303      	str	r3, [sp, #12]
 8003b06:	4651      	mov	r1, sl
 8003b08:	2201      	movs	r2, #1
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	f000 fad4 	bl	80040b8 <__lshift>
 8003b10:	4631      	mov	r1, r6
 8003b12:	4682      	mov	sl, r0
 8003b14:	f000 fb21 	bl	800415a <__mcmp>
 8003b18:	2800      	cmp	r0, #0
 8003b1a:	f300 808d 	bgt.w	8003c38 <_dtoa_r+0xad0>
 8003b1e:	d103      	bne.n	8003b28 <_dtoa_r+0x9c0>
 8003b20:	f019 0f01 	tst.w	r9, #1
 8003b24:	f040 8088 	bne.w	8003c38 <_dtoa_r+0xad0>
 8003b28:	4645      	mov	r5, r8
 8003b2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003b2e:	2b30      	cmp	r3, #48	; 0x30
 8003b30:	f105 32ff 	add.w	r2, r5, #4294967295
 8003b34:	d1af      	bne.n	8003a96 <_dtoa_r+0x92e>
 8003b36:	4615      	mov	r5, r2
 8003b38:	e7f7      	b.n	8003b2a <_dtoa_r+0x9c2>
 8003b3a:	9b03      	ldr	r3, [sp, #12]
 8003b3c:	9304      	str	r3, [sp, #16]
 8003b3e:	2d00      	cmp	r5, #0
 8003b40:	dd05      	ble.n	8003b4e <_dtoa_r+0x9e6>
 8003b42:	4639      	mov	r1, r7
 8003b44:	462a      	mov	r2, r5
 8003b46:	4620      	mov	r0, r4
 8003b48:	f000 fab6 	bl	80040b8 <__lshift>
 8003b4c:	4607      	mov	r7, r0
 8003b4e:	f1b8 0f00 	cmp.w	r8, #0
 8003b52:	d04c      	beq.n	8003bee <_dtoa_r+0xa86>
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	4620      	mov	r0, r4
 8003b58:	f000 f8f5 	bl	8003d46 <_Balloc>
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	3202      	adds	r2, #2
 8003b60:	4605      	mov	r5, r0
 8003b62:	0092      	lsls	r2, r2, #2
 8003b64:	f107 010c 	add.w	r1, r7, #12
 8003b68:	300c      	adds	r0, #12
 8003b6a:	f000 f8e1 	bl	8003d30 <memcpy>
 8003b6e:	2201      	movs	r2, #1
 8003b70:	4629      	mov	r1, r5
 8003b72:	4620      	mov	r0, r4
 8003b74:	f000 faa0 	bl	80040b8 <__lshift>
 8003b78:	9b00      	ldr	r3, [sp, #0]
 8003b7a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003b7e:	9703      	str	r7, [sp, #12]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	4607      	mov	r7, r0
 8003b86:	9305      	str	r3, [sp, #20]
 8003b88:	4631      	mov	r1, r6
 8003b8a:	4650      	mov	r0, sl
 8003b8c:	f7ff fa5e 	bl	800304c <quorem>
 8003b90:	9903      	ldr	r1, [sp, #12]
 8003b92:	4605      	mov	r5, r0
 8003b94:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003b98:	4650      	mov	r0, sl
 8003b9a:	f000 fade 	bl	800415a <__mcmp>
 8003b9e:	463a      	mov	r2, r7
 8003ba0:	9000      	str	r0, [sp, #0]
 8003ba2:	4631      	mov	r1, r6
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f000 faf2 	bl	800418e <__mdiff>
 8003baa:	68c3      	ldr	r3, [r0, #12]
 8003bac:	4602      	mov	r2, r0
 8003bae:	bb03      	cbnz	r3, 8003bf2 <_dtoa_r+0xa8a>
 8003bb0:	4601      	mov	r1, r0
 8003bb2:	9006      	str	r0, [sp, #24]
 8003bb4:	4650      	mov	r0, sl
 8003bb6:	f000 fad0 	bl	800415a <__mcmp>
 8003bba:	9a06      	ldr	r2, [sp, #24]
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	9306      	str	r3, [sp, #24]
 8003bc4:	f000 f8f3 	bl	8003dae <_Bfree>
 8003bc8:	9b06      	ldr	r3, [sp, #24]
 8003bca:	b9a3      	cbnz	r3, 8003bf6 <_dtoa_r+0xa8e>
 8003bcc:	9a07      	ldr	r2, [sp, #28]
 8003bce:	b992      	cbnz	r2, 8003bf6 <_dtoa_r+0xa8e>
 8003bd0:	9a05      	ldr	r2, [sp, #20]
 8003bd2:	b982      	cbnz	r2, 8003bf6 <_dtoa_r+0xa8e>
 8003bd4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003bd8:	d029      	beq.n	8003c2e <_dtoa_r+0xac6>
 8003bda:	9b00      	ldr	r3, [sp, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	dd01      	ble.n	8003be4 <_dtoa_r+0xa7c>
 8003be0:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8003be4:	f108 0501 	add.w	r5, r8, #1
 8003be8:	f888 9000 	strb.w	r9, [r8]
 8003bec:	e753      	b.n	8003a96 <_dtoa_r+0x92e>
 8003bee:	4638      	mov	r0, r7
 8003bf0:	e7c2      	b.n	8003b78 <_dtoa_r+0xa10>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e7e3      	b.n	8003bbe <_dtoa_r+0xa56>
 8003bf6:	9a00      	ldr	r2, [sp, #0]
 8003bf8:	2a00      	cmp	r2, #0
 8003bfa:	db04      	blt.n	8003c06 <_dtoa_r+0xa9e>
 8003bfc:	d125      	bne.n	8003c4a <_dtoa_r+0xae2>
 8003bfe:	9a07      	ldr	r2, [sp, #28]
 8003c00:	bb1a      	cbnz	r2, 8003c4a <_dtoa_r+0xae2>
 8003c02:	9a05      	ldr	r2, [sp, #20]
 8003c04:	bb0a      	cbnz	r2, 8003c4a <_dtoa_r+0xae2>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	ddec      	ble.n	8003be4 <_dtoa_r+0xa7c>
 8003c0a:	4651      	mov	r1, sl
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f000 fa52 	bl	80040b8 <__lshift>
 8003c14:	4631      	mov	r1, r6
 8003c16:	4682      	mov	sl, r0
 8003c18:	f000 fa9f 	bl	800415a <__mcmp>
 8003c1c:	2800      	cmp	r0, #0
 8003c1e:	dc03      	bgt.n	8003c28 <_dtoa_r+0xac0>
 8003c20:	d1e0      	bne.n	8003be4 <_dtoa_r+0xa7c>
 8003c22:	f019 0f01 	tst.w	r9, #1
 8003c26:	d0dd      	beq.n	8003be4 <_dtoa_r+0xa7c>
 8003c28:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003c2c:	d1d8      	bne.n	8003be0 <_dtoa_r+0xa78>
 8003c2e:	2339      	movs	r3, #57	; 0x39
 8003c30:	f888 3000 	strb.w	r3, [r8]
 8003c34:	f108 0801 	add.w	r8, r8, #1
 8003c38:	4645      	mov	r5, r8
 8003c3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003c3e:	2b39      	cmp	r3, #57	; 0x39
 8003c40:	f105 32ff 	add.w	r2, r5, #4294967295
 8003c44:	d03b      	beq.n	8003cbe <_dtoa_r+0xb56>
 8003c46:	3301      	adds	r3, #1
 8003c48:	e040      	b.n	8003ccc <_dtoa_r+0xb64>
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f108 0501 	add.w	r5, r8, #1
 8003c50:	dd05      	ble.n	8003c5e <_dtoa_r+0xaf6>
 8003c52:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003c56:	d0ea      	beq.n	8003c2e <_dtoa_r+0xac6>
 8003c58:	f109 0901 	add.w	r9, r9, #1
 8003c5c:	e7c4      	b.n	8003be8 <_dtoa_r+0xa80>
 8003c5e:	9b02      	ldr	r3, [sp, #8]
 8003c60:	9a04      	ldr	r2, [sp, #16]
 8003c62:	f805 9c01 	strb.w	r9, [r5, #-1]
 8003c66:	1aeb      	subs	r3, r5, r3
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	46a8      	mov	r8, r5
 8003c6c:	f43f af4b 	beq.w	8003b06 <_dtoa_r+0x99e>
 8003c70:	4651      	mov	r1, sl
 8003c72:	2300      	movs	r3, #0
 8003c74:	220a      	movs	r2, #10
 8003c76:	4620      	mov	r0, r4
 8003c78:	f000 f8b0 	bl	8003ddc <__multadd>
 8003c7c:	9b03      	ldr	r3, [sp, #12]
 8003c7e:	9903      	ldr	r1, [sp, #12]
 8003c80:	42bb      	cmp	r3, r7
 8003c82:	4682      	mov	sl, r0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	f04f 020a 	mov.w	r2, #10
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	d104      	bne.n	8003c9a <_dtoa_r+0xb32>
 8003c90:	f000 f8a4 	bl	8003ddc <__multadd>
 8003c94:	9003      	str	r0, [sp, #12]
 8003c96:	4607      	mov	r7, r0
 8003c98:	e776      	b.n	8003b88 <_dtoa_r+0xa20>
 8003c9a:	f000 f89f 	bl	8003ddc <__multadd>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	9003      	str	r0, [sp, #12]
 8003ca2:	220a      	movs	r2, #10
 8003ca4:	4639      	mov	r1, r7
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	f000 f898 	bl	8003ddc <__multadd>
 8003cac:	e7f3      	b.n	8003c96 <_dtoa_r+0xb2e>
 8003cae:	4651      	mov	r1, sl
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	220a      	movs	r2, #10
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	f000 f891 	bl	8003ddc <__multadd>
 8003cba:	4682      	mov	sl, r0
 8003cbc:	e70d      	b.n	8003ada <_dtoa_r+0x972>
 8003cbe:	9b02      	ldr	r3, [sp, #8]
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d105      	bne.n	8003cd0 <_dtoa_r+0xb68>
 8003cc4:	9a02      	ldr	r2, [sp, #8]
 8003cc6:	f10b 0b01 	add.w	fp, fp, #1
 8003cca:	2331      	movs	r3, #49	; 0x31
 8003ccc:	7013      	strb	r3, [r2, #0]
 8003cce:	e6e2      	b.n	8003a96 <_dtoa_r+0x92e>
 8003cd0:	4615      	mov	r5, r2
 8003cd2:	e7b2      	b.n	8003c3a <_dtoa_r+0xad2>
 8003cd4:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <_dtoa_r+0xb94>)
 8003cd6:	f7ff baae 	b.w	8003236 <_dtoa_r+0xce>
 8003cda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f47f aa88 	bne.w	80031f2 <_dtoa_r+0x8a>
 8003ce2:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <_dtoa_r+0xb98>)
 8003ce4:	f7ff baa7 	b.w	8003236 <_dtoa_r+0xce>
 8003ce8:	9b04      	ldr	r3, [sp, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f73f aef4 	bgt.w	8003ad8 <_dtoa_r+0x970>
 8003cf0:	9b07      	ldr	r3, [sp, #28]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	f77f aef0 	ble.w	8003ad8 <_dtoa_r+0x970>
 8003cf8:	e6b8      	b.n	8003a6c <_dtoa_r+0x904>
 8003cfa:	bf00      	nop
 8003cfc:	08005596 	.word	0x08005596
 8003d00:	080055ba 	.word	0x080055ba

08003d04 <_localeconv_r>:
 8003d04:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <_localeconv_r+0x14>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6a18      	ldr	r0, [r3, #32]
 8003d0a:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <_localeconv_r+0x18>)
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	bf08      	it	eq
 8003d10:	4618      	moveq	r0, r3
 8003d12:	30f0      	adds	r0, #240	; 0xf0
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	2000001c 	.word	0x2000001c
 8003d1c:	20000080 	.word	0x20000080

08003d20 <malloc>:
 8003d20:	4b02      	ldr	r3, [pc, #8]	; (8003d2c <malloc+0xc>)
 8003d22:	4601      	mov	r1, r0
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	f000 bb3b 	b.w	80043a0 <_malloc_r>
 8003d2a:	bf00      	nop
 8003d2c:	2000001c 	.word	0x2000001c

08003d30 <memcpy>:
 8003d30:	b510      	push	{r4, lr}
 8003d32:	1e43      	subs	r3, r0, #1
 8003d34:	440a      	add	r2, r1
 8003d36:	4291      	cmp	r1, r2
 8003d38:	d100      	bne.n	8003d3c <memcpy+0xc>
 8003d3a:	bd10      	pop	{r4, pc}
 8003d3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d44:	e7f7      	b.n	8003d36 <memcpy+0x6>

08003d46 <_Balloc>:
 8003d46:	b570      	push	{r4, r5, r6, lr}
 8003d48:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003d4a:	4604      	mov	r4, r0
 8003d4c:	460e      	mov	r6, r1
 8003d4e:	b93d      	cbnz	r5, 8003d60 <_Balloc+0x1a>
 8003d50:	2010      	movs	r0, #16
 8003d52:	f7ff ffe5 	bl	8003d20 <malloc>
 8003d56:	6260      	str	r0, [r4, #36]	; 0x24
 8003d58:	6045      	str	r5, [r0, #4]
 8003d5a:	6085      	str	r5, [r0, #8]
 8003d5c:	6005      	str	r5, [r0, #0]
 8003d5e:	60c5      	str	r5, [r0, #12]
 8003d60:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003d62:	68eb      	ldr	r3, [r5, #12]
 8003d64:	b183      	cbz	r3, 8003d88 <_Balloc+0x42>
 8003d66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003d6e:	b9b8      	cbnz	r0, 8003da0 <_Balloc+0x5a>
 8003d70:	2101      	movs	r1, #1
 8003d72:	fa01 f506 	lsl.w	r5, r1, r6
 8003d76:	1d6a      	adds	r2, r5, #5
 8003d78:	0092      	lsls	r2, r2, #2
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	f000 fab4 	bl	80042e8 <_calloc_r>
 8003d80:	b160      	cbz	r0, 8003d9c <_Balloc+0x56>
 8003d82:	6046      	str	r6, [r0, #4]
 8003d84:	6085      	str	r5, [r0, #8]
 8003d86:	e00e      	b.n	8003da6 <_Balloc+0x60>
 8003d88:	2221      	movs	r2, #33	; 0x21
 8003d8a:	2104      	movs	r1, #4
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	f000 faab 	bl	80042e8 <_calloc_r>
 8003d92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d94:	60e8      	str	r0, [r5, #12]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e4      	bne.n	8003d66 <_Balloc+0x20>
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	bd70      	pop	{r4, r5, r6, pc}
 8003da0:	6802      	ldr	r2, [r0, #0]
 8003da2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003da6:	2300      	movs	r3, #0
 8003da8:	6103      	str	r3, [r0, #16]
 8003daa:	60c3      	str	r3, [r0, #12]
 8003dac:	bd70      	pop	{r4, r5, r6, pc}

08003dae <_Bfree>:
 8003dae:	b570      	push	{r4, r5, r6, lr}
 8003db0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003db2:	4606      	mov	r6, r0
 8003db4:	460d      	mov	r5, r1
 8003db6:	b93c      	cbnz	r4, 8003dc8 <_Bfree+0x1a>
 8003db8:	2010      	movs	r0, #16
 8003dba:	f7ff ffb1 	bl	8003d20 <malloc>
 8003dbe:	6270      	str	r0, [r6, #36]	; 0x24
 8003dc0:	6044      	str	r4, [r0, #4]
 8003dc2:	6084      	str	r4, [r0, #8]
 8003dc4:	6004      	str	r4, [r0, #0]
 8003dc6:	60c4      	str	r4, [r0, #12]
 8003dc8:	b13d      	cbz	r5, 8003dda <_Bfree+0x2c>
 8003dca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003dcc:	686a      	ldr	r2, [r5, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003dd4:	6029      	str	r1, [r5, #0]
 8003dd6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003dda:	bd70      	pop	{r4, r5, r6, pc}

08003ddc <__multadd>:
 8003ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003de0:	690d      	ldr	r5, [r1, #16]
 8003de2:	461f      	mov	r7, r3
 8003de4:	4606      	mov	r6, r0
 8003de6:	460c      	mov	r4, r1
 8003de8:	f101 0e14 	add.w	lr, r1, #20
 8003dec:	2300      	movs	r3, #0
 8003dee:	f8de 0000 	ldr.w	r0, [lr]
 8003df2:	b281      	uxth	r1, r0
 8003df4:	fb02 7101 	mla	r1, r2, r1, r7
 8003df8:	0c0f      	lsrs	r7, r1, #16
 8003dfa:	0c00      	lsrs	r0, r0, #16
 8003dfc:	fb02 7000 	mla	r0, r2, r0, r7
 8003e00:	b289      	uxth	r1, r1
 8003e02:	3301      	adds	r3, #1
 8003e04:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003e08:	429d      	cmp	r5, r3
 8003e0a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8003e0e:	f84e 1b04 	str.w	r1, [lr], #4
 8003e12:	dcec      	bgt.n	8003dee <__multadd+0x12>
 8003e14:	b1d7      	cbz	r7, 8003e4c <__multadd+0x70>
 8003e16:	68a3      	ldr	r3, [r4, #8]
 8003e18:	429d      	cmp	r5, r3
 8003e1a:	db12      	blt.n	8003e42 <__multadd+0x66>
 8003e1c:	6861      	ldr	r1, [r4, #4]
 8003e1e:	4630      	mov	r0, r6
 8003e20:	3101      	adds	r1, #1
 8003e22:	f7ff ff90 	bl	8003d46 <_Balloc>
 8003e26:	6922      	ldr	r2, [r4, #16]
 8003e28:	3202      	adds	r2, #2
 8003e2a:	f104 010c 	add.w	r1, r4, #12
 8003e2e:	4680      	mov	r8, r0
 8003e30:	0092      	lsls	r2, r2, #2
 8003e32:	300c      	adds	r0, #12
 8003e34:	f7ff ff7c 	bl	8003d30 <memcpy>
 8003e38:	4621      	mov	r1, r4
 8003e3a:	4630      	mov	r0, r6
 8003e3c:	f7ff ffb7 	bl	8003dae <_Bfree>
 8003e40:	4644      	mov	r4, r8
 8003e42:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003e46:	3501      	adds	r5, #1
 8003e48:	615f      	str	r7, [r3, #20]
 8003e4a:	6125      	str	r5, [r4, #16]
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003e52 <__hi0bits>:
 8003e52:	0c02      	lsrs	r2, r0, #16
 8003e54:	0412      	lsls	r2, r2, #16
 8003e56:	4603      	mov	r3, r0
 8003e58:	b9b2      	cbnz	r2, 8003e88 <__hi0bits+0x36>
 8003e5a:	0403      	lsls	r3, r0, #16
 8003e5c:	2010      	movs	r0, #16
 8003e5e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003e62:	bf04      	itt	eq
 8003e64:	021b      	lsleq	r3, r3, #8
 8003e66:	3008      	addeq	r0, #8
 8003e68:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003e6c:	bf04      	itt	eq
 8003e6e:	011b      	lsleq	r3, r3, #4
 8003e70:	3004      	addeq	r0, #4
 8003e72:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003e76:	bf04      	itt	eq
 8003e78:	009b      	lsleq	r3, r3, #2
 8003e7a:	3002      	addeq	r0, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	db06      	blt.n	8003e8e <__hi0bits+0x3c>
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	d503      	bpl.n	8003e8c <__hi0bits+0x3a>
 8003e84:	3001      	adds	r0, #1
 8003e86:	4770      	bx	lr
 8003e88:	2000      	movs	r0, #0
 8003e8a:	e7e8      	b.n	8003e5e <__hi0bits+0xc>
 8003e8c:	2020      	movs	r0, #32
 8003e8e:	4770      	bx	lr

08003e90 <__lo0bits>:
 8003e90:	6803      	ldr	r3, [r0, #0]
 8003e92:	f013 0207 	ands.w	r2, r3, #7
 8003e96:	4601      	mov	r1, r0
 8003e98:	d00b      	beq.n	8003eb2 <__lo0bits+0x22>
 8003e9a:	07da      	lsls	r2, r3, #31
 8003e9c:	d423      	bmi.n	8003ee6 <__lo0bits+0x56>
 8003e9e:	0798      	lsls	r0, r3, #30
 8003ea0:	bf49      	itett	mi
 8003ea2:	085b      	lsrmi	r3, r3, #1
 8003ea4:	089b      	lsrpl	r3, r3, #2
 8003ea6:	2001      	movmi	r0, #1
 8003ea8:	600b      	strmi	r3, [r1, #0]
 8003eaa:	bf5c      	itt	pl
 8003eac:	600b      	strpl	r3, [r1, #0]
 8003eae:	2002      	movpl	r0, #2
 8003eb0:	4770      	bx	lr
 8003eb2:	b298      	uxth	r0, r3
 8003eb4:	b9a8      	cbnz	r0, 8003ee2 <__lo0bits+0x52>
 8003eb6:	0c1b      	lsrs	r3, r3, #16
 8003eb8:	2010      	movs	r0, #16
 8003eba:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003ebe:	bf04      	itt	eq
 8003ec0:	0a1b      	lsreq	r3, r3, #8
 8003ec2:	3008      	addeq	r0, #8
 8003ec4:	071a      	lsls	r2, r3, #28
 8003ec6:	bf04      	itt	eq
 8003ec8:	091b      	lsreq	r3, r3, #4
 8003eca:	3004      	addeq	r0, #4
 8003ecc:	079a      	lsls	r2, r3, #30
 8003ece:	bf04      	itt	eq
 8003ed0:	089b      	lsreq	r3, r3, #2
 8003ed2:	3002      	addeq	r0, #2
 8003ed4:	07da      	lsls	r2, r3, #31
 8003ed6:	d402      	bmi.n	8003ede <__lo0bits+0x4e>
 8003ed8:	085b      	lsrs	r3, r3, #1
 8003eda:	d006      	beq.n	8003eea <__lo0bits+0x5a>
 8003edc:	3001      	adds	r0, #1
 8003ede:	600b      	str	r3, [r1, #0]
 8003ee0:	4770      	bx	lr
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	e7e9      	b.n	8003eba <__lo0bits+0x2a>
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	4770      	bx	lr
 8003eea:	2020      	movs	r0, #32
 8003eec:	4770      	bx	lr

08003eee <__i2b>:
 8003eee:	b510      	push	{r4, lr}
 8003ef0:	460c      	mov	r4, r1
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	f7ff ff27 	bl	8003d46 <_Balloc>
 8003ef8:	2201      	movs	r2, #1
 8003efa:	6144      	str	r4, [r0, #20]
 8003efc:	6102      	str	r2, [r0, #16]
 8003efe:	bd10      	pop	{r4, pc}

08003f00 <__multiply>:
 8003f00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f04:	4614      	mov	r4, r2
 8003f06:	690a      	ldr	r2, [r1, #16]
 8003f08:	6923      	ldr	r3, [r4, #16]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	bfb8      	it	lt
 8003f0e:	460b      	movlt	r3, r1
 8003f10:	4689      	mov	r9, r1
 8003f12:	bfbc      	itt	lt
 8003f14:	46a1      	movlt	r9, r4
 8003f16:	461c      	movlt	r4, r3
 8003f18:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8003f1c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8003f20:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003f24:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003f28:	eb07 060a 	add.w	r6, r7, sl
 8003f2c:	429e      	cmp	r6, r3
 8003f2e:	bfc8      	it	gt
 8003f30:	3101      	addgt	r1, #1
 8003f32:	f7ff ff08 	bl	8003d46 <_Balloc>
 8003f36:	f100 0514 	add.w	r5, r0, #20
 8003f3a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003f3e:	462b      	mov	r3, r5
 8003f40:	2200      	movs	r2, #0
 8003f42:	4543      	cmp	r3, r8
 8003f44:	d316      	bcc.n	8003f74 <__multiply+0x74>
 8003f46:	f104 0214 	add.w	r2, r4, #20
 8003f4a:	f109 0114 	add.w	r1, r9, #20
 8003f4e:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8003f52:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003f56:	9301      	str	r3, [sp, #4]
 8003f58:	9c01      	ldr	r4, [sp, #4]
 8003f5a:	4294      	cmp	r4, r2
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	d80c      	bhi.n	8003f7a <__multiply+0x7a>
 8003f60:	2e00      	cmp	r6, #0
 8003f62:	dd03      	ble.n	8003f6c <__multiply+0x6c>
 8003f64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d054      	beq.n	8004016 <__multiply+0x116>
 8003f6c:	6106      	str	r6, [r0, #16]
 8003f6e:	b003      	add	sp, #12
 8003f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f74:	f843 2b04 	str.w	r2, [r3], #4
 8003f78:	e7e3      	b.n	8003f42 <__multiply+0x42>
 8003f7a:	f8b3 a000 	ldrh.w	sl, [r3]
 8003f7e:	3204      	adds	r2, #4
 8003f80:	f1ba 0f00 	cmp.w	sl, #0
 8003f84:	d020      	beq.n	8003fc8 <__multiply+0xc8>
 8003f86:	46ae      	mov	lr, r5
 8003f88:	4689      	mov	r9, r1
 8003f8a:	f04f 0c00 	mov.w	ip, #0
 8003f8e:	f859 4b04 	ldr.w	r4, [r9], #4
 8003f92:	f8be b000 	ldrh.w	fp, [lr]
 8003f96:	b2a3      	uxth	r3, r4
 8003f98:	fb0a b303 	mla	r3, sl, r3, fp
 8003f9c:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8003fa0:	f8de 4000 	ldr.w	r4, [lr]
 8003fa4:	4463      	add	r3, ip
 8003fa6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8003faa:	fb0a c40b 	mla	r4, sl, fp, ip
 8003fae:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003fb8:	454f      	cmp	r7, r9
 8003fba:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8003fbe:	f84e 3b04 	str.w	r3, [lr], #4
 8003fc2:	d8e4      	bhi.n	8003f8e <__multiply+0x8e>
 8003fc4:	f8ce c000 	str.w	ip, [lr]
 8003fc8:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8003fcc:	f1b9 0f00 	cmp.w	r9, #0
 8003fd0:	d01f      	beq.n	8004012 <__multiply+0x112>
 8003fd2:	682b      	ldr	r3, [r5, #0]
 8003fd4:	46ae      	mov	lr, r5
 8003fd6:	468c      	mov	ip, r1
 8003fd8:	f04f 0a00 	mov.w	sl, #0
 8003fdc:	f8bc 4000 	ldrh.w	r4, [ip]
 8003fe0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8003fe4:	fb09 b404 	mla	r4, r9, r4, fp
 8003fe8:	44a2      	add	sl, r4
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8003ff0:	f84e 3b04 	str.w	r3, [lr], #4
 8003ff4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003ff8:	f8be 4000 	ldrh.w	r4, [lr]
 8003ffc:	0c1b      	lsrs	r3, r3, #16
 8003ffe:	fb09 4303 	mla	r3, r9, r3, r4
 8004002:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004006:	4567      	cmp	r7, ip
 8004008:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800400c:	d8e6      	bhi.n	8003fdc <__multiply+0xdc>
 800400e:	f8ce 3000 	str.w	r3, [lr]
 8004012:	3504      	adds	r5, #4
 8004014:	e7a0      	b.n	8003f58 <__multiply+0x58>
 8004016:	3e01      	subs	r6, #1
 8004018:	e7a2      	b.n	8003f60 <__multiply+0x60>
	...

0800401c <__pow5mult>:
 800401c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004020:	4615      	mov	r5, r2
 8004022:	f012 0203 	ands.w	r2, r2, #3
 8004026:	4606      	mov	r6, r0
 8004028:	460f      	mov	r7, r1
 800402a:	d007      	beq.n	800403c <__pow5mult+0x20>
 800402c:	3a01      	subs	r2, #1
 800402e:	4c21      	ldr	r4, [pc, #132]	; (80040b4 <__pow5mult+0x98>)
 8004030:	2300      	movs	r3, #0
 8004032:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004036:	f7ff fed1 	bl	8003ddc <__multadd>
 800403a:	4607      	mov	r7, r0
 800403c:	10ad      	asrs	r5, r5, #2
 800403e:	d035      	beq.n	80040ac <__pow5mult+0x90>
 8004040:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004042:	b93c      	cbnz	r4, 8004054 <__pow5mult+0x38>
 8004044:	2010      	movs	r0, #16
 8004046:	f7ff fe6b 	bl	8003d20 <malloc>
 800404a:	6270      	str	r0, [r6, #36]	; 0x24
 800404c:	6044      	str	r4, [r0, #4]
 800404e:	6084      	str	r4, [r0, #8]
 8004050:	6004      	str	r4, [r0, #0]
 8004052:	60c4      	str	r4, [r0, #12]
 8004054:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004058:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800405c:	b94c      	cbnz	r4, 8004072 <__pow5mult+0x56>
 800405e:	f240 2171 	movw	r1, #625	; 0x271
 8004062:	4630      	mov	r0, r6
 8004064:	f7ff ff43 	bl	8003eee <__i2b>
 8004068:	2300      	movs	r3, #0
 800406a:	f8c8 0008 	str.w	r0, [r8, #8]
 800406e:	4604      	mov	r4, r0
 8004070:	6003      	str	r3, [r0, #0]
 8004072:	f04f 0800 	mov.w	r8, #0
 8004076:	07eb      	lsls	r3, r5, #31
 8004078:	d50a      	bpl.n	8004090 <__pow5mult+0x74>
 800407a:	4639      	mov	r1, r7
 800407c:	4622      	mov	r2, r4
 800407e:	4630      	mov	r0, r6
 8004080:	f7ff ff3e 	bl	8003f00 <__multiply>
 8004084:	4639      	mov	r1, r7
 8004086:	4681      	mov	r9, r0
 8004088:	4630      	mov	r0, r6
 800408a:	f7ff fe90 	bl	8003dae <_Bfree>
 800408e:	464f      	mov	r7, r9
 8004090:	106d      	asrs	r5, r5, #1
 8004092:	d00b      	beq.n	80040ac <__pow5mult+0x90>
 8004094:	6820      	ldr	r0, [r4, #0]
 8004096:	b938      	cbnz	r0, 80040a8 <__pow5mult+0x8c>
 8004098:	4622      	mov	r2, r4
 800409a:	4621      	mov	r1, r4
 800409c:	4630      	mov	r0, r6
 800409e:	f7ff ff2f 	bl	8003f00 <__multiply>
 80040a2:	6020      	str	r0, [r4, #0]
 80040a4:	f8c0 8000 	str.w	r8, [r0]
 80040a8:	4604      	mov	r4, r0
 80040aa:	e7e4      	b.n	8004076 <__pow5mult+0x5a>
 80040ac:	4638      	mov	r0, r7
 80040ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040b2:	bf00      	nop
 80040b4:	080056b8 	.word	0x080056b8

080040b8 <__lshift>:
 80040b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040bc:	460c      	mov	r4, r1
 80040be:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80040c2:	6923      	ldr	r3, [r4, #16]
 80040c4:	6849      	ldr	r1, [r1, #4]
 80040c6:	eb0a 0903 	add.w	r9, sl, r3
 80040ca:	68a3      	ldr	r3, [r4, #8]
 80040cc:	4607      	mov	r7, r0
 80040ce:	4616      	mov	r6, r2
 80040d0:	f109 0501 	add.w	r5, r9, #1
 80040d4:	42ab      	cmp	r3, r5
 80040d6:	db31      	blt.n	800413c <__lshift+0x84>
 80040d8:	4638      	mov	r0, r7
 80040da:	f7ff fe34 	bl	8003d46 <_Balloc>
 80040de:	2200      	movs	r2, #0
 80040e0:	4680      	mov	r8, r0
 80040e2:	f100 0314 	add.w	r3, r0, #20
 80040e6:	4611      	mov	r1, r2
 80040e8:	4552      	cmp	r2, sl
 80040ea:	db2a      	blt.n	8004142 <__lshift+0x8a>
 80040ec:	6920      	ldr	r0, [r4, #16]
 80040ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80040f2:	f104 0114 	add.w	r1, r4, #20
 80040f6:	f016 021f 	ands.w	r2, r6, #31
 80040fa:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80040fe:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004102:	d022      	beq.n	800414a <__lshift+0x92>
 8004104:	f1c2 0c20 	rsb	ip, r2, #32
 8004108:	2000      	movs	r0, #0
 800410a:	680e      	ldr	r6, [r1, #0]
 800410c:	4096      	lsls	r6, r2
 800410e:	4330      	orrs	r0, r6
 8004110:	f843 0b04 	str.w	r0, [r3], #4
 8004114:	f851 0b04 	ldr.w	r0, [r1], #4
 8004118:	458e      	cmp	lr, r1
 800411a:	fa20 f00c 	lsr.w	r0, r0, ip
 800411e:	d8f4      	bhi.n	800410a <__lshift+0x52>
 8004120:	6018      	str	r0, [r3, #0]
 8004122:	b108      	cbz	r0, 8004128 <__lshift+0x70>
 8004124:	f109 0502 	add.w	r5, r9, #2
 8004128:	3d01      	subs	r5, #1
 800412a:	4638      	mov	r0, r7
 800412c:	f8c8 5010 	str.w	r5, [r8, #16]
 8004130:	4621      	mov	r1, r4
 8004132:	f7ff fe3c 	bl	8003dae <_Bfree>
 8004136:	4640      	mov	r0, r8
 8004138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800413c:	3101      	adds	r1, #1
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	e7c8      	b.n	80040d4 <__lshift+0x1c>
 8004142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004146:	3201      	adds	r2, #1
 8004148:	e7ce      	b.n	80040e8 <__lshift+0x30>
 800414a:	3b04      	subs	r3, #4
 800414c:	f851 2b04 	ldr.w	r2, [r1], #4
 8004150:	f843 2f04 	str.w	r2, [r3, #4]!
 8004154:	458e      	cmp	lr, r1
 8004156:	d8f9      	bhi.n	800414c <__lshift+0x94>
 8004158:	e7e6      	b.n	8004128 <__lshift+0x70>

0800415a <__mcmp>:
 800415a:	6903      	ldr	r3, [r0, #16]
 800415c:	690a      	ldr	r2, [r1, #16]
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	b530      	push	{r4, r5, lr}
 8004162:	d10c      	bne.n	800417e <__mcmp+0x24>
 8004164:	0092      	lsls	r2, r2, #2
 8004166:	3014      	adds	r0, #20
 8004168:	3114      	adds	r1, #20
 800416a:	1884      	adds	r4, r0, r2
 800416c:	4411      	add	r1, r2
 800416e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004172:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004176:	4295      	cmp	r5, r2
 8004178:	d003      	beq.n	8004182 <__mcmp+0x28>
 800417a:	d305      	bcc.n	8004188 <__mcmp+0x2e>
 800417c:	2301      	movs	r3, #1
 800417e:	4618      	mov	r0, r3
 8004180:	bd30      	pop	{r4, r5, pc}
 8004182:	42a0      	cmp	r0, r4
 8004184:	d3f3      	bcc.n	800416e <__mcmp+0x14>
 8004186:	e7fa      	b.n	800417e <__mcmp+0x24>
 8004188:	f04f 33ff 	mov.w	r3, #4294967295
 800418c:	e7f7      	b.n	800417e <__mcmp+0x24>

0800418e <__mdiff>:
 800418e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004192:	460d      	mov	r5, r1
 8004194:	4607      	mov	r7, r0
 8004196:	4611      	mov	r1, r2
 8004198:	4628      	mov	r0, r5
 800419a:	4614      	mov	r4, r2
 800419c:	f7ff ffdd 	bl	800415a <__mcmp>
 80041a0:	1e06      	subs	r6, r0, #0
 80041a2:	d108      	bne.n	80041b6 <__mdiff+0x28>
 80041a4:	4631      	mov	r1, r6
 80041a6:	4638      	mov	r0, r7
 80041a8:	f7ff fdcd 	bl	8003d46 <_Balloc>
 80041ac:	2301      	movs	r3, #1
 80041ae:	6103      	str	r3, [r0, #16]
 80041b0:	6146      	str	r6, [r0, #20]
 80041b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041b6:	bfa4      	itt	ge
 80041b8:	4623      	movge	r3, r4
 80041ba:	462c      	movge	r4, r5
 80041bc:	4638      	mov	r0, r7
 80041be:	6861      	ldr	r1, [r4, #4]
 80041c0:	bfa6      	itte	ge
 80041c2:	461d      	movge	r5, r3
 80041c4:	2600      	movge	r6, #0
 80041c6:	2601      	movlt	r6, #1
 80041c8:	f7ff fdbd 	bl	8003d46 <_Balloc>
 80041cc:	692b      	ldr	r3, [r5, #16]
 80041ce:	60c6      	str	r6, [r0, #12]
 80041d0:	6926      	ldr	r6, [r4, #16]
 80041d2:	f105 0914 	add.w	r9, r5, #20
 80041d6:	f104 0214 	add.w	r2, r4, #20
 80041da:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80041de:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80041e2:	f100 0514 	add.w	r5, r0, #20
 80041e6:	f04f 0c00 	mov.w	ip, #0
 80041ea:	f852 ab04 	ldr.w	sl, [r2], #4
 80041ee:	f859 4b04 	ldr.w	r4, [r9], #4
 80041f2:	fa1c f18a 	uxtah	r1, ip, sl
 80041f6:	b2a3      	uxth	r3, r4
 80041f8:	1ac9      	subs	r1, r1, r3
 80041fa:	0c23      	lsrs	r3, r4, #16
 80041fc:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8004200:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004204:	b289      	uxth	r1, r1
 8004206:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800420a:	45c8      	cmp	r8, r9
 800420c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004210:	4696      	mov	lr, r2
 8004212:	f845 3b04 	str.w	r3, [r5], #4
 8004216:	d8e8      	bhi.n	80041ea <__mdiff+0x5c>
 8004218:	45be      	cmp	lr, r7
 800421a:	d305      	bcc.n	8004228 <__mdiff+0x9a>
 800421c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004220:	b18b      	cbz	r3, 8004246 <__mdiff+0xb8>
 8004222:	6106      	str	r6, [r0, #16]
 8004224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004228:	f85e 1b04 	ldr.w	r1, [lr], #4
 800422c:	fa1c f381 	uxtah	r3, ip, r1
 8004230:	141a      	asrs	r2, r3, #16
 8004232:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004236:	b29b      	uxth	r3, r3
 8004238:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800423c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004240:	f845 3b04 	str.w	r3, [r5], #4
 8004244:	e7e8      	b.n	8004218 <__mdiff+0x8a>
 8004246:	3e01      	subs	r6, #1
 8004248:	e7e8      	b.n	800421c <__mdiff+0x8e>

0800424a <__d2b>:
 800424a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800424e:	460e      	mov	r6, r1
 8004250:	2101      	movs	r1, #1
 8004252:	ec59 8b10 	vmov	r8, r9, d0
 8004256:	4615      	mov	r5, r2
 8004258:	f7ff fd75 	bl	8003d46 <_Balloc>
 800425c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004260:	4607      	mov	r7, r0
 8004262:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004266:	bb34      	cbnz	r4, 80042b6 <__d2b+0x6c>
 8004268:	9301      	str	r3, [sp, #4]
 800426a:	f1b8 0f00 	cmp.w	r8, #0
 800426e:	d027      	beq.n	80042c0 <__d2b+0x76>
 8004270:	a802      	add	r0, sp, #8
 8004272:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004276:	f7ff fe0b 	bl	8003e90 <__lo0bits>
 800427a:	9900      	ldr	r1, [sp, #0]
 800427c:	b1f0      	cbz	r0, 80042bc <__d2b+0x72>
 800427e:	9a01      	ldr	r2, [sp, #4]
 8004280:	f1c0 0320 	rsb	r3, r0, #32
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	430b      	orrs	r3, r1
 800428a:	40c2      	lsrs	r2, r0
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	9201      	str	r2, [sp, #4]
 8004290:	9b01      	ldr	r3, [sp, #4]
 8004292:	61bb      	str	r3, [r7, #24]
 8004294:	2b00      	cmp	r3, #0
 8004296:	bf14      	ite	ne
 8004298:	2102      	movne	r1, #2
 800429a:	2101      	moveq	r1, #1
 800429c:	6139      	str	r1, [r7, #16]
 800429e:	b1c4      	cbz	r4, 80042d2 <__d2b+0x88>
 80042a0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80042a4:	4404      	add	r4, r0
 80042a6:	6034      	str	r4, [r6, #0]
 80042a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80042ac:	6028      	str	r0, [r5, #0]
 80042ae:	4638      	mov	r0, r7
 80042b0:	b003      	add	sp, #12
 80042b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ba:	e7d5      	b.n	8004268 <__d2b+0x1e>
 80042bc:	6179      	str	r1, [r7, #20]
 80042be:	e7e7      	b.n	8004290 <__d2b+0x46>
 80042c0:	a801      	add	r0, sp, #4
 80042c2:	f7ff fde5 	bl	8003e90 <__lo0bits>
 80042c6:	9b01      	ldr	r3, [sp, #4]
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	2101      	movs	r1, #1
 80042cc:	6139      	str	r1, [r7, #16]
 80042ce:	3020      	adds	r0, #32
 80042d0:	e7e5      	b.n	800429e <__d2b+0x54>
 80042d2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80042d6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80042da:	6030      	str	r0, [r6, #0]
 80042dc:	6918      	ldr	r0, [r3, #16]
 80042de:	f7ff fdb8 	bl	8003e52 <__hi0bits>
 80042e2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80042e6:	e7e1      	b.n	80042ac <__d2b+0x62>

080042e8 <_calloc_r>:
 80042e8:	b538      	push	{r3, r4, r5, lr}
 80042ea:	fb02 f401 	mul.w	r4, r2, r1
 80042ee:	4621      	mov	r1, r4
 80042f0:	f000 f856 	bl	80043a0 <_malloc_r>
 80042f4:	4605      	mov	r5, r0
 80042f6:	b118      	cbz	r0, 8004300 <_calloc_r+0x18>
 80042f8:	4622      	mov	r2, r4
 80042fa:	2100      	movs	r1, #0
 80042fc:	f7fe f9fe 	bl	80026fc <memset>
 8004300:	4628      	mov	r0, r5
 8004302:	bd38      	pop	{r3, r4, r5, pc}

08004304 <_free_r>:
 8004304:	b538      	push	{r3, r4, r5, lr}
 8004306:	4605      	mov	r5, r0
 8004308:	2900      	cmp	r1, #0
 800430a:	d045      	beq.n	8004398 <_free_r+0x94>
 800430c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004310:	1f0c      	subs	r4, r1, #4
 8004312:	2b00      	cmp	r3, #0
 8004314:	bfb8      	it	lt
 8004316:	18e4      	addlt	r4, r4, r3
 8004318:	f000 fa2c 	bl	8004774 <__malloc_lock>
 800431c:	4a1f      	ldr	r2, [pc, #124]	; (800439c <_free_r+0x98>)
 800431e:	6813      	ldr	r3, [r2, #0]
 8004320:	4610      	mov	r0, r2
 8004322:	b933      	cbnz	r3, 8004332 <_free_r+0x2e>
 8004324:	6063      	str	r3, [r4, #4]
 8004326:	6014      	str	r4, [r2, #0]
 8004328:	4628      	mov	r0, r5
 800432a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800432e:	f000 ba22 	b.w	8004776 <__malloc_unlock>
 8004332:	42a3      	cmp	r3, r4
 8004334:	d90c      	bls.n	8004350 <_free_r+0x4c>
 8004336:	6821      	ldr	r1, [r4, #0]
 8004338:	1862      	adds	r2, r4, r1
 800433a:	4293      	cmp	r3, r2
 800433c:	bf04      	itt	eq
 800433e:	681a      	ldreq	r2, [r3, #0]
 8004340:	685b      	ldreq	r3, [r3, #4]
 8004342:	6063      	str	r3, [r4, #4]
 8004344:	bf04      	itt	eq
 8004346:	1852      	addeq	r2, r2, r1
 8004348:	6022      	streq	r2, [r4, #0]
 800434a:	6004      	str	r4, [r0, #0]
 800434c:	e7ec      	b.n	8004328 <_free_r+0x24>
 800434e:	4613      	mov	r3, r2
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	b10a      	cbz	r2, 8004358 <_free_r+0x54>
 8004354:	42a2      	cmp	r2, r4
 8004356:	d9fa      	bls.n	800434e <_free_r+0x4a>
 8004358:	6819      	ldr	r1, [r3, #0]
 800435a:	1858      	adds	r0, r3, r1
 800435c:	42a0      	cmp	r0, r4
 800435e:	d10b      	bne.n	8004378 <_free_r+0x74>
 8004360:	6820      	ldr	r0, [r4, #0]
 8004362:	4401      	add	r1, r0
 8004364:	1858      	adds	r0, r3, r1
 8004366:	4282      	cmp	r2, r0
 8004368:	6019      	str	r1, [r3, #0]
 800436a:	d1dd      	bne.n	8004328 <_free_r+0x24>
 800436c:	6810      	ldr	r0, [r2, #0]
 800436e:	6852      	ldr	r2, [r2, #4]
 8004370:	605a      	str	r2, [r3, #4]
 8004372:	4401      	add	r1, r0
 8004374:	6019      	str	r1, [r3, #0]
 8004376:	e7d7      	b.n	8004328 <_free_r+0x24>
 8004378:	d902      	bls.n	8004380 <_free_r+0x7c>
 800437a:	230c      	movs	r3, #12
 800437c:	602b      	str	r3, [r5, #0]
 800437e:	e7d3      	b.n	8004328 <_free_r+0x24>
 8004380:	6820      	ldr	r0, [r4, #0]
 8004382:	1821      	adds	r1, r4, r0
 8004384:	428a      	cmp	r2, r1
 8004386:	bf04      	itt	eq
 8004388:	6811      	ldreq	r1, [r2, #0]
 800438a:	6852      	ldreq	r2, [r2, #4]
 800438c:	6062      	str	r2, [r4, #4]
 800438e:	bf04      	itt	eq
 8004390:	1809      	addeq	r1, r1, r0
 8004392:	6021      	streq	r1, [r4, #0]
 8004394:	605c      	str	r4, [r3, #4]
 8004396:	e7c7      	b.n	8004328 <_free_r+0x24>
 8004398:	bd38      	pop	{r3, r4, r5, pc}
 800439a:	bf00      	nop
 800439c:	20000614 	.word	0x20000614

080043a0 <_malloc_r>:
 80043a0:	b570      	push	{r4, r5, r6, lr}
 80043a2:	1ccd      	adds	r5, r1, #3
 80043a4:	f025 0503 	bic.w	r5, r5, #3
 80043a8:	3508      	adds	r5, #8
 80043aa:	2d0c      	cmp	r5, #12
 80043ac:	bf38      	it	cc
 80043ae:	250c      	movcc	r5, #12
 80043b0:	2d00      	cmp	r5, #0
 80043b2:	4606      	mov	r6, r0
 80043b4:	db01      	blt.n	80043ba <_malloc_r+0x1a>
 80043b6:	42a9      	cmp	r1, r5
 80043b8:	d903      	bls.n	80043c2 <_malloc_r+0x22>
 80043ba:	230c      	movs	r3, #12
 80043bc:	6033      	str	r3, [r6, #0]
 80043be:	2000      	movs	r0, #0
 80043c0:	bd70      	pop	{r4, r5, r6, pc}
 80043c2:	f000 f9d7 	bl	8004774 <__malloc_lock>
 80043c6:	4a23      	ldr	r2, [pc, #140]	; (8004454 <_malloc_r+0xb4>)
 80043c8:	6814      	ldr	r4, [r2, #0]
 80043ca:	4621      	mov	r1, r4
 80043cc:	b991      	cbnz	r1, 80043f4 <_malloc_r+0x54>
 80043ce:	4c22      	ldr	r4, [pc, #136]	; (8004458 <_malloc_r+0xb8>)
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	b91b      	cbnz	r3, 80043dc <_malloc_r+0x3c>
 80043d4:	4630      	mov	r0, r6
 80043d6:	f000 f991 	bl	80046fc <_sbrk_r>
 80043da:	6020      	str	r0, [r4, #0]
 80043dc:	4629      	mov	r1, r5
 80043de:	4630      	mov	r0, r6
 80043e0:	f000 f98c 	bl	80046fc <_sbrk_r>
 80043e4:	1c43      	adds	r3, r0, #1
 80043e6:	d126      	bne.n	8004436 <_malloc_r+0x96>
 80043e8:	230c      	movs	r3, #12
 80043ea:	6033      	str	r3, [r6, #0]
 80043ec:	4630      	mov	r0, r6
 80043ee:	f000 f9c2 	bl	8004776 <__malloc_unlock>
 80043f2:	e7e4      	b.n	80043be <_malloc_r+0x1e>
 80043f4:	680b      	ldr	r3, [r1, #0]
 80043f6:	1b5b      	subs	r3, r3, r5
 80043f8:	d41a      	bmi.n	8004430 <_malloc_r+0x90>
 80043fa:	2b0b      	cmp	r3, #11
 80043fc:	d90f      	bls.n	800441e <_malloc_r+0x7e>
 80043fe:	600b      	str	r3, [r1, #0]
 8004400:	50cd      	str	r5, [r1, r3]
 8004402:	18cc      	adds	r4, r1, r3
 8004404:	4630      	mov	r0, r6
 8004406:	f000 f9b6 	bl	8004776 <__malloc_unlock>
 800440a:	f104 000b 	add.w	r0, r4, #11
 800440e:	1d23      	adds	r3, r4, #4
 8004410:	f020 0007 	bic.w	r0, r0, #7
 8004414:	1ac3      	subs	r3, r0, r3
 8004416:	d01b      	beq.n	8004450 <_malloc_r+0xb0>
 8004418:	425a      	negs	r2, r3
 800441a:	50e2      	str	r2, [r4, r3]
 800441c:	bd70      	pop	{r4, r5, r6, pc}
 800441e:	428c      	cmp	r4, r1
 8004420:	bf0d      	iteet	eq
 8004422:	6863      	ldreq	r3, [r4, #4]
 8004424:	684b      	ldrne	r3, [r1, #4]
 8004426:	6063      	strne	r3, [r4, #4]
 8004428:	6013      	streq	r3, [r2, #0]
 800442a:	bf18      	it	ne
 800442c:	460c      	movne	r4, r1
 800442e:	e7e9      	b.n	8004404 <_malloc_r+0x64>
 8004430:	460c      	mov	r4, r1
 8004432:	6849      	ldr	r1, [r1, #4]
 8004434:	e7ca      	b.n	80043cc <_malloc_r+0x2c>
 8004436:	1cc4      	adds	r4, r0, #3
 8004438:	f024 0403 	bic.w	r4, r4, #3
 800443c:	42a0      	cmp	r0, r4
 800443e:	d005      	beq.n	800444c <_malloc_r+0xac>
 8004440:	1a21      	subs	r1, r4, r0
 8004442:	4630      	mov	r0, r6
 8004444:	f000 f95a 	bl	80046fc <_sbrk_r>
 8004448:	3001      	adds	r0, #1
 800444a:	d0cd      	beq.n	80043e8 <_malloc_r+0x48>
 800444c:	6025      	str	r5, [r4, #0]
 800444e:	e7d9      	b.n	8004404 <_malloc_r+0x64>
 8004450:	bd70      	pop	{r4, r5, r6, pc}
 8004452:	bf00      	nop
 8004454:	20000614 	.word	0x20000614
 8004458:	20000618 	.word	0x20000618

0800445c <__ssputs_r>:
 800445c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004460:	688e      	ldr	r6, [r1, #8]
 8004462:	429e      	cmp	r6, r3
 8004464:	4682      	mov	sl, r0
 8004466:	460c      	mov	r4, r1
 8004468:	4691      	mov	r9, r2
 800446a:	4698      	mov	r8, r3
 800446c:	d835      	bhi.n	80044da <__ssputs_r+0x7e>
 800446e:	898a      	ldrh	r2, [r1, #12]
 8004470:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004474:	d031      	beq.n	80044da <__ssputs_r+0x7e>
 8004476:	6825      	ldr	r5, [r4, #0]
 8004478:	6909      	ldr	r1, [r1, #16]
 800447a:	1a6f      	subs	r7, r5, r1
 800447c:	6965      	ldr	r5, [r4, #20]
 800447e:	2302      	movs	r3, #2
 8004480:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004484:	fb95 f5f3 	sdiv	r5, r5, r3
 8004488:	f108 0301 	add.w	r3, r8, #1
 800448c:	443b      	add	r3, r7
 800448e:	429d      	cmp	r5, r3
 8004490:	bf38      	it	cc
 8004492:	461d      	movcc	r5, r3
 8004494:	0553      	lsls	r3, r2, #21
 8004496:	d531      	bpl.n	80044fc <__ssputs_r+0xa0>
 8004498:	4629      	mov	r1, r5
 800449a:	f7ff ff81 	bl	80043a0 <_malloc_r>
 800449e:	4606      	mov	r6, r0
 80044a0:	b950      	cbnz	r0, 80044b8 <__ssputs_r+0x5c>
 80044a2:	230c      	movs	r3, #12
 80044a4:	f8ca 3000 	str.w	r3, [sl]
 80044a8:	89a3      	ldrh	r3, [r4, #12]
 80044aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ae:	81a3      	strh	r3, [r4, #12]
 80044b0:	f04f 30ff 	mov.w	r0, #4294967295
 80044b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b8:	463a      	mov	r2, r7
 80044ba:	6921      	ldr	r1, [r4, #16]
 80044bc:	f7ff fc38 	bl	8003d30 <memcpy>
 80044c0:	89a3      	ldrh	r3, [r4, #12]
 80044c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80044c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ca:	81a3      	strh	r3, [r4, #12]
 80044cc:	6126      	str	r6, [r4, #16]
 80044ce:	6165      	str	r5, [r4, #20]
 80044d0:	443e      	add	r6, r7
 80044d2:	1bed      	subs	r5, r5, r7
 80044d4:	6026      	str	r6, [r4, #0]
 80044d6:	60a5      	str	r5, [r4, #8]
 80044d8:	4646      	mov	r6, r8
 80044da:	4546      	cmp	r6, r8
 80044dc:	bf28      	it	cs
 80044de:	4646      	movcs	r6, r8
 80044e0:	4632      	mov	r2, r6
 80044e2:	4649      	mov	r1, r9
 80044e4:	6820      	ldr	r0, [r4, #0]
 80044e6:	f000 f92b 	bl	8004740 <memmove>
 80044ea:	68a3      	ldr	r3, [r4, #8]
 80044ec:	1b9b      	subs	r3, r3, r6
 80044ee:	60a3      	str	r3, [r4, #8]
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	441e      	add	r6, r3
 80044f4:	6026      	str	r6, [r4, #0]
 80044f6:	2000      	movs	r0, #0
 80044f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044fc:	462a      	mov	r2, r5
 80044fe:	f000 f93b 	bl	8004778 <_realloc_r>
 8004502:	4606      	mov	r6, r0
 8004504:	2800      	cmp	r0, #0
 8004506:	d1e1      	bne.n	80044cc <__ssputs_r+0x70>
 8004508:	6921      	ldr	r1, [r4, #16]
 800450a:	4650      	mov	r0, sl
 800450c:	f7ff fefa 	bl	8004304 <_free_r>
 8004510:	e7c7      	b.n	80044a2 <__ssputs_r+0x46>
	...

08004514 <_svfiprintf_r>:
 8004514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004518:	b09d      	sub	sp, #116	; 0x74
 800451a:	4680      	mov	r8, r0
 800451c:	9303      	str	r3, [sp, #12]
 800451e:	898b      	ldrh	r3, [r1, #12]
 8004520:	061c      	lsls	r4, r3, #24
 8004522:	460d      	mov	r5, r1
 8004524:	4616      	mov	r6, r2
 8004526:	d50f      	bpl.n	8004548 <_svfiprintf_r+0x34>
 8004528:	690b      	ldr	r3, [r1, #16]
 800452a:	b96b      	cbnz	r3, 8004548 <_svfiprintf_r+0x34>
 800452c:	2140      	movs	r1, #64	; 0x40
 800452e:	f7ff ff37 	bl	80043a0 <_malloc_r>
 8004532:	6028      	str	r0, [r5, #0]
 8004534:	6128      	str	r0, [r5, #16]
 8004536:	b928      	cbnz	r0, 8004544 <_svfiprintf_r+0x30>
 8004538:	230c      	movs	r3, #12
 800453a:	f8c8 3000 	str.w	r3, [r8]
 800453e:	f04f 30ff 	mov.w	r0, #4294967295
 8004542:	e0c5      	b.n	80046d0 <_svfiprintf_r+0x1bc>
 8004544:	2340      	movs	r3, #64	; 0x40
 8004546:	616b      	str	r3, [r5, #20]
 8004548:	2300      	movs	r3, #0
 800454a:	9309      	str	r3, [sp, #36]	; 0x24
 800454c:	2320      	movs	r3, #32
 800454e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004552:	2330      	movs	r3, #48	; 0x30
 8004554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004558:	f04f 0b01 	mov.w	fp, #1
 800455c:	4637      	mov	r7, r6
 800455e:	463c      	mov	r4, r7
 8004560:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d13c      	bne.n	80045e2 <_svfiprintf_r+0xce>
 8004568:	ebb7 0a06 	subs.w	sl, r7, r6
 800456c:	d00b      	beq.n	8004586 <_svfiprintf_r+0x72>
 800456e:	4653      	mov	r3, sl
 8004570:	4632      	mov	r2, r6
 8004572:	4629      	mov	r1, r5
 8004574:	4640      	mov	r0, r8
 8004576:	f7ff ff71 	bl	800445c <__ssputs_r>
 800457a:	3001      	adds	r0, #1
 800457c:	f000 80a3 	beq.w	80046c6 <_svfiprintf_r+0x1b2>
 8004580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004582:	4453      	add	r3, sl
 8004584:	9309      	str	r3, [sp, #36]	; 0x24
 8004586:	783b      	ldrb	r3, [r7, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 809c 	beq.w	80046c6 <_svfiprintf_r+0x1b2>
 800458e:	2300      	movs	r3, #0
 8004590:	f04f 32ff 	mov.w	r2, #4294967295
 8004594:	9304      	str	r3, [sp, #16]
 8004596:	9307      	str	r3, [sp, #28]
 8004598:	9205      	str	r2, [sp, #20]
 800459a:	9306      	str	r3, [sp, #24]
 800459c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045a0:	931a      	str	r3, [sp, #104]	; 0x68
 80045a2:	2205      	movs	r2, #5
 80045a4:	7821      	ldrb	r1, [r4, #0]
 80045a6:	4850      	ldr	r0, [pc, #320]	; (80046e8 <_svfiprintf_r+0x1d4>)
 80045a8:	f7fb fe1a 	bl	80001e0 <memchr>
 80045ac:	1c67      	adds	r7, r4, #1
 80045ae:	9b04      	ldr	r3, [sp, #16]
 80045b0:	b9d8      	cbnz	r0, 80045ea <_svfiprintf_r+0xd6>
 80045b2:	06d9      	lsls	r1, r3, #27
 80045b4:	bf44      	itt	mi
 80045b6:	2220      	movmi	r2, #32
 80045b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80045bc:	071a      	lsls	r2, r3, #28
 80045be:	bf44      	itt	mi
 80045c0:	222b      	movmi	r2, #43	; 0x2b
 80045c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80045c6:	7822      	ldrb	r2, [r4, #0]
 80045c8:	2a2a      	cmp	r2, #42	; 0x2a
 80045ca:	d016      	beq.n	80045fa <_svfiprintf_r+0xe6>
 80045cc:	9a07      	ldr	r2, [sp, #28]
 80045ce:	2100      	movs	r1, #0
 80045d0:	200a      	movs	r0, #10
 80045d2:	4627      	mov	r7, r4
 80045d4:	3401      	adds	r4, #1
 80045d6:	783b      	ldrb	r3, [r7, #0]
 80045d8:	3b30      	subs	r3, #48	; 0x30
 80045da:	2b09      	cmp	r3, #9
 80045dc:	d951      	bls.n	8004682 <_svfiprintf_r+0x16e>
 80045de:	b1c9      	cbz	r1, 8004614 <_svfiprintf_r+0x100>
 80045e0:	e011      	b.n	8004606 <_svfiprintf_r+0xf2>
 80045e2:	2b25      	cmp	r3, #37	; 0x25
 80045e4:	d0c0      	beq.n	8004568 <_svfiprintf_r+0x54>
 80045e6:	4627      	mov	r7, r4
 80045e8:	e7b9      	b.n	800455e <_svfiprintf_r+0x4a>
 80045ea:	4a3f      	ldr	r2, [pc, #252]	; (80046e8 <_svfiprintf_r+0x1d4>)
 80045ec:	1a80      	subs	r0, r0, r2
 80045ee:	fa0b f000 	lsl.w	r0, fp, r0
 80045f2:	4318      	orrs	r0, r3
 80045f4:	9004      	str	r0, [sp, #16]
 80045f6:	463c      	mov	r4, r7
 80045f8:	e7d3      	b.n	80045a2 <_svfiprintf_r+0x8e>
 80045fa:	9a03      	ldr	r2, [sp, #12]
 80045fc:	1d11      	adds	r1, r2, #4
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	9103      	str	r1, [sp, #12]
 8004602:	2a00      	cmp	r2, #0
 8004604:	db01      	blt.n	800460a <_svfiprintf_r+0xf6>
 8004606:	9207      	str	r2, [sp, #28]
 8004608:	e004      	b.n	8004614 <_svfiprintf_r+0x100>
 800460a:	4252      	negs	r2, r2
 800460c:	f043 0302 	orr.w	r3, r3, #2
 8004610:	9207      	str	r2, [sp, #28]
 8004612:	9304      	str	r3, [sp, #16]
 8004614:	783b      	ldrb	r3, [r7, #0]
 8004616:	2b2e      	cmp	r3, #46	; 0x2e
 8004618:	d10e      	bne.n	8004638 <_svfiprintf_r+0x124>
 800461a:	787b      	ldrb	r3, [r7, #1]
 800461c:	2b2a      	cmp	r3, #42	; 0x2a
 800461e:	f107 0101 	add.w	r1, r7, #1
 8004622:	d132      	bne.n	800468a <_svfiprintf_r+0x176>
 8004624:	9b03      	ldr	r3, [sp, #12]
 8004626:	1d1a      	adds	r2, r3, #4
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	9203      	str	r2, [sp, #12]
 800462c:	2b00      	cmp	r3, #0
 800462e:	bfb8      	it	lt
 8004630:	f04f 33ff 	movlt.w	r3, #4294967295
 8004634:	3702      	adds	r7, #2
 8004636:	9305      	str	r3, [sp, #20]
 8004638:	4c2c      	ldr	r4, [pc, #176]	; (80046ec <_svfiprintf_r+0x1d8>)
 800463a:	7839      	ldrb	r1, [r7, #0]
 800463c:	2203      	movs	r2, #3
 800463e:	4620      	mov	r0, r4
 8004640:	f7fb fdce 	bl	80001e0 <memchr>
 8004644:	b138      	cbz	r0, 8004656 <_svfiprintf_r+0x142>
 8004646:	2340      	movs	r3, #64	; 0x40
 8004648:	1b00      	subs	r0, r0, r4
 800464a:	fa03 f000 	lsl.w	r0, r3, r0
 800464e:	9b04      	ldr	r3, [sp, #16]
 8004650:	4303      	orrs	r3, r0
 8004652:	9304      	str	r3, [sp, #16]
 8004654:	3701      	adds	r7, #1
 8004656:	7839      	ldrb	r1, [r7, #0]
 8004658:	4825      	ldr	r0, [pc, #148]	; (80046f0 <_svfiprintf_r+0x1dc>)
 800465a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800465e:	2206      	movs	r2, #6
 8004660:	1c7e      	adds	r6, r7, #1
 8004662:	f7fb fdbd 	bl	80001e0 <memchr>
 8004666:	2800      	cmp	r0, #0
 8004668:	d035      	beq.n	80046d6 <_svfiprintf_r+0x1c2>
 800466a:	4b22      	ldr	r3, [pc, #136]	; (80046f4 <_svfiprintf_r+0x1e0>)
 800466c:	b9fb      	cbnz	r3, 80046ae <_svfiprintf_r+0x19a>
 800466e:	9b03      	ldr	r3, [sp, #12]
 8004670:	3307      	adds	r3, #7
 8004672:	f023 0307 	bic.w	r3, r3, #7
 8004676:	3308      	adds	r3, #8
 8004678:	9303      	str	r3, [sp, #12]
 800467a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800467c:	444b      	add	r3, r9
 800467e:	9309      	str	r3, [sp, #36]	; 0x24
 8004680:	e76c      	b.n	800455c <_svfiprintf_r+0x48>
 8004682:	fb00 3202 	mla	r2, r0, r2, r3
 8004686:	2101      	movs	r1, #1
 8004688:	e7a3      	b.n	80045d2 <_svfiprintf_r+0xbe>
 800468a:	2300      	movs	r3, #0
 800468c:	9305      	str	r3, [sp, #20]
 800468e:	4618      	mov	r0, r3
 8004690:	240a      	movs	r4, #10
 8004692:	460f      	mov	r7, r1
 8004694:	3101      	adds	r1, #1
 8004696:	783a      	ldrb	r2, [r7, #0]
 8004698:	3a30      	subs	r2, #48	; 0x30
 800469a:	2a09      	cmp	r2, #9
 800469c:	d903      	bls.n	80046a6 <_svfiprintf_r+0x192>
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0ca      	beq.n	8004638 <_svfiprintf_r+0x124>
 80046a2:	9005      	str	r0, [sp, #20]
 80046a4:	e7c8      	b.n	8004638 <_svfiprintf_r+0x124>
 80046a6:	fb04 2000 	mla	r0, r4, r0, r2
 80046aa:	2301      	movs	r3, #1
 80046ac:	e7f1      	b.n	8004692 <_svfiprintf_r+0x17e>
 80046ae:	ab03      	add	r3, sp, #12
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	462a      	mov	r2, r5
 80046b4:	4b10      	ldr	r3, [pc, #64]	; (80046f8 <_svfiprintf_r+0x1e4>)
 80046b6:	a904      	add	r1, sp, #16
 80046b8:	4640      	mov	r0, r8
 80046ba:	f7fe f8bd 	bl	8002838 <_printf_float>
 80046be:	f1b0 3fff 	cmp.w	r0, #4294967295
 80046c2:	4681      	mov	r9, r0
 80046c4:	d1d9      	bne.n	800467a <_svfiprintf_r+0x166>
 80046c6:	89ab      	ldrh	r3, [r5, #12]
 80046c8:	065b      	lsls	r3, r3, #25
 80046ca:	f53f af38 	bmi.w	800453e <_svfiprintf_r+0x2a>
 80046ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046d0:	b01d      	add	sp, #116	; 0x74
 80046d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046d6:	ab03      	add	r3, sp, #12
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	462a      	mov	r2, r5
 80046dc:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <_svfiprintf_r+0x1e4>)
 80046de:	a904      	add	r1, sp, #16
 80046e0:	4640      	mov	r0, r8
 80046e2:	f7fe fb5f 	bl	8002da4 <_printf_i>
 80046e6:	e7ea      	b.n	80046be <_svfiprintf_r+0x1aa>
 80046e8:	080056c4 	.word	0x080056c4
 80046ec:	080056ca 	.word	0x080056ca
 80046f0:	080056ce 	.word	0x080056ce
 80046f4:	08002839 	.word	0x08002839
 80046f8:	0800445d 	.word	0x0800445d

080046fc <_sbrk_r>:
 80046fc:	b538      	push	{r3, r4, r5, lr}
 80046fe:	4c06      	ldr	r4, [pc, #24]	; (8004718 <_sbrk_r+0x1c>)
 8004700:	2300      	movs	r3, #0
 8004702:	4605      	mov	r5, r0
 8004704:	4608      	mov	r0, r1
 8004706:	6023      	str	r3, [r4, #0]
 8004708:	f7fd ffb4 	bl	8002674 <_sbrk>
 800470c:	1c43      	adds	r3, r0, #1
 800470e:	d102      	bne.n	8004716 <_sbrk_r+0x1a>
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	b103      	cbz	r3, 8004716 <_sbrk_r+0x1a>
 8004714:	602b      	str	r3, [r5, #0]
 8004716:	bd38      	pop	{r3, r4, r5, pc}
 8004718:	200006b0 	.word	0x200006b0

0800471c <__ascii_mbtowc>:
 800471c:	b082      	sub	sp, #8
 800471e:	b901      	cbnz	r1, 8004722 <__ascii_mbtowc+0x6>
 8004720:	a901      	add	r1, sp, #4
 8004722:	b142      	cbz	r2, 8004736 <__ascii_mbtowc+0x1a>
 8004724:	b14b      	cbz	r3, 800473a <__ascii_mbtowc+0x1e>
 8004726:	7813      	ldrb	r3, [r2, #0]
 8004728:	600b      	str	r3, [r1, #0]
 800472a:	7812      	ldrb	r2, [r2, #0]
 800472c:	1c10      	adds	r0, r2, #0
 800472e:	bf18      	it	ne
 8004730:	2001      	movne	r0, #1
 8004732:	b002      	add	sp, #8
 8004734:	4770      	bx	lr
 8004736:	4610      	mov	r0, r2
 8004738:	e7fb      	b.n	8004732 <__ascii_mbtowc+0x16>
 800473a:	f06f 0001 	mvn.w	r0, #1
 800473e:	e7f8      	b.n	8004732 <__ascii_mbtowc+0x16>

08004740 <memmove>:
 8004740:	4288      	cmp	r0, r1
 8004742:	b510      	push	{r4, lr}
 8004744:	eb01 0302 	add.w	r3, r1, r2
 8004748:	d803      	bhi.n	8004752 <memmove+0x12>
 800474a:	1e42      	subs	r2, r0, #1
 800474c:	4299      	cmp	r1, r3
 800474e:	d10c      	bne.n	800476a <memmove+0x2a>
 8004750:	bd10      	pop	{r4, pc}
 8004752:	4298      	cmp	r0, r3
 8004754:	d2f9      	bcs.n	800474a <memmove+0xa>
 8004756:	1881      	adds	r1, r0, r2
 8004758:	1ad2      	subs	r2, r2, r3
 800475a:	42d3      	cmn	r3, r2
 800475c:	d100      	bne.n	8004760 <memmove+0x20>
 800475e:	bd10      	pop	{r4, pc}
 8004760:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004764:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004768:	e7f7      	b.n	800475a <memmove+0x1a>
 800476a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800476e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004772:	e7eb      	b.n	800474c <memmove+0xc>

08004774 <__malloc_lock>:
 8004774:	4770      	bx	lr

08004776 <__malloc_unlock>:
 8004776:	4770      	bx	lr

08004778 <_realloc_r>:
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	4607      	mov	r7, r0
 800477c:	4614      	mov	r4, r2
 800477e:	460e      	mov	r6, r1
 8004780:	b921      	cbnz	r1, 800478c <_realloc_r+0x14>
 8004782:	4611      	mov	r1, r2
 8004784:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004788:	f7ff be0a 	b.w	80043a0 <_malloc_r>
 800478c:	b922      	cbnz	r2, 8004798 <_realloc_r+0x20>
 800478e:	f7ff fdb9 	bl	8004304 <_free_r>
 8004792:	4625      	mov	r5, r4
 8004794:	4628      	mov	r0, r5
 8004796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004798:	f000 f821 	bl	80047de <_malloc_usable_size_r>
 800479c:	4284      	cmp	r4, r0
 800479e:	d90f      	bls.n	80047c0 <_realloc_r+0x48>
 80047a0:	4621      	mov	r1, r4
 80047a2:	4638      	mov	r0, r7
 80047a4:	f7ff fdfc 	bl	80043a0 <_malloc_r>
 80047a8:	4605      	mov	r5, r0
 80047aa:	2800      	cmp	r0, #0
 80047ac:	d0f2      	beq.n	8004794 <_realloc_r+0x1c>
 80047ae:	4631      	mov	r1, r6
 80047b0:	4622      	mov	r2, r4
 80047b2:	f7ff fabd 	bl	8003d30 <memcpy>
 80047b6:	4631      	mov	r1, r6
 80047b8:	4638      	mov	r0, r7
 80047ba:	f7ff fda3 	bl	8004304 <_free_r>
 80047be:	e7e9      	b.n	8004794 <_realloc_r+0x1c>
 80047c0:	4635      	mov	r5, r6
 80047c2:	e7e7      	b.n	8004794 <_realloc_r+0x1c>

080047c4 <__ascii_wctomb>:
 80047c4:	b149      	cbz	r1, 80047da <__ascii_wctomb+0x16>
 80047c6:	2aff      	cmp	r2, #255	; 0xff
 80047c8:	bf85      	ittet	hi
 80047ca:	238a      	movhi	r3, #138	; 0x8a
 80047cc:	6003      	strhi	r3, [r0, #0]
 80047ce:	700a      	strbls	r2, [r1, #0]
 80047d0:	f04f 30ff 	movhi.w	r0, #4294967295
 80047d4:	bf98      	it	ls
 80047d6:	2001      	movls	r0, #1
 80047d8:	4770      	bx	lr
 80047da:	4608      	mov	r0, r1
 80047dc:	4770      	bx	lr

080047de <_malloc_usable_size_r>:
 80047de:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80047e2:	2800      	cmp	r0, #0
 80047e4:	f1a0 0004 	sub.w	r0, r0, #4
 80047e8:	bfbc      	itt	lt
 80047ea:	580b      	ldrlt	r3, [r1, r0]
 80047ec:	18c0      	addlt	r0, r0, r3
 80047ee:	4770      	bx	lr

080047f0 <_init>:
 80047f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f2:	bf00      	nop
 80047f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047f6:	bc08      	pop	{r3}
 80047f8:	469e      	mov	lr, r3
 80047fa:	4770      	bx	lr

080047fc <_fini>:
 80047fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fe:	bf00      	nop
 8004800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004802:	bc08      	pop	{r3}
 8004804:	469e      	mov	lr, r3
 8004806:	4770      	bx	lr
